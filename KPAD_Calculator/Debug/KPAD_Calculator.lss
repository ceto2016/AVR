
KPAD_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000627c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  0000627c  00006310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001ae  008001ae  0000645e  2**0
                  ALLOC
  3 .stab         00003468  00000000  00000000  00006460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016c0  00000000  00000000  000098c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000af88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000293  00000000  00000000  0000b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000378f  00000000  00000000  0000b45b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000197d  00000000  00000000  0000ebea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000186f  00000000  00000000  00010567  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00011dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003bf  00000000  00000000  00012038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000245c  00000000  00000000  000123f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00014853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__vector_1>
       8:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__vector_2>
       c:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <main>
      8a:	0c 94 3c 31 	jmp	0x6278	; 0x6278 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 31 12 	call	0x2462	; 0x2462 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     1bc:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__fixunssfdi>:
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 05 31 	jmp	0x620a	; 0x620a <__prologue_saves__>
     1f4:	7b 01       	movw	r14, r22
     1f6:	8c 01       	movw	r16, r24
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e8       	ldi	r20, 0x80	; 128
     1fe:	5f e3       	ldi	r21, 0x3F	; 63
     200:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
     204:	88 23       	and	r24, r24
     206:	4c f4       	brge	.+18     	; 0x21a <__fixunssfdi+0x32>
     208:	aa 24       	eor	r10, r10
     20a:	bb 24       	eor	r11, r11
     20c:	cc 24       	eor	r12, r12
     20e:	dd 24       	eor	r13, r13
     210:	ee 24       	eor	r14, r14
     212:	ff 24       	eor	r15, r15
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	86 c0       	rjmp	.+268    	; 0x326 <__fixunssfdi+0x13e>
     21a:	c8 01       	movw	r24, r16
     21c:	b7 01       	movw	r22, r14
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e8       	ldi	r20, 0x80	; 128
     224:	5f e4       	ldi	r21, 0x4F	; 79
     226:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
     22a:	88 23       	and	r24, r24
     22c:	54 f4       	brge	.+20     	; 0x242 <__fixunssfdi+0x5a>
     22e:	c8 01       	movw	r24, r16
     230:	b7 01       	movw	r22, r14
     232:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     236:	5b 01       	movw	r10, r22
     238:	6c 01       	movw	r12, r24
     23a:	ee 24       	eor	r14, r14
     23c:	ff 24       	eor	r15, r15
     23e:	87 01       	movw	r16, r14
     240:	72 c0       	rjmp	.+228    	; 0x326 <__fixunssfdi+0x13e>
     242:	c8 01       	movw	r24, r16
     244:	b7 01       	movw	r22, r14
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e8       	ldi	r20, 0x80	; 128
     24c:	5f e5       	ldi	r21, 0x5F	; 95
     24e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
     252:	87 fd       	sbrc	r24, 7
     254:	0f c0       	rjmp	.+30     	; 0x274 <__fixunssfdi+0x8c>
     256:	aa 24       	eor	r10, r10
     258:	aa 94       	dec	r10
     25a:	bb 24       	eor	r11, r11
     25c:	ba 94       	dec	r11
     25e:	cc 24       	eor	r12, r12
     260:	ca 94       	dec	r12
     262:	dd 24       	eor	r13, r13
     264:	da 94       	dec	r13
     266:	ee 24       	eor	r14, r14
     268:	ea 94       	dec	r14
     26a:	ff 24       	eor	r15, r15
     26c:	fa 94       	dec	r15
     26e:	0f ef       	ldi	r16, 0xFF	; 255
     270:	1f ef       	ldi	r17, 0xFF	; 255
     272:	59 c0       	rjmp	.+178    	; 0x326 <__fixunssfdi+0x13e>
     274:	c8 01       	movw	r24, r16
     276:	b7 01       	movw	r22, r14
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e8       	ldi	r20, 0x80	; 128
     27e:	5f e2       	ldi	r21, 0x2F	; 47
     280:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
     284:	7b 01       	movw	r14, r22
     286:	8c 01       	movw	r16, r24
     288:	22 24       	eor	r2, r2
     28a:	33 24       	eor	r3, r3
     28c:	21 01       	movw	r4, r2
     28e:	90 e1       	ldi	r25, 0x10	; 16
     290:	a9 2e       	mov	r10, r25
     292:	b1 2c       	mov	r11, r1
     294:	c1 2c       	mov	r12, r1
     296:	d1 2c       	mov	r13, r1
     298:	c0 e0       	ldi	r28, 0x00	; 0
     29a:	d0 e0       	ldi	r29, 0x00	; 0
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0a 2c       	mov	r0, r10
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__fixunssfdi+0xc8>
     2a8:	66 0f       	add	r22, r22
     2aa:	77 1f       	adc	r23, r23
     2ac:	88 1f       	adc	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	0a 94       	dec	r0
     2b2:	d2 f7       	brpl	.-12     	; 0x2a8 <__fixunssfdi+0xc0>
     2b4:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__floatunsisf>
     2b8:	3b 01       	movw	r6, r22
     2ba:	4c 01       	movw	r8, r24
     2bc:	c8 01       	movw	r24, r16
     2be:	b7 01       	movw	r22, r14
     2c0:	a4 01       	movw	r20, r8
     2c2:	93 01       	movw	r18, r6
     2c4:	0e 94 31 12 	call	0x2462	; 0x2462 <__gesf2>
     2c8:	88 23       	and	r24, r24
     2ca:	64 f0       	brlt	.+24     	; 0x2e4 <__fixunssfdi+0xfc>
     2cc:	2a 28       	or	r2, r10
     2ce:	3b 28       	or	r3, r11
     2d0:	4c 28       	or	r4, r12
     2d2:	5d 28       	or	r5, r13
     2d4:	c8 01       	movw	r24, r16
     2d6:	b7 01       	movw	r22, r14
     2d8:	a4 01       	movw	r20, r8
     2da:	93 01       	movw	r18, r6
     2dc:	0e 94 25 11 	call	0x224a	; 0x224a <__divsf3>
     2e0:	7b 01       	movw	r14, r22
     2e2:	8c 01       	movw	r16, r24
     2e4:	d6 94       	lsr	r13
     2e6:	c7 94       	ror	r12
     2e8:	b7 94       	ror	r11
     2ea:	a7 94       	ror	r10
     2ec:	21 96       	adiw	r28, 0x01	; 1
     2ee:	c5 30       	cpi	r28, 0x05	; 5
     2f0:	d1 05       	cpc	r29, r1
     2f2:	a1 f6       	brne	.-88     	; 0x29c <__fixunssfdi+0xb4>
     2f4:	c8 01       	movw	r24, r16
     2f6:	b7 01       	movw	r22, r14
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e8       	ldi	r20, 0x80	; 128
     2fe:	5f e4       	ldi	r21, 0x4F	; 79
     300:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
     304:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     308:	5b 01       	movw	r10, r22
     30a:	6c 01       	movw	r12, r24
     30c:	9b 01       	movw	r18, r22
     30e:	a6 01       	movw	r20, r12
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 2d       	mov	r16, r2
     31a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
     31e:	59 01       	movw	r10, r18
     320:	6a 01       	movw	r12, r20
     322:	7b 01       	movw	r14, r22
     324:	8c 01       	movw	r16, r24
     326:	95 01       	movw	r18, r10
     328:	a6 01       	movw	r20, r12
     32a:	b7 01       	movw	r22, r14
     32c:	c8 01       	movw	r24, r16
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	e2 e1       	ldi	r30, 0x12	; 18
     334:	0c 94 21 31 	jmp	0x6242	; 0x6242 <__epilogue_restores__>

00000338 <__udivdi3>:
     338:	ae e5       	ldi	r26, 0x5E	; 94
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e2 ea       	ldi	r30, 0xA2	; 162
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	0c 94 05 31 	jmp	0x620a	; 0x620a <__prologue_saves__>
     344:	a8 e0       	ldi	r26, 0x08	; 8
     346:	4e 01       	movw	r8, r28
     348:	08 94       	sec
     34a:	81 1c       	adc	r8, r1
     34c:	91 1c       	adc	r9, r1
     34e:	f4 01       	movw	r30, r8
     350:	6a 2e       	mov	r6, r26
     352:	11 92       	st	Z+, r1
     354:	6a 94       	dec	r6
     356:	e9 f7       	brne	.-6      	; 0x352 <__udivdi3+0x1a>
     358:	29 83       	std	Y+1, r18	; 0x01
     35a:	3a 83       	std	Y+2, r19	; 0x02
     35c:	4b 83       	std	Y+3, r20	; 0x03
     35e:	5c 83       	std	Y+4, r21	; 0x04
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	8f 83       	std	Y+7, r24	; 0x07
     366:	98 87       	std	Y+8, r25	; 0x08
     368:	ce 01       	movw	r24, r28
     36a:	09 96       	adiw	r24, 0x09	; 9
     36c:	fc 01       	movw	r30, r24
     36e:	11 92       	st	Z+, r1
     370:	aa 95       	dec	r26
     372:	e9 f7       	brne	.-6      	; 0x36e <__udivdi3+0x36>
     374:	a9 86       	std	Y+9, r10	; 0x09
     376:	ba 86       	std	Y+10, r11	; 0x0a
     378:	cb 86       	std	Y+11, r12	; 0x0b
     37a:	dc 86       	std	Y+12, r13	; 0x0c
     37c:	ed 86       	std	Y+13, r14	; 0x0d
     37e:	fe 86       	std	Y+14, r15	; 0x0e
     380:	0f 87       	std	Y+15, r16	; 0x0f
     382:	18 8b       	std	Y+16, r17	; 0x10
     384:	29 84       	ldd	r2, Y+9	; 0x09
     386:	3a 84       	ldd	r3, Y+10	; 0x0a
     388:	4b 84       	ldd	r4, Y+11	; 0x0b
     38a:	5c 84       	ldd	r5, Y+12	; 0x0c
     38c:	ed 84       	ldd	r14, Y+13	; 0x0d
     38e:	fe 84       	ldd	r15, Y+14	; 0x0e
     390:	0f 85       	ldd	r16, Y+15	; 0x0f
     392:	18 89       	ldd	r17, Y+16	; 0x10
     394:	69 80       	ldd	r6, Y+1	; 0x01
     396:	7a 80       	ldd	r7, Y+2	; 0x02
     398:	8b 80       	ldd	r8, Y+3	; 0x03
     39a:	9c 80       	ldd	r9, Y+4	; 0x04
     39c:	6d a6       	std	Y+45, r6	; 0x2d
     39e:	7e a6       	std	Y+46, r7	; 0x2e
     3a0:	8f a6       	std	Y+47, r8	; 0x2f
     3a2:	98 aa       	std	Y+48, r9	; 0x30
     3a4:	6d 80       	ldd	r6, Y+5	; 0x05
     3a6:	7e 80       	ldd	r7, Y+6	; 0x06
     3a8:	8f 80       	ldd	r8, Y+7	; 0x07
     3aa:	98 84       	ldd	r9, Y+8	; 0x08
     3ac:	e1 14       	cp	r14, r1
     3ae:	f1 04       	cpc	r15, r1
     3b0:	01 05       	cpc	r16, r1
     3b2:	11 05       	cpc	r17, r1
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <__udivdi3+0x80>
     3b6:	b3 c3       	rjmp	.+1894   	; 0xb1e <__stack+0x2bf>
     3b8:	62 14       	cp	r6, r2
     3ba:	73 04       	cpc	r7, r3
     3bc:	84 04       	cpc	r8, r4
     3be:	95 04       	cpc	r9, r5
     3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__udivdi3+0x8c>
     3c2:	3d c1       	rjmp	.+634    	; 0x63e <__udivdi3+0x306>
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	20 16       	cp	r2, r16
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	30 06       	cpc	r3, r16
     3cc:	01 e0       	ldi	r16, 0x01	; 1
     3ce:	40 06       	cpc	r4, r16
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	50 06       	cpc	r5, r16
     3d4:	88 f4       	brcc	.+34     	; 0x3f8 <__udivdi3+0xc0>
     3d6:	1f ef       	ldi	r17, 0xFF	; 255
     3d8:	21 16       	cp	r2, r17
     3da:	31 04       	cpc	r3, r1
     3dc:	41 04       	cpc	r4, r1
     3de:	51 04       	cpc	r5, r1
     3e0:	39 f0       	breq	.+14     	; 0x3f0 <__udivdi3+0xb8>
     3e2:	30 f0       	brcs	.+12     	; 0x3f0 <__udivdi3+0xb8>
     3e4:	48 e0       	ldi	r20, 0x08	; 8
     3e6:	e4 2e       	mov	r14, r20
     3e8:	f1 2c       	mov	r15, r1
     3ea:	01 2d       	mov	r16, r1
     3ec:	11 2d       	mov	r17, r1
     3ee:	18 c0       	rjmp	.+48     	; 0x420 <__udivdi3+0xe8>
     3f0:	ee 24       	eor	r14, r14
     3f2:	ff 24       	eor	r15, r15
     3f4:	87 01       	movw	r16, r14
     3f6:	14 c0       	rjmp	.+40     	; 0x420 <__udivdi3+0xe8>
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	22 16       	cp	r2, r18
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	32 06       	cpc	r3, r18
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	42 06       	cpc	r4, r18
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	52 06       	cpc	r5, r18
     408:	30 f0       	brcs	.+12     	; 0x416 <__udivdi3+0xde>
     40a:	38 e1       	ldi	r19, 0x18	; 24
     40c:	e3 2e       	mov	r14, r19
     40e:	f1 2c       	mov	r15, r1
     410:	01 2d       	mov	r16, r1
     412:	11 2d       	mov	r17, r1
     414:	05 c0       	rjmp	.+10     	; 0x420 <__udivdi3+0xe8>
     416:	20 e1       	ldi	r18, 0x10	; 16
     418:	e2 2e       	mov	r14, r18
     41a:	f1 2c       	mov	r15, r1
     41c:	01 2d       	mov	r16, r1
     41e:	11 2d       	mov	r17, r1
     420:	d2 01       	movw	r26, r4
     422:	c1 01       	movw	r24, r2
     424:	0e 2c       	mov	r0, r14
     426:	04 c0       	rjmp	.+8      	; 0x430 <__udivdi3+0xf8>
     428:	b6 95       	lsr	r27
     42a:	a7 95       	ror	r26
     42c:	97 95       	ror	r25
     42e:	87 95       	ror	r24
     430:	0a 94       	dec	r0
     432:	d2 f7       	brpl	.-12     	; 0x428 <__udivdi3+0xf0>
     434:	82 56       	subi	r24, 0x62	; 98
     436:	9f 4f       	sbci	r25, 0xFF	; 255
     438:	dc 01       	movw	r26, r24
     43a:	2c 91       	ld	r18, X
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	8e 19       	sub	r24, r14
     446:	9f 09       	sbc	r25, r15
     448:	a0 0b       	sbc	r26, r16
     44a:	b1 0b       	sbc	r27, r17
     44c:	7c 01       	movw	r14, r24
     44e:	8d 01       	movw	r16, r26
     450:	e2 1a       	sub	r14, r18
     452:	f1 08       	sbc	r15, r1
     454:	01 09       	sbc	r16, r1
     456:	11 09       	sbc	r17, r1
     458:	e1 14       	cp	r14, r1
     45a:	f1 04       	cpc	r15, r1
     45c:	01 05       	cpc	r16, r1
     45e:	11 05       	cpc	r17, r1
     460:	a1 f1       	breq	.+104    	; 0x4ca <__udivdi3+0x192>
     462:	0e 2c       	mov	r0, r14
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x136>
     466:	22 0c       	add	r2, r2
     468:	33 1c       	adc	r3, r3
     46a:	44 1c       	adc	r4, r4
     46c:	55 1c       	adc	r5, r5
     46e:	0a 94       	dec	r0
     470:	d2 f7       	brpl	.-12     	; 0x466 <__udivdi3+0x12e>
     472:	a4 01       	movw	r20, r8
     474:	93 01       	movw	r18, r6
     476:	0e 2c       	mov	r0, r14
     478:	04 c0       	rjmp	.+8      	; 0x482 <__udivdi3+0x14a>
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	44 1f       	adc	r20, r20
     480:	55 1f       	adc	r21, r21
     482:	0a 94       	dec	r0
     484:	d2 f7       	brpl	.-12     	; 0x47a <__udivdi3+0x142>
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	8e 19       	sub	r24, r14
     48c:	9f 09       	sbc	r25, r15
     48e:	6d a4       	ldd	r6, Y+45	; 0x2d
     490:	7e a4       	ldd	r7, Y+46	; 0x2e
     492:	8f a4       	ldd	r8, Y+47	; 0x2f
     494:	98 a8       	ldd	r9, Y+48	; 0x30
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__udivdi3+0x168>
     498:	96 94       	lsr	r9
     49a:	87 94       	ror	r8
     49c:	77 94       	ror	r7
     49e:	67 94       	ror	r6
     4a0:	8a 95       	dec	r24
     4a2:	d2 f7       	brpl	.-12     	; 0x498 <__udivdi3+0x160>
     4a4:	62 2a       	or	r6, r18
     4a6:	73 2a       	or	r7, r19
     4a8:	84 2a       	or	r8, r20
     4aa:	95 2a       	or	r9, r21
     4ac:	ad a4       	ldd	r10, Y+45	; 0x2d
     4ae:	be a4       	ldd	r11, Y+46	; 0x2e
     4b0:	cf a4       	ldd	r12, Y+47	; 0x2f
     4b2:	d8 a8       	ldd	r13, Y+48	; 0x30
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <__udivdi3+0x186>
     4b6:	aa 0c       	add	r10, r10
     4b8:	bb 1c       	adc	r11, r11
     4ba:	cc 1c       	adc	r12, r12
     4bc:	dd 1c       	adc	r13, r13
     4be:	ea 94       	dec	r14
     4c0:	d2 f7       	brpl	.-12     	; 0x4b6 <__udivdi3+0x17e>
     4c2:	ad a6       	std	Y+45, r10	; 0x2d
     4c4:	be a6       	std	Y+46, r11	; 0x2e
     4c6:	cf a6       	std	Y+47, r12	; 0x2f
     4c8:	d8 aa       	std	Y+48, r13	; 0x30
     4ca:	62 01       	movw	r12, r4
     4cc:	ee 24       	eor	r14, r14
     4ce:	ff 24       	eor	r15, r15
     4d0:	cd aa       	std	Y+53, r12	; 0x35
     4d2:	de aa       	std	Y+54, r13	; 0x36
     4d4:	ef aa       	std	Y+55, r14	; 0x37
     4d6:	f8 ae       	std	Y+56, r15	; 0x38
     4d8:	92 01       	movw	r18, r4
     4da:	81 01       	movw	r16, r2
     4dc:	20 70       	andi	r18, 0x00	; 0
     4de:	30 70       	andi	r19, 0x00	; 0
     4e0:	09 af       	std	Y+57, r16	; 0x39
     4e2:	1a af       	std	Y+58, r17	; 0x3a
     4e4:	2b af       	std	Y+59, r18	; 0x3b
     4e6:	3c af       	std	Y+60, r19	; 0x3c
     4e8:	c4 01       	movw	r24, r8
     4ea:	b3 01       	movw	r22, r6
     4ec:	a7 01       	movw	r20, r14
     4ee:	96 01       	movw	r18, r12
     4f0:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     4f4:	7b 01       	movw	r14, r22
     4f6:	8c 01       	movw	r16, r24
     4f8:	c4 01       	movw	r24, r8
     4fa:	b3 01       	movw	r22, r6
     4fc:	2d a9       	ldd	r18, Y+53	; 0x35
     4fe:	3e a9       	ldd	r19, Y+54	; 0x36
     500:	4f a9       	ldd	r20, Y+55	; 0x37
     502:	58 ad       	ldd	r21, Y+56	; 0x38
     504:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     508:	c9 01       	movw	r24, r18
     50a:	da 01       	movw	r26, r20
     50c:	3c 01       	movw	r6, r24
     50e:	4d 01       	movw	r8, r26
     510:	c4 01       	movw	r24, r8
     512:	b3 01       	movw	r22, r6
     514:	29 ad       	ldd	r18, Y+57	; 0x39
     516:	3a ad       	ldd	r19, Y+58	; 0x3a
     518:	4b ad       	ldd	r20, Y+59	; 0x3b
     51a:	5c ad       	ldd	r21, Y+60	; 0x3c
     51c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     520:	9b 01       	movw	r18, r22
     522:	ac 01       	movw	r20, r24
     524:	87 01       	movw	r16, r14
     526:	ff 24       	eor	r15, r15
     528:	ee 24       	eor	r14, r14
     52a:	ad a4       	ldd	r10, Y+45	; 0x2d
     52c:	be a4       	ldd	r11, Y+46	; 0x2e
     52e:	cf a4       	ldd	r12, Y+47	; 0x2f
     530:	d8 a8       	ldd	r13, Y+48	; 0x30
     532:	c6 01       	movw	r24, r12
     534:	aa 27       	eor	r26, r26
     536:	bb 27       	eor	r27, r27
     538:	57 01       	movw	r10, r14
     53a:	68 01       	movw	r12, r16
     53c:	a8 2a       	or	r10, r24
     53e:	b9 2a       	or	r11, r25
     540:	ca 2a       	or	r12, r26
     542:	db 2a       	or	r13, r27
     544:	a2 16       	cp	r10, r18
     546:	b3 06       	cpc	r11, r19
     548:	c4 06       	cpc	r12, r20
     54a:	d5 06       	cpc	r13, r21
     54c:	e0 f4       	brcc	.+56     	; 0x586 <__udivdi3+0x24e>
     54e:	08 94       	sec
     550:	61 08       	sbc	r6, r1
     552:	71 08       	sbc	r7, r1
     554:	81 08       	sbc	r8, r1
     556:	91 08       	sbc	r9, r1
     558:	a2 0c       	add	r10, r2
     55a:	b3 1c       	adc	r11, r3
     55c:	c4 1c       	adc	r12, r4
     55e:	d5 1c       	adc	r13, r5
     560:	a2 14       	cp	r10, r2
     562:	b3 04       	cpc	r11, r3
     564:	c4 04       	cpc	r12, r4
     566:	d5 04       	cpc	r13, r5
     568:	70 f0       	brcs	.+28     	; 0x586 <__udivdi3+0x24e>
     56a:	a2 16       	cp	r10, r18
     56c:	b3 06       	cpc	r11, r19
     56e:	c4 06       	cpc	r12, r20
     570:	d5 06       	cpc	r13, r21
     572:	48 f4       	brcc	.+18     	; 0x586 <__udivdi3+0x24e>
     574:	08 94       	sec
     576:	61 08       	sbc	r6, r1
     578:	71 08       	sbc	r7, r1
     57a:	81 08       	sbc	r8, r1
     57c:	91 08       	sbc	r9, r1
     57e:	a2 0c       	add	r10, r2
     580:	b3 1c       	adc	r11, r3
     582:	c4 1c       	adc	r12, r4
     584:	d5 1c       	adc	r13, r5
     586:	a2 1a       	sub	r10, r18
     588:	b3 0a       	sbc	r11, r19
     58a:	c4 0a       	sbc	r12, r20
     58c:	d5 0a       	sbc	r13, r21
     58e:	c6 01       	movw	r24, r12
     590:	b5 01       	movw	r22, r10
     592:	2d a9       	ldd	r18, Y+53	; 0x35
     594:	3e a9       	ldd	r19, Y+54	; 0x36
     596:	4f a9       	ldd	r20, Y+55	; 0x37
     598:	58 ad       	ldd	r21, Y+56	; 0x38
     59a:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     59e:	7b 01       	movw	r14, r22
     5a0:	8c 01       	movw	r16, r24
     5a2:	c6 01       	movw	r24, r12
     5a4:	b5 01       	movw	r22, r10
     5a6:	2d a9       	ldd	r18, Y+53	; 0x35
     5a8:	3e a9       	ldd	r19, Y+54	; 0x36
     5aa:	4f a9       	ldd	r20, Y+55	; 0x37
     5ac:	58 ad       	ldd	r21, Y+56	; 0x38
     5ae:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     5b2:	c9 01       	movw	r24, r18
     5b4:	da 01       	movw	r26, r20
     5b6:	5c 01       	movw	r10, r24
     5b8:	6d 01       	movw	r12, r26
     5ba:	c6 01       	movw	r24, r12
     5bc:	b5 01       	movw	r22, r10
     5be:	29 ad       	ldd	r18, Y+57	; 0x39
     5c0:	3a ad       	ldd	r19, Y+58	; 0x3a
     5c2:	4b ad       	ldd	r20, Y+59	; 0x3b
     5c4:	5c ad       	ldd	r21, Y+60	; 0x3c
     5c6:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     5ca:	9b 01       	movw	r18, r22
     5cc:	ac 01       	movw	r20, r24
     5ce:	87 01       	movw	r16, r14
     5d0:	ff 24       	eor	r15, r15
     5d2:	ee 24       	eor	r14, r14
     5d4:	8d a5       	ldd	r24, Y+45	; 0x2d
     5d6:	9e a5       	ldd	r25, Y+46	; 0x2e
     5d8:	af a5       	ldd	r26, Y+47	; 0x2f
     5da:	b8 a9       	ldd	r27, Y+48	; 0x30
     5dc:	a0 70       	andi	r26, 0x00	; 0
     5de:	b0 70       	andi	r27, 0x00	; 0
     5e0:	e8 2a       	or	r14, r24
     5e2:	f9 2a       	or	r15, r25
     5e4:	0a 2b       	or	r16, r26
     5e6:	1b 2b       	or	r17, r27
     5e8:	e2 16       	cp	r14, r18
     5ea:	f3 06       	cpc	r15, r19
     5ec:	04 07       	cpc	r16, r20
     5ee:	15 07       	cpc	r17, r21
     5f0:	c0 f4       	brcc	.+48     	; 0x622 <__udivdi3+0x2ea>
     5f2:	08 94       	sec
     5f4:	a1 08       	sbc	r10, r1
     5f6:	b1 08       	sbc	r11, r1
     5f8:	c1 08       	sbc	r12, r1
     5fa:	d1 08       	sbc	r13, r1
     5fc:	e2 0c       	add	r14, r2
     5fe:	f3 1c       	adc	r15, r3
     600:	04 1d       	adc	r16, r4
     602:	15 1d       	adc	r17, r5
     604:	e2 14       	cp	r14, r2
     606:	f3 04       	cpc	r15, r3
     608:	04 05       	cpc	r16, r4
     60a:	15 05       	cpc	r17, r5
     60c:	50 f0       	brcs	.+20     	; 0x622 <__udivdi3+0x2ea>
     60e:	e2 16       	cp	r14, r18
     610:	f3 06       	cpc	r15, r19
     612:	04 07       	cpc	r16, r20
     614:	15 07       	cpc	r17, r21
     616:	28 f4       	brcc	.+10     	; 0x622 <__udivdi3+0x2ea>
     618:	08 94       	sec
     61a:	a1 08       	sbc	r10, r1
     61c:	b1 08       	sbc	r11, r1
     61e:	c1 08       	sbc	r12, r1
     620:	d1 08       	sbc	r13, r1
     622:	d3 01       	movw	r26, r6
     624:	99 27       	eor	r25, r25
     626:	88 27       	eor	r24, r24
     628:	86 01       	movw	r16, r12
     62a:	75 01       	movw	r14, r10
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	e9 aa       	std	Y+49, r14	; 0x31
     636:	fa aa       	std	Y+50, r15	; 0x32
     638:	0b ab       	std	Y+51, r16	; 0x33
     63a:	1c ab       	std	Y+52, r17	; 0x34
     63c:	cf c4       	rjmp	.+2462   	; 0xfdc <__stack+0x77d>
     63e:	21 14       	cp	r2, r1
     640:	31 04       	cpc	r3, r1
     642:	41 04       	cpc	r4, r1
     644:	51 04       	cpc	r5, r1
     646:	71 f4       	brne	.+28     	; 0x664 <__udivdi3+0x32c>
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     65c:	c9 01       	movw	r24, r18
     65e:	da 01       	movw	r26, r20
     660:	1c 01       	movw	r2, r24
     662:	2d 01       	movw	r4, r26
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	20 16       	cp	r2, r16
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	30 06       	cpc	r3, r16
     66c:	01 e0       	ldi	r16, 0x01	; 1
     66e:	40 06       	cpc	r4, r16
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	50 06       	cpc	r5, r16
     674:	88 f4       	brcc	.+34     	; 0x698 <__udivdi3+0x360>
     676:	1f ef       	ldi	r17, 0xFF	; 255
     678:	21 16       	cp	r2, r17
     67a:	31 04       	cpc	r3, r1
     67c:	41 04       	cpc	r4, r1
     67e:	51 04       	cpc	r5, r1
     680:	31 f0       	breq	.+12     	; 0x68e <__udivdi3+0x356>
     682:	28 f0       	brcs	.+10     	; 0x68e <__udivdi3+0x356>
     684:	48 e0       	ldi	r20, 0x08	; 8
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	17 c0       	rjmp	.+46     	; 0x6bc <__udivdi3+0x384>
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	12 c0       	rjmp	.+36     	; 0x6bc <__udivdi3+0x384>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	22 16       	cp	r2, r18
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	32 06       	cpc	r3, r18
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	42 06       	cpc	r4, r18
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	52 06       	cpc	r5, r18
     6a8:	28 f0       	brcs	.+10     	; 0x6b4 <__udivdi3+0x37c>
     6aa:	48 e1       	ldi	r20, 0x18	; 24
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <__udivdi3+0x384>
     6b4:	40 e1       	ldi	r20, 0x10	; 16
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	d2 01       	movw	r26, r4
     6be:	c1 01       	movw	r24, r2
     6c0:	04 2e       	mov	r0, r20
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__udivdi3+0x394>
     6c4:	b6 95       	lsr	r27
     6c6:	a7 95       	ror	r26
     6c8:	97 95       	ror	r25
     6ca:	87 95       	ror	r24
     6cc:	0a 94       	dec	r0
     6ce:	d2 f7       	brpl	.-12     	; 0x6c4 <__udivdi3+0x38c>
     6d0:	82 56       	subi	r24, 0x62	; 98
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	dc 01       	movw	r26, r24
     6d6:	2c 91       	ld	r18, X
     6d8:	e0 e2       	ldi	r30, 0x20	; 32
     6da:	ee 2e       	mov	r14, r30
     6dc:	f1 2c       	mov	r15, r1
     6de:	01 2d       	mov	r16, r1
     6e0:	11 2d       	mov	r17, r1
     6e2:	d8 01       	movw	r26, r16
     6e4:	c7 01       	movw	r24, r14
     6e6:	84 1b       	sub	r24, r20
     6e8:	95 0b       	sbc	r25, r21
     6ea:	a6 0b       	sbc	r26, r22
     6ec:	b7 0b       	sbc	r27, r23
     6ee:	82 1b       	sub	r24, r18
     6f0:	91 09       	sbc	r25, r1
     6f2:	a1 09       	sbc	r26, r1
     6f4:	b1 09       	sbc	r27, r1
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	61 f4       	brne	.+24     	; 0x716 <__udivdi3+0x3de>
     6fe:	64 01       	movw	r12, r8
     700:	53 01       	movw	r10, r6
     702:	a2 18       	sub	r10, r2
     704:	b3 08       	sbc	r11, r3
     706:	c4 08       	sbc	r12, r4
     708:	d5 08       	sbc	r13, r5
     70a:	31 e0       	ldi	r19, 0x01	; 1
     70c:	63 2e       	mov	r6, r19
     70e:	71 2c       	mov	r7, r1
     710:	81 2c       	mov	r8, r1
     712:	91 2c       	mov	r9, r1
     714:	1e c1       	rjmp	.+572    	; 0x952 <__stack+0xf3>
     716:	6f 96       	adiw	r28, 0x1f	; 31
     718:	8f af       	std	Y+63, r24	; 0x3f
     71a:	6f 97       	sbiw	r28, 0x1f	; 31
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__udivdi3+0x3f0>
     720:	22 0c       	add	r2, r2
     722:	33 1c       	adc	r3, r3
     724:	44 1c       	adc	r4, r4
     726:	55 1c       	adc	r5, r5
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__udivdi3+0x3e8>
     72c:	ee 2d       	mov	r30, r14
     72e:	e8 1b       	sub	r30, r24
     730:	64 01       	movw	r12, r8
     732:	53 01       	movw	r10, r6
     734:	0e 2e       	mov	r0, r30
     736:	04 c0       	rjmp	.+8      	; 0x740 <__udivdi3+0x408>
     738:	d6 94       	lsr	r13
     73a:	c7 94       	ror	r12
     73c:	b7 94       	ror	r11
     73e:	a7 94       	ror	r10
     740:	0a 94       	dec	r0
     742:	d2 f7       	brpl	.-12     	; 0x738 <__udivdi3+0x400>
     744:	a4 01       	movw	r20, r8
     746:	93 01       	movw	r18, r6
     748:	6f 96       	adiw	r28, 0x1f	; 31
     74a:	0f ac       	ldd	r0, Y+63	; 0x3f
     74c:	6f 97       	sbiw	r28, 0x1f	; 31
     74e:	04 c0       	rjmp	.+8      	; 0x758 <__udivdi3+0x420>
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	44 1f       	adc	r20, r20
     756:	55 1f       	adc	r21, r21
     758:	0a 94       	dec	r0
     75a:	d2 f7       	brpl	.-12     	; 0x750 <__udivdi3+0x418>
     75c:	6d a4       	ldd	r6, Y+45	; 0x2d
     75e:	7e a4       	ldd	r7, Y+46	; 0x2e
     760:	8f a4       	ldd	r8, Y+47	; 0x2f
     762:	98 a8       	ldd	r9, Y+48	; 0x30
     764:	0e 2e       	mov	r0, r30
     766:	04 c0       	rjmp	.+8      	; 0x770 <__udivdi3+0x438>
     768:	96 94       	lsr	r9
     76a:	87 94       	ror	r8
     76c:	77 94       	ror	r7
     76e:	67 94       	ror	r6
     770:	0a 94       	dec	r0
     772:	d2 f7       	brpl	.-12     	; 0x768 <__udivdi3+0x430>
     774:	84 01       	movw	r16, r8
     776:	73 01       	movw	r14, r6
     778:	e2 2a       	or	r14, r18
     77a:	f3 2a       	or	r15, r19
     77c:	04 2b       	or	r16, r20
     77e:	15 2b       	or	r17, r21
     780:	e9 a6       	std	Y+41, r14	; 0x29
     782:	fa a6       	std	Y+42, r15	; 0x2a
     784:	0b a7       	std	Y+43, r16	; 0x2b
     786:	1c a7       	std	Y+44, r17	; 0x2c
     788:	32 01       	movw	r6, r4
     78a:	88 24       	eor	r8, r8
     78c:	99 24       	eor	r9, r9
     78e:	92 01       	movw	r18, r4
     790:	81 01       	movw	r16, r2
     792:	20 70       	andi	r18, 0x00	; 0
     794:	30 70       	andi	r19, 0x00	; 0
     796:	21 96       	adiw	r28, 0x01	; 1
     798:	0c af       	std	Y+60, r16	; 0x3c
     79a:	1d af       	std	Y+61, r17	; 0x3d
     79c:	2e af       	std	Y+62, r18	; 0x3e
     79e:	3f af       	std	Y+63, r19	; 0x3f
     7a0:	21 97       	sbiw	r28, 0x01	; 1
     7a2:	c6 01       	movw	r24, r12
     7a4:	b5 01       	movw	r22, r10
     7a6:	a4 01       	movw	r20, r8
     7a8:	93 01       	movw	r18, r6
     7aa:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     7ae:	7b 01       	movw	r14, r22
     7b0:	8c 01       	movw	r16, r24
     7b2:	c6 01       	movw	r24, r12
     7b4:	b5 01       	movw	r22, r10
     7b6:	a4 01       	movw	r20, r8
     7b8:	93 01       	movw	r18, r6
     7ba:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     7be:	c9 01       	movw	r24, r18
     7c0:	da 01       	movw	r26, r20
     7c2:	25 96       	adiw	r28, 0x05	; 5
     7c4:	8c af       	std	Y+60, r24	; 0x3c
     7c6:	9d af       	std	Y+61, r25	; 0x3d
     7c8:	ae af       	std	Y+62, r26	; 0x3e
     7ca:	bf af       	std	Y+63, r27	; 0x3f
     7cc:	25 97       	sbiw	r28, 0x05	; 5
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	21 96       	adiw	r28, 0x01	; 1
     7d4:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d6:	3d ad       	ldd	r19, Y+61	; 0x3d
     7d8:	4e ad       	ldd	r20, Y+62	; 0x3e
     7da:	5f ad       	ldd	r21, Y+63	; 0x3f
     7dc:	21 97       	sbiw	r28, 0x01	; 1
     7de:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	87 01       	movw	r16, r14
     7e8:	ff 24       	eor	r15, r15
     7ea:	ee 24       	eor	r14, r14
     7ec:	a9 a4       	ldd	r10, Y+41	; 0x29
     7ee:	ba a4       	ldd	r11, Y+42	; 0x2a
     7f0:	cb a4       	ldd	r12, Y+43	; 0x2b
     7f2:	dc a4       	ldd	r13, Y+44	; 0x2c
     7f4:	c6 01       	movw	r24, r12
     7f6:	aa 27       	eor	r26, r26
     7f8:	bb 27       	eor	r27, r27
     7fa:	5c 01       	movw	r10, r24
     7fc:	6d 01       	movw	r12, r26
     7fe:	ae 28       	or	r10, r14
     800:	bf 28       	or	r11, r15
     802:	c0 2a       	or	r12, r16
     804:	d1 2a       	or	r13, r17
     806:	a2 16       	cp	r10, r18
     808:	b3 06       	cpc	r11, r19
     80a:	c4 06       	cpc	r12, r20
     80c:	d5 06       	cpc	r13, r21
     80e:	60 f5       	brcc	.+88     	; 0x868 <__stack+0x9>
     810:	25 96       	adiw	r28, 0x05	; 5
     812:	6c ad       	ldd	r22, Y+60	; 0x3c
     814:	7d ad       	ldd	r23, Y+61	; 0x3d
     816:	8e ad       	ldd	r24, Y+62	; 0x3e
     818:	9f ad       	ldd	r25, Y+63	; 0x3f
     81a:	25 97       	sbiw	r28, 0x05	; 5
     81c:	61 50       	subi	r22, 0x01	; 1
     81e:	70 40       	sbci	r23, 0x00	; 0
     820:	80 40       	sbci	r24, 0x00	; 0
     822:	90 40       	sbci	r25, 0x00	; 0
     824:	25 96       	adiw	r28, 0x05	; 5
     826:	6c af       	std	Y+60, r22	; 0x3c
     828:	7d af       	std	Y+61, r23	; 0x3d
     82a:	8e af       	std	Y+62, r24	; 0x3e
     82c:	9f af       	std	Y+63, r25	; 0x3f
     82e:	25 97       	sbiw	r28, 0x05	; 5
     830:	a2 0c       	add	r10, r2
     832:	b3 1c       	adc	r11, r3
     834:	c4 1c       	adc	r12, r4
     836:	d5 1c       	adc	r13, r5
     838:	a2 14       	cp	r10, r2
     83a:	b3 04       	cpc	r11, r3
     83c:	c4 04       	cpc	r12, r4
     83e:	d5 04       	cpc	r13, r5
     840:	98 f0       	brcs	.+38     	; 0x868 <__stack+0x9>
     842:	a2 16       	cp	r10, r18
     844:	b3 06       	cpc	r11, r19
     846:	c4 06       	cpc	r12, r20
     848:	d5 06       	cpc	r13, r21
     84a:	70 f4       	brcc	.+28     	; 0x868 <__stack+0x9>
     84c:	61 50       	subi	r22, 0x01	; 1
     84e:	70 40       	sbci	r23, 0x00	; 0
     850:	80 40       	sbci	r24, 0x00	; 0
     852:	90 40       	sbci	r25, 0x00	; 0
     854:	25 96       	adiw	r28, 0x05	; 5
     856:	6c af       	std	Y+60, r22	; 0x3c
     858:	7d af       	std	Y+61, r23	; 0x3d
     85a:	8e af       	std	Y+62, r24	; 0x3e
     85c:	9f af       	std	Y+63, r25	; 0x3f
     85e:	25 97       	sbiw	r28, 0x05	; 5
     860:	a2 0c       	add	r10, r2
     862:	b3 1c       	adc	r11, r3
     864:	c4 1c       	adc	r12, r4
     866:	d5 1c       	adc	r13, r5
     868:	a2 1a       	sub	r10, r18
     86a:	b3 0a       	sbc	r11, r19
     86c:	c4 0a       	sbc	r12, r20
     86e:	d5 0a       	sbc	r13, r21
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a4 01       	movw	r20, r8
     876:	93 01       	movw	r18, r6
     878:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     87c:	7b 01       	movw	r14, r22
     87e:	8c 01       	movw	r16, r24
     880:	c6 01       	movw	r24, r12
     882:	b5 01       	movw	r22, r10
     884:	a4 01       	movw	r20, r8
     886:	93 01       	movw	r18, r6
     888:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     88c:	c9 01       	movw	r24, r18
     88e:	da 01       	movw	r26, r20
     890:	3c 01       	movw	r6, r24
     892:	4d 01       	movw	r8, r26
     894:	c4 01       	movw	r24, r8
     896:	b3 01       	movw	r22, r6
     898:	21 96       	adiw	r28, 0x01	; 1
     89a:	2c ad       	ldd	r18, Y+60	; 0x3c
     89c:	3d ad       	ldd	r19, Y+61	; 0x3d
     89e:	4e ad       	ldd	r20, Y+62	; 0x3e
     8a0:	5f ad       	ldd	r21, Y+63	; 0x3f
     8a2:	21 97       	sbiw	r28, 0x01	; 1
     8a4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	87 01       	movw	r16, r14
     8ae:	ff 24       	eor	r15, r15
     8b0:	ee 24       	eor	r14, r14
     8b2:	89 a5       	ldd	r24, Y+41	; 0x29
     8b4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b6:	ab a5       	ldd	r26, Y+43	; 0x2b
     8b8:	bc a5       	ldd	r27, Y+44	; 0x2c
     8ba:	a0 70       	andi	r26, 0x00	; 0
     8bc:	b0 70       	andi	r27, 0x00	; 0
     8be:	57 01       	movw	r10, r14
     8c0:	68 01       	movw	r12, r16
     8c2:	a8 2a       	or	r10, r24
     8c4:	b9 2a       	or	r11, r25
     8c6:	ca 2a       	or	r12, r26
     8c8:	db 2a       	or	r13, r27
     8ca:	a2 16       	cp	r10, r18
     8cc:	b3 06       	cpc	r11, r19
     8ce:	c4 06       	cpc	r12, r20
     8d0:	d5 06       	cpc	r13, r21
     8d2:	e0 f4       	brcc	.+56     	; 0x90c <__stack+0xad>
     8d4:	08 94       	sec
     8d6:	61 08       	sbc	r6, r1
     8d8:	71 08       	sbc	r7, r1
     8da:	81 08       	sbc	r8, r1
     8dc:	91 08       	sbc	r9, r1
     8de:	a2 0c       	add	r10, r2
     8e0:	b3 1c       	adc	r11, r3
     8e2:	c4 1c       	adc	r12, r4
     8e4:	d5 1c       	adc	r13, r5
     8e6:	a2 14       	cp	r10, r2
     8e8:	b3 04       	cpc	r11, r3
     8ea:	c4 04       	cpc	r12, r4
     8ec:	d5 04       	cpc	r13, r5
     8ee:	70 f0       	brcs	.+28     	; 0x90c <__stack+0xad>
     8f0:	a2 16       	cp	r10, r18
     8f2:	b3 06       	cpc	r11, r19
     8f4:	c4 06       	cpc	r12, r20
     8f6:	d5 06       	cpc	r13, r21
     8f8:	48 f4       	brcc	.+18     	; 0x90c <__stack+0xad>
     8fa:	08 94       	sec
     8fc:	61 08       	sbc	r6, r1
     8fe:	71 08       	sbc	r7, r1
     900:	81 08       	sbc	r8, r1
     902:	91 08       	sbc	r9, r1
     904:	a2 0c       	add	r10, r2
     906:	b3 1c       	adc	r11, r3
     908:	c4 1c       	adc	r12, r4
     90a:	d5 1c       	adc	r13, r5
     90c:	8d a5       	ldd	r24, Y+45	; 0x2d
     90e:	9e a5       	ldd	r25, Y+46	; 0x2e
     910:	af a5       	ldd	r26, Y+47	; 0x2f
     912:	b8 a9       	ldd	r27, Y+48	; 0x30
     914:	6f 96       	adiw	r28, 0x1f	; 31
     916:	0f ac       	ldd	r0, Y+63	; 0x3f
     918:	6f 97       	sbiw	r28, 0x1f	; 31
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	aa 1f       	adc	r26, r26
     922:	bb 1f       	adc	r27, r27
     924:	0a 94       	dec	r0
     926:	d2 f7       	brpl	.-12     	; 0x91c <__stack+0xbd>
     928:	8d a7       	std	Y+45, r24	; 0x2d
     92a:	9e a7       	std	Y+46, r25	; 0x2e
     92c:	af a7       	std	Y+47, r26	; 0x2f
     92e:	b8 ab       	std	Y+48, r27	; 0x30
     930:	a2 1a       	sub	r10, r18
     932:	b3 0a       	sbc	r11, r19
     934:	c4 0a       	sbc	r12, r20
     936:	d5 0a       	sbc	r13, r21
     938:	25 96       	adiw	r28, 0x05	; 5
     93a:	ec ac       	ldd	r14, Y+60	; 0x3c
     93c:	fd ac       	ldd	r15, Y+61	; 0x3d
     93e:	0e ad       	ldd	r16, Y+62	; 0x3e
     940:	1f ad       	ldd	r17, Y+63	; 0x3f
     942:	25 97       	sbiw	r28, 0x05	; 5
     944:	d7 01       	movw	r26, r14
     946:	99 27       	eor	r25, r25
     948:	88 27       	eor	r24, r24
     94a:	68 2a       	or	r6, r24
     94c:	79 2a       	or	r7, r25
     94e:	8a 2a       	or	r8, r26
     950:	9b 2a       	or	r9, r27
     952:	82 01       	movw	r16, r4
     954:	22 27       	eor	r18, r18
     956:	33 27       	eor	r19, r19
     958:	29 96       	adiw	r28, 0x09	; 9
     95a:	0c af       	std	Y+60, r16	; 0x3c
     95c:	1d af       	std	Y+61, r17	; 0x3d
     95e:	2e af       	std	Y+62, r18	; 0x3e
     960:	3f af       	std	Y+63, r19	; 0x3f
     962:	29 97       	sbiw	r28, 0x09	; 9
     964:	a2 01       	movw	r20, r4
     966:	91 01       	movw	r18, r2
     968:	40 70       	andi	r20, 0x00	; 0
     96a:	50 70       	andi	r21, 0x00	; 0
     96c:	2d 96       	adiw	r28, 0x0d	; 13
     96e:	2c af       	std	Y+60, r18	; 0x3c
     970:	3d af       	std	Y+61, r19	; 0x3d
     972:	4e af       	std	Y+62, r20	; 0x3e
     974:	5f af       	std	Y+63, r21	; 0x3f
     976:	2d 97       	sbiw	r28, 0x0d	; 13
     978:	c6 01       	movw	r24, r12
     97a:	b5 01       	movw	r22, r10
     97c:	29 96       	adiw	r28, 0x09	; 9
     97e:	2c ad       	ldd	r18, Y+60	; 0x3c
     980:	3d ad       	ldd	r19, Y+61	; 0x3d
     982:	4e ad       	ldd	r20, Y+62	; 0x3e
     984:	5f ad       	ldd	r21, Y+63	; 0x3f
     986:	29 97       	sbiw	r28, 0x09	; 9
     988:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	c6 01       	movw	r24, r12
     992:	b5 01       	movw	r22, r10
     994:	29 96       	adiw	r28, 0x09	; 9
     996:	2c ad       	ldd	r18, Y+60	; 0x3c
     998:	3d ad       	ldd	r19, Y+61	; 0x3d
     99a:	4e ad       	ldd	r20, Y+62	; 0x3e
     99c:	5f ad       	ldd	r21, Y+63	; 0x3f
     99e:	29 97       	sbiw	r28, 0x09	; 9
     9a0:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     9a4:	c9 01       	movw	r24, r18
     9a6:	da 01       	movw	r26, r20
     9a8:	61 96       	adiw	r28, 0x11	; 17
     9aa:	8c af       	std	Y+60, r24	; 0x3c
     9ac:	9d af       	std	Y+61, r25	; 0x3d
     9ae:	ae af       	std	Y+62, r26	; 0x3e
     9b0:	bf af       	std	Y+63, r27	; 0x3f
     9b2:	61 97       	sbiw	r28, 0x11	; 17
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	2d 96       	adiw	r28, 0x0d	; 13
     9ba:	2c ad       	ldd	r18, Y+60	; 0x3c
     9bc:	3d ad       	ldd	r19, Y+61	; 0x3d
     9be:	4e ad       	ldd	r20, Y+62	; 0x3e
     9c0:	5f ad       	ldd	r21, Y+63	; 0x3f
     9c2:	2d 97       	sbiw	r28, 0x0d	; 13
     9c4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	87 01       	movw	r16, r14
     9ce:	ff 24       	eor	r15, r15
     9d0:	ee 24       	eor	r14, r14
     9d2:	ad a4       	ldd	r10, Y+45	; 0x2d
     9d4:	be a4       	ldd	r11, Y+46	; 0x2e
     9d6:	cf a4       	ldd	r12, Y+47	; 0x2f
     9d8:	d8 a8       	ldd	r13, Y+48	; 0x30
     9da:	c6 01       	movw	r24, r12
     9dc:	aa 27       	eor	r26, r26
     9de:	bb 27       	eor	r27, r27
     9e0:	57 01       	movw	r10, r14
     9e2:	68 01       	movw	r12, r16
     9e4:	a8 2a       	or	r10, r24
     9e6:	b9 2a       	or	r11, r25
     9e8:	ca 2a       	or	r12, r26
     9ea:	db 2a       	or	r13, r27
     9ec:	a2 16       	cp	r10, r18
     9ee:	b3 06       	cpc	r11, r19
     9f0:	c4 06       	cpc	r12, r20
     9f2:	d5 06       	cpc	r13, r21
     9f4:	60 f5       	brcc	.+88     	; 0xa4e <__stack+0x1ef>
     9f6:	61 96       	adiw	r28, 0x11	; 17
     9f8:	6c ad       	ldd	r22, Y+60	; 0x3c
     9fa:	7d ad       	ldd	r23, Y+61	; 0x3d
     9fc:	8e ad       	ldd	r24, Y+62	; 0x3e
     9fe:	9f ad       	ldd	r25, Y+63	; 0x3f
     a00:	61 97       	sbiw	r28, 0x11	; 17
     a02:	61 50       	subi	r22, 0x01	; 1
     a04:	70 40       	sbci	r23, 0x00	; 0
     a06:	80 40       	sbci	r24, 0x00	; 0
     a08:	90 40       	sbci	r25, 0x00	; 0
     a0a:	61 96       	adiw	r28, 0x11	; 17
     a0c:	6c af       	std	Y+60, r22	; 0x3c
     a0e:	7d af       	std	Y+61, r23	; 0x3d
     a10:	8e af       	std	Y+62, r24	; 0x3e
     a12:	9f af       	std	Y+63, r25	; 0x3f
     a14:	61 97       	sbiw	r28, 0x11	; 17
     a16:	a2 0c       	add	r10, r2
     a18:	b3 1c       	adc	r11, r3
     a1a:	c4 1c       	adc	r12, r4
     a1c:	d5 1c       	adc	r13, r5
     a1e:	a2 14       	cp	r10, r2
     a20:	b3 04       	cpc	r11, r3
     a22:	c4 04       	cpc	r12, r4
     a24:	d5 04       	cpc	r13, r5
     a26:	98 f0       	brcs	.+38     	; 0xa4e <__stack+0x1ef>
     a28:	a2 16       	cp	r10, r18
     a2a:	b3 06       	cpc	r11, r19
     a2c:	c4 06       	cpc	r12, r20
     a2e:	d5 06       	cpc	r13, r21
     a30:	70 f4       	brcc	.+28     	; 0xa4e <__stack+0x1ef>
     a32:	61 50       	subi	r22, 0x01	; 1
     a34:	70 40       	sbci	r23, 0x00	; 0
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	61 96       	adiw	r28, 0x11	; 17
     a3c:	6c af       	std	Y+60, r22	; 0x3c
     a3e:	7d af       	std	Y+61, r23	; 0x3d
     a40:	8e af       	std	Y+62, r24	; 0x3e
     a42:	9f af       	std	Y+63, r25	; 0x3f
     a44:	61 97       	sbiw	r28, 0x11	; 17
     a46:	a2 0c       	add	r10, r2
     a48:	b3 1c       	adc	r11, r3
     a4a:	c4 1c       	adc	r12, r4
     a4c:	d5 1c       	adc	r13, r5
     a4e:	a2 1a       	sub	r10, r18
     a50:	b3 0a       	sbc	r11, r19
     a52:	c4 0a       	sbc	r12, r20
     a54:	d5 0a       	sbc	r13, r21
     a56:	c6 01       	movw	r24, r12
     a58:	b5 01       	movw	r22, r10
     a5a:	29 96       	adiw	r28, 0x09	; 9
     a5c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a5e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a60:	4e ad       	ldd	r20, Y+62	; 0x3e
     a62:	5f ad       	ldd	r21, Y+63	; 0x3f
     a64:	29 97       	sbiw	r28, 0x09	; 9
     a66:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     a6a:	7b 01       	movw	r14, r22
     a6c:	8c 01       	movw	r16, r24
     a6e:	c6 01       	movw	r24, r12
     a70:	b5 01       	movw	r22, r10
     a72:	29 96       	adiw	r28, 0x09	; 9
     a74:	2c ad       	ldd	r18, Y+60	; 0x3c
     a76:	3d ad       	ldd	r19, Y+61	; 0x3d
     a78:	4e ad       	ldd	r20, Y+62	; 0x3e
     a7a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a7c:	29 97       	sbiw	r28, 0x09	; 9
     a7e:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     a82:	c9 01       	movw	r24, r18
     a84:	da 01       	movw	r26, r20
     a86:	5c 01       	movw	r10, r24
     a88:	6d 01       	movw	r12, r26
     a8a:	c6 01       	movw	r24, r12
     a8c:	b5 01       	movw	r22, r10
     a8e:	2d 96       	adiw	r28, 0x0d	; 13
     a90:	2c ad       	ldd	r18, Y+60	; 0x3c
     a92:	3d ad       	ldd	r19, Y+61	; 0x3d
     a94:	4e ad       	ldd	r20, Y+62	; 0x3e
     a96:	5f ad       	ldd	r21, Y+63	; 0x3f
     a98:	2d 97       	sbiw	r28, 0x0d	; 13
     a9a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	87 01       	movw	r16, r14
     aa4:	ff 24       	eor	r15, r15
     aa6:	ee 24       	eor	r14, r14
     aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
     aaa:	9e a5       	ldd	r25, Y+46	; 0x2e
     aac:	af a5       	ldd	r26, Y+47	; 0x2f
     aae:	b8 a9       	ldd	r27, Y+48	; 0x30
     ab0:	a0 70       	andi	r26, 0x00	; 0
     ab2:	b0 70       	andi	r27, 0x00	; 0
     ab4:	e8 2a       	or	r14, r24
     ab6:	f9 2a       	or	r15, r25
     ab8:	0a 2b       	or	r16, r26
     aba:	1b 2b       	or	r17, r27
     abc:	e2 16       	cp	r14, r18
     abe:	f3 06       	cpc	r15, r19
     ac0:	04 07       	cpc	r16, r20
     ac2:	15 07       	cpc	r17, r21
     ac4:	c0 f4       	brcc	.+48     	; 0xaf6 <__stack+0x297>
     ac6:	08 94       	sec
     ac8:	a1 08       	sbc	r10, r1
     aca:	b1 08       	sbc	r11, r1
     acc:	c1 08       	sbc	r12, r1
     ace:	d1 08       	sbc	r13, r1
     ad0:	e2 0c       	add	r14, r2
     ad2:	f3 1c       	adc	r15, r3
     ad4:	04 1d       	adc	r16, r4
     ad6:	15 1d       	adc	r17, r5
     ad8:	e2 14       	cp	r14, r2
     ada:	f3 04       	cpc	r15, r3
     adc:	04 05       	cpc	r16, r4
     ade:	15 05       	cpc	r17, r5
     ae0:	50 f0       	brcs	.+20     	; 0xaf6 <__stack+0x297>
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <__stack+0x297>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	61 96       	adiw	r28, 0x11	; 17
     af8:	ec ac       	ldd	r14, Y+60	; 0x3c
     afa:	fd ac       	ldd	r15, Y+61	; 0x3d
     afc:	0e ad       	ldd	r16, Y+62	; 0x3e
     afe:	1f ad       	ldd	r17, Y+63	; 0x3f
     b00:	61 97       	sbiw	r28, 0x11	; 17
     b02:	d7 01       	movw	r26, r14
     b04:	99 27       	eor	r25, r25
     b06:	88 27       	eor	r24, r24
     b08:	96 01       	movw	r18, r12
     b0a:	85 01       	movw	r16, r10
     b0c:	08 2b       	or	r16, r24
     b0e:	19 2b       	or	r17, r25
     b10:	2a 2b       	or	r18, r26
     b12:	3b 2b       	or	r19, r27
     b14:	09 ab       	std	Y+49, r16	; 0x31
     b16:	1a ab       	std	Y+50, r17	; 0x32
     b18:	2b ab       	std	Y+51, r18	; 0x33
     b1a:	3c ab       	std	Y+52, r19	; 0x34
     b1c:	62 c2       	rjmp	.+1220   	; 0xfe2 <__stack+0x783>
     b1e:	6e 14       	cp	r6, r14
     b20:	7f 04       	cpc	r7, r15
     b22:	80 06       	cpc	r8, r16
     b24:	91 06       	cpc	r9, r17
     b26:	08 f4       	brcc	.+2      	; 0xb2a <__stack+0x2cb>
     b28:	51 c2       	rjmp	.+1186   	; 0xfcc <__stack+0x76d>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	e2 16       	cp	r14, r18
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	f2 06       	cpc	r15, r18
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	02 07       	cpc	r16, r18
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	12 07       	cpc	r17, r18
     b3a:	88 f4       	brcc	.+34     	; 0xb5e <__stack+0x2ff>
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	e3 16       	cp	r14, r19
     b40:	f1 04       	cpc	r15, r1
     b42:	01 05       	cpc	r16, r1
     b44:	11 05       	cpc	r17, r1
     b46:	31 f0       	breq	.+12     	; 0xb54 <__stack+0x2f5>
     b48:	28 f0       	brcs	.+10     	; 0xb54 <__stack+0x2f5>
     b4a:	48 e0       	ldi	r20, 0x08	; 8
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	17 c0       	rjmp	.+46     	; 0xb82 <__stack+0x323>
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	12 c0       	rjmp	.+36     	; 0xb82 <__stack+0x323>
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	e4 16       	cp	r14, r20
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	f4 06       	cpc	r15, r20
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	04 07       	cpc	r16, r20
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	14 07       	cpc	r17, r20
     b6e:	28 f0       	brcs	.+10     	; 0xb7a <__stack+0x31b>
     b70:	48 e1       	ldi	r20, 0x18	; 24
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__stack+0x323>
     b7a:	40 e1       	ldi	r20, 0x10	; 16
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	d8 01       	movw	r26, r16
     b84:	c7 01       	movw	r24, r14
     b86:	04 2e       	mov	r0, r20
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__stack+0x333>
     b8a:	b6 95       	lsr	r27
     b8c:	a7 95       	ror	r26
     b8e:	97 95       	ror	r25
     b90:	87 95       	ror	r24
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__stack+0x32b>
     b96:	82 56       	subi	r24, 0x62	; 98
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	dc 01       	movw	r26, r24
     b9c:	2c 91       	ld	r18, X
     b9e:	30 e2       	ldi	r19, 0x20	; 32
     ba0:	a3 2e       	mov	r10, r19
     ba2:	b1 2c       	mov	r11, r1
     ba4:	c1 2c       	mov	r12, r1
     ba6:	d1 2c       	mov	r13, r1
     ba8:	d6 01       	movw	r26, r12
     baa:	c5 01       	movw	r24, r10
     bac:	84 1b       	sub	r24, r20
     bae:	95 0b       	sbc	r25, r21
     bb0:	a6 0b       	sbc	r26, r22
     bb2:	b7 0b       	sbc	r27, r23
     bb4:	82 1b       	sub	r24, r18
     bb6:	91 09       	sbc	r25, r1
     bb8:	a1 09       	sbc	r26, r1
     bba:	b1 09       	sbc	r27, r1
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	a1 05       	cpc	r26, r1
     bc0:	b1 05       	cpc	r27, r1
     bc2:	89 f4       	brne	.+34     	; 0xbe6 <__stack+0x387>
     bc4:	e6 14       	cp	r14, r6
     bc6:	f7 04       	cpc	r15, r7
     bc8:	08 05       	cpc	r16, r8
     bca:	19 05       	cpc	r17, r9
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__stack+0x371>
     bce:	f2 c1       	rjmp	.+996    	; 0xfb4 <__stack+0x755>
     bd0:	6d a4       	ldd	r6, Y+45	; 0x2d
     bd2:	7e a4       	ldd	r7, Y+46	; 0x2e
     bd4:	8f a4       	ldd	r8, Y+47	; 0x2f
     bd6:	98 a8       	ldd	r9, Y+48	; 0x30
     bd8:	62 14       	cp	r6, r2
     bda:	73 04       	cpc	r7, r3
     bdc:	84 04       	cpc	r8, r4
     bde:	95 04       	cpc	r9, r5
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <__stack+0x385>
     be2:	e8 c1       	rjmp	.+976    	; 0xfb4 <__stack+0x755>
     be4:	f3 c1       	rjmp	.+998    	; 0xfcc <__stack+0x76d>
     be6:	6e 96       	adiw	r28, 0x1e	; 30
     be8:	8f af       	std	Y+63, r24	; 0x3f
     bea:	6e 97       	sbiw	r28, 0x1e	; 30
     bec:	08 2e       	mov	r0, r24
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__stack+0x399>
     bf0:	ee 0c       	add	r14, r14
     bf2:	ff 1c       	adc	r15, r15
     bf4:	00 1f       	adc	r16, r16
     bf6:	11 1f       	adc	r17, r17
     bf8:	0a 94       	dec	r0
     bfa:	d2 f7       	brpl	.-12     	; 0xbf0 <__stack+0x391>
     bfc:	6a 2d       	mov	r22, r10
     bfe:	68 1b       	sub	r22, r24
     c00:	d2 01       	movw	r26, r4
     c02:	c1 01       	movw	r24, r2
     c04:	06 2e       	mov	r0, r22
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <__stack+0x3b1>
     c08:	b6 95       	lsr	r27
     c0a:	a7 95       	ror	r26
     c0c:	97 95       	ror	r25
     c0e:	87 95       	ror	r24
     c10:	0a 94       	dec	r0
     c12:	d2 f7       	brpl	.-12     	; 0xc08 <__stack+0x3a9>
     c14:	5c 01       	movw	r10, r24
     c16:	6d 01       	movw	r12, r26
     c18:	ae 28       	or	r10, r14
     c1a:	bf 28       	or	r11, r15
     c1c:	c0 2a       	or	r12, r16
     c1e:	d1 2a       	or	r13, r17
     c20:	ad a2       	std	Y+37, r10	; 0x25
     c22:	be a2       	std	Y+38, r11	; 0x26
     c24:	cf a2       	std	Y+39, r12	; 0x27
     c26:	d8 a6       	std	Y+40, r13	; 0x28
     c28:	72 01       	movw	r14, r4
     c2a:	61 01       	movw	r12, r2
     c2c:	6e 96       	adiw	r28, 0x1e	; 30
     c2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     c30:	6e 97       	sbiw	r28, 0x1e	; 30
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <__stack+0x3dd>
     c34:	cc 0c       	add	r12, r12
     c36:	dd 1c       	adc	r13, r13
     c38:	ee 1c       	adc	r14, r14
     c3a:	ff 1c       	adc	r15, r15
     c3c:	0a 94       	dec	r0
     c3e:	d2 f7       	brpl	.-12     	; 0xc34 <__stack+0x3d5>
     c40:	c9 a2       	std	Y+33, r12	; 0x21
     c42:	da a2       	std	Y+34, r13	; 0x22
     c44:	eb a2       	std	Y+35, r14	; 0x23
     c46:	fc a2       	std	Y+36, r15	; 0x24
     c48:	64 01       	movw	r12, r8
     c4a:	53 01       	movw	r10, r6
     c4c:	06 2e       	mov	r0, r22
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__stack+0x3f9>
     c50:	d6 94       	lsr	r13
     c52:	c7 94       	ror	r12
     c54:	b7 94       	ror	r11
     c56:	a7 94       	ror	r10
     c58:	0a 94       	dec	r0
     c5a:	d2 f7       	brpl	.-12     	; 0xc50 <__stack+0x3f1>
     c5c:	d4 01       	movw	r26, r8
     c5e:	c3 01       	movw	r24, r6
     c60:	6e 96       	adiw	r28, 0x1e	; 30
     c62:	0f ac       	ldd	r0, Y+63	; 0x3f
     c64:	6e 97       	sbiw	r28, 0x1e	; 30
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__stack+0x411>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	aa 1f       	adc	r26, r26
     c6e:	bb 1f       	adc	r27, r27
     c70:	0a 94       	dec	r0
     c72:	d2 f7       	brpl	.-12     	; 0xc68 <__stack+0x409>
     c74:	ed a4       	ldd	r14, Y+45	; 0x2d
     c76:	fe a4       	ldd	r15, Y+46	; 0x2e
     c78:	0f a5       	ldd	r16, Y+47	; 0x2f
     c7a:	18 a9       	ldd	r17, Y+48	; 0x30
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	16 95       	lsr	r17
     c80:	07 95       	ror	r16
     c82:	f7 94       	ror	r15
     c84:	e7 94       	ror	r14
     c86:	6a 95       	dec	r22
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	37 01       	movw	r6, r14
     c8c:	48 01       	movw	r8, r16
     c8e:	68 2a       	or	r6, r24
     c90:	79 2a       	or	r7, r25
     c92:	8a 2a       	or	r8, r26
     c94:	9b 2a       	or	r9, r27
     c96:	6d 8e       	std	Y+29, r6	; 0x1d
     c98:	7e 8e       	std	Y+30, r7	; 0x1e
     c9a:	8f 8e       	std	Y+31, r8	; 0x1f
     c9c:	98 a2       	std	Y+32, r9	; 0x20
     c9e:	ed a0       	ldd	r14, Y+37	; 0x25
     ca0:	fe a0       	ldd	r15, Y+38	; 0x26
     ca2:	0f a1       	ldd	r16, Y+39	; 0x27
     ca4:	18 a5       	ldd	r17, Y+40	; 0x28
     ca6:	38 01       	movw	r6, r16
     ca8:	88 24       	eor	r8, r8
     caa:	99 24       	eor	r9, r9
     cac:	98 01       	movw	r18, r16
     cae:	87 01       	movw	r16, r14
     cb0:	20 70       	andi	r18, 0x00	; 0
     cb2:	30 70       	andi	r19, 0x00	; 0
     cb4:	65 96       	adiw	r28, 0x15	; 21
     cb6:	0c af       	std	Y+60, r16	; 0x3c
     cb8:	1d af       	std	Y+61, r17	; 0x3d
     cba:	2e af       	std	Y+62, r18	; 0x3e
     cbc:	3f af       	std	Y+63, r19	; 0x3f
     cbe:	65 97       	sbiw	r28, 0x15	; 21
     cc0:	c6 01       	movw	r24, r12
     cc2:	b5 01       	movw	r22, r10
     cc4:	a4 01       	movw	r20, r8
     cc6:	93 01       	movw	r18, r6
     cc8:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     ccc:	7b 01       	movw	r14, r22
     cce:	8c 01       	movw	r16, r24
     cd0:	c6 01       	movw	r24, r12
     cd2:	b5 01       	movw	r22, r10
     cd4:	a4 01       	movw	r20, r8
     cd6:	93 01       	movw	r18, r6
     cd8:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     cdc:	c9 01       	movw	r24, r18
     cde:	da 01       	movw	r26, r20
     ce0:	1c 01       	movw	r2, r24
     ce2:	2d 01       	movw	r4, r26
     ce4:	c2 01       	movw	r24, r4
     ce6:	b1 01       	movw	r22, r2
     ce8:	65 96       	adiw	r28, 0x15	; 21
     cea:	2c ad       	ldd	r18, Y+60	; 0x3c
     cec:	3d ad       	ldd	r19, Y+61	; 0x3d
     cee:	4e ad       	ldd	r20, Y+62	; 0x3e
     cf0:	5f ad       	ldd	r21, Y+63	; 0x3f
     cf2:	65 97       	sbiw	r28, 0x15	; 21
     cf4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	87 01       	movw	r16, r14
     cfe:	ff 24       	eor	r15, r15
     d00:	ee 24       	eor	r14, r14
     d02:	ad 8c       	ldd	r10, Y+29	; 0x1d
     d04:	be 8c       	ldd	r11, Y+30	; 0x1e
     d06:	cf 8c       	ldd	r12, Y+31	; 0x1f
     d08:	d8 a0       	ldd	r13, Y+32	; 0x20
     d0a:	c6 01       	movw	r24, r12
     d0c:	aa 27       	eor	r26, r26
     d0e:	bb 27       	eor	r27, r27
     d10:	57 01       	movw	r10, r14
     d12:	68 01       	movw	r12, r16
     d14:	a8 2a       	or	r10, r24
     d16:	b9 2a       	or	r11, r25
     d18:	ca 2a       	or	r12, r26
     d1a:	db 2a       	or	r13, r27
     d1c:	a2 16       	cp	r10, r18
     d1e:	b3 06       	cpc	r11, r19
     d20:	c4 06       	cpc	r12, r20
     d22:	d5 06       	cpc	r13, r21
     d24:	00 f5       	brcc	.+64     	; 0xd66 <__stack+0x507>
     d26:	08 94       	sec
     d28:	21 08       	sbc	r2, r1
     d2a:	31 08       	sbc	r3, r1
     d2c:	41 08       	sbc	r4, r1
     d2e:	51 08       	sbc	r5, r1
     d30:	ed a0       	ldd	r14, Y+37	; 0x25
     d32:	fe a0       	ldd	r15, Y+38	; 0x26
     d34:	0f a1       	ldd	r16, Y+39	; 0x27
     d36:	18 a5       	ldd	r17, Y+40	; 0x28
     d38:	ae 0c       	add	r10, r14
     d3a:	bf 1c       	adc	r11, r15
     d3c:	c0 1e       	adc	r12, r16
     d3e:	d1 1e       	adc	r13, r17
     d40:	ae 14       	cp	r10, r14
     d42:	bf 04       	cpc	r11, r15
     d44:	c0 06       	cpc	r12, r16
     d46:	d1 06       	cpc	r13, r17
     d48:	70 f0       	brcs	.+28     	; 0xd66 <__stack+0x507>
     d4a:	a2 16       	cp	r10, r18
     d4c:	b3 06       	cpc	r11, r19
     d4e:	c4 06       	cpc	r12, r20
     d50:	d5 06       	cpc	r13, r21
     d52:	48 f4       	brcc	.+18     	; 0xd66 <__stack+0x507>
     d54:	08 94       	sec
     d56:	21 08       	sbc	r2, r1
     d58:	31 08       	sbc	r3, r1
     d5a:	41 08       	sbc	r4, r1
     d5c:	51 08       	sbc	r5, r1
     d5e:	ae 0c       	add	r10, r14
     d60:	bf 1c       	adc	r11, r15
     d62:	c0 1e       	adc	r12, r16
     d64:	d1 1e       	adc	r13, r17
     d66:	a2 1a       	sub	r10, r18
     d68:	b3 0a       	sbc	r11, r19
     d6a:	c4 0a       	sbc	r12, r20
     d6c:	d5 0a       	sbc	r13, r21
     d6e:	c6 01       	movw	r24, r12
     d70:	b5 01       	movw	r22, r10
     d72:	a4 01       	movw	r20, r8
     d74:	93 01       	movw	r18, r6
     d76:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     d7a:	7b 01       	movw	r14, r22
     d7c:	8c 01       	movw	r16, r24
     d7e:	c6 01       	movw	r24, r12
     d80:	b5 01       	movw	r22, r10
     d82:	a4 01       	movw	r20, r8
     d84:	93 01       	movw	r18, r6
     d86:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
     d8a:	c9 01       	movw	r24, r18
     d8c:	da 01       	movw	r26, r20
     d8e:	3c 01       	movw	r6, r24
     d90:	4d 01       	movw	r8, r26
     d92:	c4 01       	movw	r24, r8
     d94:	b3 01       	movw	r22, r6
     d96:	65 96       	adiw	r28, 0x15	; 21
     d98:	2c ad       	ldd	r18, Y+60	; 0x3c
     d9a:	3d ad       	ldd	r19, Y+61	; 0x3d
     d9c:	4e ad       	ldd	r20, Y+62	; 0x3e
     d9e:	5f ad       	ldd	r21, Y+63	; 0x3f
     da0:	65 97       	sbiw	r28, 0x15	; 21
     da2:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	87 01       	movw	r16, r14
     dac:	ff 24       	eor	r15, r15
     dae:	ee 24       	eor	r14, r14
     db0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db4:	af 8d       	ldd	r26, Y+31	; 0x1f
     db6:	b8 a1       	ldd	r27, Y+32	; 0x20
     db8:	a0 70       	andi	r26, 0x00	; 0
     dba:	b0 70       	andi	r27, 0x00	; 0
     dbc:	57 01       	movw	r10, r14
     dbe:	68 01       	movw	r12, r16
     dc0:	a8 2a       	or	r10, r24
     dc2:	b9 2a       	or	r11, r25
     dc4:	ca 2a       	or	r12, r26
     dc6:	db 2a       	or	r13, r27
     dc8:	a2 16       	cp	r10, r18
     dca:	b3 06       	cpc	r11, r19
     dcc:	c4 06       	cpc	r12, r20
     dce:	d5 06       	cpc	r13, r21
     dd0:	00 f5       	brcc	.+64     	; 0xe12 <__stack+0x5b3>
     dd2:	08 94       	sec
     dd4:	61 08       	sbc	r6, r1
     dd6:	71 08       	sbc	r7, r1
     dd8:	81 08       	sbc	r8, r1
     dda:	91 08       	sbc	r9, r1
     ddc:	6d a1       	ldd	r22, Y+37	; 0x25
     dde:	7e a1       	ldd	r23, Y+38	; 0x26
     de0:	8f a1       	ldd	r24, Y+39	; 0x27
     de2:	98 a5       	ldd	r25, Y+40	; 0x28
     de4:	a6 0e       	add	r10, r22
     de6:	b7 1e       	adc	r11, r23
     de8:	c8 1e       	adc	r12, r24
     dea:	d9 1e       	adc	r13, r25
     dec:	a6 16       	cp	r10, r22
     dee:	b7 06       	cpc	r11, r23
     df0:	c8 06       	cpc	r12, r24
     df2:	d9 06       	cpc	r13, r25
     df4:	70 f0       	brcs	.+28     	; 0xe12 <__stack+0x5b3>
     df6:	a2 16       	cp	r10, r18
     df8:	b3 06       	cpc	r11, r19
     dfa:	c4 06       	cpc	r12, r20
     dfc:	d5 06       	cpc	r13, r21
     dfe:	48 f4       	brcc	.+18     	; 0xe12 <__stack+0x5b3>
     e00:	08 94       	sec
     e02:	61 08       	sbc	r6, r1
     e04:	71 08       	sbc	r7, r1
     e06:	81 08       	sbc	r8, r1
     e08:	91 08       	sbc	r9, r1
     e0a:	a6 0e       	add	r10, r22
     e0c:	b7 1e       	adc	r11, r23
     e0e:	c8 1e       	adc	r12, r24
     e10:	d9 1e       	adc	r13, r25
     e12:	d6 01       	movw	r26, r12
     e14:	c5 01       	movw	r24, r10
     e16:	82 1b       	sub	r24, r18
     e18:	93 0b       	sbc	r25, r19
     e1a:	a4 0b       	sbc	r26, r20
     e1c:	b5 0b       	sbc	r27, r21
     e1e:	89 8f       	std	Y+25, r24	; 0x19
     e20:	9a 8f       	std	Y+26, r25	; 0x1a
     e22:	ab 8f       	std	Y+27, r26	; 0x1b
     e24:	bc 8f       	std	Y+28, r27	; 0x1c
     e26:	d1 01       	movw	r26, r2
     e28:	99 27       	eor	r25, r25
     e2a:	88 27       	eor	r24, r24
     e2c:	64 01       	movw	r12, r8
     e2e:	53 01       	movw	r10, r6
     e30:	a8 2a       	or	r10, r24
     e32:	b9 2a       	or	r11, r25
     e34:	ca 2a       	or	r12, r26
     e36:	db 2a       	or	r13, r27
     e38:	a9 aa       	std	Y+49, r10	; 0x31
     e3a:	ba aa       	std	Y+50, r11	; 0x32
     e3c:	cb aa       	std	Y+51, r12	; 0x33
     e3e:	dc aa       	std	Y+52, r13	; 0x34
     e40:	86 01       	movw	r16, r12
     e42:	75 01       	movw	r14, r10
     e44:	2f ef       	ldi	r18, 0xFF	; 255
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	e2 22       	and	r14, r18
     e4e:	f3 22       	and	r15, r19
     e50:	04 23       	and	r16, r20
     e52:	15 23       	and	r17, r21
     e54:	a6 01       	movw	r20, r12
     e56:	66 27       	eor	r22, r22
     e58:	77 27       	eor	r23, r23
     e5a:	6d 96       	adiw	r28, 0x1d	; 29
     e5c:	4c af       	std	Y+60, r20	; 0x3c
     e5e:	5d af       	std	Y+61, r21	; 0x3d
     e60:	6e af       	std	Y+62, r22	; 0x3e
     e62:	7f af       	std	Y+63, r23	; 0x3f
     e64:	6d 97       	sbiw	r28, 0x1d	; 29
     e66:	a9 a0       	ldd	r10, Y+33	; 0x21
     e68:	ba a0       	ldd	r11, Y+34	; 0x22
     e6a:	cb a0       	ldd	r12, Y+35	; 0x23
     e6c:	dc a0       	ldd	r13, Y+36	; 0x24
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a6 22       	and	r10, r22
     e78:	b7 22       	and	r11, r23
     e7a:	c8 22       	and	r12, r24
     e7c:	d9 22       	and	r13, r25
     e7e:	89 a1       	ldd	r24, Y+33	; 0x21
     e80:	9a a1       	ldd	r25, Y+34	; 0x22
     e82:	ab a1       	ldd	r26, Y+35	; 0x23
     e84:	bc a1       	ldd	r27, Y+36	; 0x24
     e86:	1d 01       	movw	r2, r26
     e88:	44 24       	eor	r4, r4
     e8a:	55 24       	eor	r5, r5
     e8c:	c8 01       	movw	r24, r16
     e8e:	b7 01       	movw	r22, r14
     e90:	a6 01       	movw	r20, r12
     e92:	95 01       	movw	r18, r10
     e94:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     e98:	69 96       	adiw	r28, 0x19	; 25
     e9a:	6c af       	std	Y+60, r22	; 0x3c
     e9c:	7d af       	std	Y+61, r23	; 0x3d
     e9e:	8e af       	std	Y+62, r24	; 0x3e
     ea0:	9f af       	std	Y+63, r25	; 0x3f
     ea2:	69 97       	sbiw	r28, 0x19	; 25
     ea4:	c8 01       	movw	r24, r16
     ea6:	b7 01       	movw	r22, r14
     ea8:	a2 01       	movw	r20, r4
     eaa:	91 01       	movw	r18, r2
     eac:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     eb0:	3b 01       	movw	r6, r22
     eb2:	4c 01       	movw	r8, r24
     eb4:	6d 96       	adiw	r28, 0x1d	; 29
     eb6:	6c ad       	ldd	r22, Y+60	; 0x3c
     eb8:	7d ad       	ldd	r23, Y+61	; 0x3d
     eba:	8e ad       	ldd	r24, Y+62	; 0x3e
     ebc:	9f ad       	ldd	r25, Y+63	; 0x3f
     ebe:	6d 97       	sbiw	r28, 0x1d	; 29
     ec0:	a6 01       	movw	r20, r12
     ec2:	95 01       	movw	r18, r10
     ec4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     ec8:	7b 01       	movw	r14, r22
     eca:	8c 01       	movw	r16, r24
     ecc:	6d 96       	adiw	r28, 0x1d	; 29
     ece:	6c ad       	ldd	r22, Y+60	; 0x3c
     ed0:	7d ad       	ldd	r23, Y+61	; 0x3d
     ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ed4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ed6:	6d 97       	sbiw	r28, 0x1d	; 29
     ed8:	a2 01       	movw	r20, r4
     eda:	91 01       	movw	r18, r2
     edc:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
     ee0:	5b 01       	movw	r10, r22
     ee2:	6c 01       	movw	r12, r24
     ee4:	a8 01       	movw	r20, r16
     ee6:	97 01       	movw	r18, r14
     ee8:	26 0d       	add	r18, r6
     eea:	37 1d       	adc	r19, r7
     eec:	48 1d       	adc	r20, r8
     eee:	59 1d       	adc	r21, r9
     ef0:	69 96       	adiw	r28, 0x19	; 25
     ef2:	6c ac       	ldd	r6, Y+60	; 0x3c
     ef4:	7d ac       	ldd	r7, Y+61	; 0x3d
     ef6:	8e ac       	ldd	r8, Y+62	; 0x3e
     ef8:	9f ac       	ldd	r9, Y+63	; 0x3f
     efa:	69 97       	sbiw	r28, 0x19	; 25
     efc:	c4 01       	movw	r24, r8
     efe:	aa 27       	eor	r26, r26
     f00:	bb 27       	eor	r27, r27
     f02:	28 0f       	add	r18, r24
     f04:	39 1f       	adc	r19, r25
     f06:	4a 1f       	adc	r20, r26
     f08:	5b 1f       	adc	r21, r27
     f0a:	2e 15       	cp	r18, r14
     f0c:	3f 05       	cpc	r19, r15
     f0e:	40 07       	cpc	r20, r16
     f10:	51 07       	cpc	r21, r17
     f12:	48 f4       	brcc	.+18     	; 0xf26 <__stack+0x6c7>
     f14:	e1 2c       	mov	r14, r1
     f16:	f1 2c       	mov	r15, r1
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	06 2f       	mov	r16, r22
     f1c:	11 2d       	mov	r17, r1
     f1e:	ae 0c       	add	r10, r14
     f20:	bf 1c       	adc	r11, r15
     f22:	c0 1e       	adc	r12, r16
     f24:	d1 1e       	adc	r13, r17
     f26:	ca 01       	movw	r24, r20
     f28:	aa 27       	eor	r26, r26
     f2a:	bb 27       	eor	r27, r27
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	6a 0d       	add	r22, r10
     f32:	7b 1d       	adc	r23, r11
     f34:	8c 1d       	adc	r24, r12
     f36:	9d 1d       	adc	r25, r13
     f38:	69 8c       	ldd	r6, Y+25	; 0x19
     f3a:	7a 8c       	ldd	r7, Y+26	; 0x1a
     f3c:	8b 8c       	ldd	r8, Y+27	; 0x1b
     f3e:	9c 8c       	ldd	r9, Y+28	; 0x1c
     f40:	66 16       	cp	r6, r22
     f42:	77 06       	cpc	r7, r23
     f44:	88 06       	cpc	r8, r24
     f46:	99 06       	cpc	r9, r25
     f48:	40 f1       	brcs	.+80     	; 0xf9a <__stack+0x73b>
     f4a:	66 15       	cp	r22, r6
     f4c:	77 05       	cpc	r23, r7
     f4e:	88 05       	cpc	r24, r8
     f50:	99 05       	cpc	r25, r9
     f52:	09 f0       	breq	.+2      	; 0xf56 <__stack+0x6f7>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <__stack+0x77d>
     f56:	d9 01       	movw	r26, r18
     f58:	99 27       	eor	r25, r25
     f5a:	88 27       	eor	r24, r24
     f5c:	69 96       	adiw	r28, 0x19	; 25
     f5e:	2c ad       	ldd	r18, Y+60	; 0x3c
     f60:	3d ad       	ldd	r19, Y+61	; 0x3d
     f62:	4e ad       	ldd	r20, Y+62	; 0x3e
     f64:	5f ad       	ldd	r21, Y+63	; 0x3f
     f66:	69 97       	sbiw	r28, 0x19	; 25
     f68:	40 70       	andi	r20, 0x00	; 0
     f6a:	50 70       	andi	r21, 0x00	; 0
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	a4 1f       	adc	r26, r20
     f72:	b5 1f       	adc	r27, r21
     f74:	2d a5       	ldd	r18, Y+45	; 0x2d
     f76:	3e a5       	ldd	r19, Y+46	; 0x2e
     f78:	4f a5       	ldd	r20, Y+47	; 0x2f
     f7a:	58 a9       	ldd	r21, Y+48	; 0x30
     f7c:	6e 96       	adiw	r28, 0x1e	; 30
     f7e:	0f ac       	ldd	r0, Y+63	; 0x3f
     f80:	6e 97       	sbiw	r28, 0x1e	; 30
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <__stack+0x72d>
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	44 1f       	adc	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	0a 94       	dec	r0
     f8e:	d2 f7       	brpl	.-12     	; 0xf84 <__stack+0x725>
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	4a 07       	cpc	r20, r26
     f96:	5b 07       	cpc	r21, r27
     f98:	08 f5       	brcc	.+66     	; 0xfdc <__stack+0x77d>
     f9a:	09 a9       	ldd	r16, Y+49	; 0x31
     f9c:	1a a9       	ldd	r17, Y+50	; 0x32
     f9e:	2b a9       	ldd	r18, Y+51	; 0x33
     fa0:	3c a9       	ldd	r19, Y+52	; 0x34
     fa2:	01 50       	subi	r16, 0x01	; 1
     fa4:	10 40       	sbci	r17, 0x00	; 0
     fa6:	20 40       	sbci	r18, 0x00	; 0
     fa8:	30 40       	sbci	r19, 0x00	; 0
     faa:	09 ab       	std	Y+49, r16	; 0x31
     fac:	1a ab       	std	Y+50, r17	; 0x32
     fae:	2b ab       	std	Y+51, r18	; 0x33
     fb0:	3c ab       	std	Y+52, r19	; 0x34
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <__stack+0x77d>
     fb4:	66 24       	eor	r6, r6
     fb6:	77 24       	eor	r7, r7
     fb8:	43 01       	movw	r8, r6
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	29 ab       	std	Y+49, r18	; 0x31
     fc4:	3a ab       	std	Y+50, r19	; 0x32
     fc6:	4b ab       	std	Y+51, r20	; 0x33
     fc8:	5c ab       	std	Y+52, r21	; 0x34
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <__stack+0x783>
     fcc:	66 24       	eor	r6, r6
     fce:	77 24       	eor	r7, r7
     fd0:	43 01       	movw	r8, r6
     fd2:	19 aa       	std	Y+49, r1	; 0x31
     fd4:	1a aa       	std	Y+50, r1	; 0x32
     fd6:	1b aa       	std	Y+51, r1	; 0x33
     fd8:	1c aa       	std	Y+52, r1	; 0x34
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <__stack+0x783>
     fdc:	66 24       	eor	r6, r6
     fde:	77 24       	eor	r7, r7
     fe0:	43 01       	movw	r8, r6
     fe2:	fe 01       	movw	r30, r28
     fe4:	71 96       	adiw	r30, 0x11	; 17
     fe6:	88 e0       	ldi	r24, 0x08	; 8
     fe8:	df 01       	movw	r26, r30
     fea:	1d 92       	st	X+, r1
     fec:	8a 95       	dec	r24
     fee:	e9 f7       	brne	.-6      	; 0xfea <__stack+0x78b>
     ff0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ff2:	ba a8       	ldd	r11, Y+50	; 0x32
     ff4:	cb a8       	ldd	r12, Y+51	; 0x33
     ff6:	dc a8       	ldd	r13, Y+52	; 0x34
     ff8:	a9 8a       	std	Y+17, r10	; 0x11
     ffa:	ba 8a       	std	Y+18, r11	; 0x12
     ffc:	cb 8a       	std	Y+19, r12	; 0x13
     ffe:	dc 8a       	std	Y+20, r13	; 0x14
    1000:	6d 8a       	std	Y+21, r6	; 0x15
    1002:	7e 8a       	std	Y+22, r7	; 0x16
    1004:	8f 8a       	std	Y+23, r8	; 0x17
    1006:	98 8e       	std	Y+24, r9	; 0x18
    1008:	29 a9       	ldd	r18, Y+49	; 0x31
    100a:	3a 89       	ldd	r19, Y+18	; 0x12
    100c:	4b 89       	ldd	r20, Y+19	; 0x13
    100e:	5c 89       	ldd	r21, Y+20	; 0x14
    1010:	66 2d       	mov	r22, r6
    1012:	7e 89       	ldd	r23, Y+22	; 0x16
    1014:	8f 89       	ldd	r24, Y+23	; 0x17
    1016:	98 8d       	ldd	r25, Y+24	; 0x18
    1018:	c2 5a       	subi	r28, 0xA2	; 162
    101a:	df 4f       	sbci	r29, 0xFF	; 255
    101c:	e2 e1       	ldi	r30, 0x12	; 18
    101e:	0c 94 21 31 	jmp	0x6242	; 0x6242 <__epilogue_restores__>

00001022 <__umoddi3>:
    1022:	ab e5       	ldi	r26, 0x5B	; 91
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e1       	ldi	r30, 0x17	; 23
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	0c 94 05 31 	jmp	0x620a	; 0x620a <__prologue_saves__>
    102e:	a8 e0       	ldi	r26, 0x08	; 8
    1030:	4e 01       	movw	r8, r28
    1032:	08 94       	sec
    1034:	81 1c       	adc	r8, r1
    1036:	91 1c       	adc	r9, r1
    1038:	f4 01       	movw	r30, r8
    103a:	6a 2e       	mov	r6, r26
    103c:	11 92       	st	Z+, r1
    103e:	6a 94       	dec	r6
    1040:	e9 f7       	brne	.-6      	; 0x103c <__umoddi3+0x1a>
    1042:	29 83       	std	Y+1, r18	; 0x01
    1044:	3a 83       	std	Y+2, r19	; 0x02
    1046:	4b 83       	std	Y+3, r20	; 0x03
    1048:	5c 83       	std	Y+4, r21	; 0x04
    104a:	6d 83       	std	Y+5, r22	; 0x05
    104c:	7e 83       	std	Y+6, r23	; 0x06
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	ce 01       	movw	r24, r28
    1054:	09 96       	adiw	r24, 0x09	; 9
    1056:	fc 01       	movw	r30, r24
    1058:	11 92       	st	Z+, r1
    105a:	aa 95       	dec	r26
    105c:	e9 f7       	brne	.-6      	; 0x1058 <__umoddi3+0x36>
    105e:	a9 86       	std	Y+9, r10	; 0x09
    1060:	ba 86       	std	Y+10, r11	; 0x0a
    1062:	cb 86       	std	Y+11, r12	; 0x0b
    1064:	dc 86       	std	Y+12, r13	; 0x0c
    1066:	ed 86       	std	Y+13, r14	; 0x0d
    1068:	fe 86       	std	Y+14, r15	; 0x0e
    106a:	0f 87       	std	Y+15, r16	; 0x0f
    106c:	18 8b       	std	Y+16, r17	; 0x10
    106e:	29 84       	ldd	r2, Y+9	; 0x09
    1070:	3a 84       	ldd	r3, Y+10	; 0x0a
    1072:	4b 84       	ldd	r4, Y+11	; 0x0b
    1074:	5c 84       	ldd	r5, Y+12	; 0x0c
    1076:	ad 84       	ldd	r10, Y+13	; 0x0d
    1078:	be 84       	ldd	r11, Y+14	; 0x0e
    107a:	cf 84       	ldd	r12, Y+15	; 0x0f
    107c:	d8 88       	ldd	r13, Y+16	; 0x10
    107e:	29 81       	ldd	r18, Y+1	; 0x01
    1080:	3a 81       	ldd	r19, Y+2	; 0x02
    1082:	4b 81       	ldd	r20, Y+3	; 0x03
    1084:	5c 81       	ldd	r21, Y+4	; 0x04
    1086:	69 96       	adiw	r28, 0x19	; 25
    1088:	2f af       	std	Y+63, r18	; 0x3f
    108a:	69 97       	sbiw	r28, 0x19	; 25
    108c:	6a 96       	adiw	r28, 0x1a	; 26
    108e:	3f af       	std	Y+63, r19	; 0x3f
    1090:	6a 97       	sbiw	r28, 0x1a	; 26
    1092:	6b 96       	adiw	r28, 0x1b	; 27
    1094:	4f af       	std	Y+63, r20	; 0x3f
    1096:	6b 97       	sbiw	r28, 0x1b	; 27
    1098:	6c 96       	adiw	r28, 0x1c	; 28
    109a:	5f af       	std	Y+63, r21	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	6c 96       	adiw	r28, 0x1c	; 28
    10a0:	6c ac       	ldd	r6, Y+60	; 0x3c
    10a2:	7d ac       	ldd	r7, Y+61	; 0x3d
    10a4:	8e ac       	ldd	r8, Y+62	; 0x3e
    10a6:	9f ac       	ldd	r9, Y+63	; 0x3f
    10a8:	6c 97       	sbiw	r28, 0x1c	; 28
    10aa:	69 aa       	std	Y+49, r6	; 0x31
    10ac:	7a aa       	std	Y+50, r7	; 0x32
    10ae:	8b aa       	std	Y+51, r8	; 0x33
    10b0:	9c aa       	std	Y+52, r9	; 0x34
    10b2:	6d 81       	ldd	r22, Y+5	; 0x05
    10b4:	7e 81       	ldd	r23, Y+6	; 0x06
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	3b 01       	movw	r6, r22
    10bc:	4c 01       	movw	r8, r24
    10be:	6d aa       	std	Y+53, r6	; 0x35
    10c0:	7e aa       	std	Y+54, r7	; 0x36
    10c2:	8f aa       	std	Y+55, r8	; 0x37
    10c4:	98 ae       	std	Y+56, r9	; 0x38
    10c6:	a1 14       	cp	r10, r1
    10c8:	b1 04       	cpc	r11, r1
    10ca:	c1 04       	cpc	r12, r1
    10cc:	d1 04       	cpc	r13, r1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__umoddi3+0xb0>
    10d0:	04 c3       	rjmp	.+1544   	; 0x16da <__umoddi3+0x6b8>
    10d2:	62 14       	cp	r6, r2
    10d4:	73 04       	cpc	r7, r3
    10d6:	84 04       	cpc	r8, r4
    10d8:	95 04       	cpc	r9, r5
    10da:	08 f0       	brcs	.+2      	; 0x10de <__umoddi3+0xbc>
    10dc:	00 c1       	rjmp	.+512    	; 0x12de <__umoddi3+0x2bc>
    10de:	00 e0       	ldi	r16, 0x00	; 0
    10e0:	20 16       	cp	r2, r16
    10e2:	00 e0       	ldi	r16, 0x00	; 0
    10e4:	30 06       	cpc	r3, r16
    10e6:	01 e0       	ldi	r16, 0x01	; 1
    10e8:	40 06       	cpc	r4, r16
    10ea:	00 e0       	ldi	r16, 0x00	; 0
    10ec:	50 06       	cpc	r5, r16
    10ee:	88 f4       	brcc	.+34     	; 0x1112 <__umoddi3+0xf0>
    10f0:	1f ef       	ldi	r17, 0xFF	; 255
    10f2:	21 16       	cp	r2, r17
    10f4:	31 04       	cpc	r3, r1
    10f6:	41 04       	cpc	r4, r1
    10f8:	51 04       	cpc	r5, r1
    10fa:	39 f0       	breq	.+14     	; 0x110a <__umoddi3+0xe8>
    10fc:	30 f0       	brcs	.+12     	; 0x110a <__umoddi3+0xe8>
    10fe:	88 e0       	ldi	r24, 0x08	; 8
    1100:	e8 2e       	mov	r14, r24
    1102:	f1 2c       	mov	r15, r1
    1104:	01 2d       	mov	r16, r1
    1106:	11 2d       	mov	r17, r1
    1108:	18 c0       	rjmp	.+48     	; 0x113a <__umoddi3+0x118>
    110a:	ee 24       	eor	r14, r14
    110c:	ff 24       	eor	r15, r15
    110e:	87 01       	movw	r16, r14
    1110:	14 c0       	rjmp	.+40     	; 0x113a <__umoddi3+0x118>
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	24 16       	cp	r2, r20
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	34 06       	cpc	r3, r20
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	44 06       	cpc	r4, r20
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	54 06       	cpc	r5, r20
    1122:	30 f0       	brcs	.+12     	; 0x1130 <__umoddi3+0x10e>
    1124:	b8 e1       	ldi	r27, 0x18	; 24
    1126:	eb 2e       	mov	r14, r27
    1128:	f1 2c       	mov	r15, r1
    112a:	01 2d       	mov	r16, r1
    112c:	11 2d       	mov	r17, r1
    112e:	05 c0       	rjmp	.+10     	; 0x113a <__umoddi3+0x118>
    1130:	a0 e1       	ldi	r26, 0x10	; 16
    1132:	ea 2e       	mov	r14, r26
    1134:	f1 2c       	mov	r15, r1
    1136:	01 2d       	mov	r16, r1
    1138:	11 2d       	mov	r17, r1
    113a:	d2 01       	movw	r26, r4
    113c:	c1 01       	movw	r24, r2
    113e:	0e 2c       	mov	r0, r14
    1140:	04 c0       	rjmp	.+8      	; 0x114a <__umoddi3+0x128>
    1142:	b6 95       	lsr	r27
    1144:	a7 95       	ror	r26
    1146:	97 95       	ror	r25
    1148:	87 95       	ror	r24
    114a:	0a 94       	dec	r0
    114c:	d2 f7       	brpl	.-12     	; 0x1142 <__umoddi3+0x120>
    114e:	82 56       	subi	r24, 0x62	; 98
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	dc 01       	movw	r26, r24
    1154:	2c 91       	ld	r18, X
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	8e 19       	sub	r24, r14
    1160:	9f 09       	sbc	r25, r15
    1162:	a0 0b       	sbc	r26, r16
    1164:	b1 0b       	sbc	r27, r17
    1166:	5c 01       	movw	r10, r24
    1168:	6d 01       	movw	r12, r26
    116a:	a2 1a       	sub	r10, r18
    116c:	b1 08       	sbc	r11, r1
    116e:	c1 08       	sbc	r12, r1
    1170:	d1 08       	sbc	r13, r1
    1172:	a9 ae       	std	Y+57, r10	; 0x39
    1174:	ba ae       	std	Y+58, r11	; 0x3a
    1176:	cb ae       	std	Y+59, r12	; 0x3b
    1178:	dc ae       	std	Y+60, r13	; 0x3c
    117a:	a1 14       	cp	r10, r1
    117c:	b1 04       	cpc	r11, r1
    117e:	c1 04       	cpc	r12, r1
    1180:	d1 04       	cpc	r13, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <__umoddi3+0x164>
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <__umoddi3+0x1e2>
    1186:	69 ad       	ldd	r22, Y+57	; 0x39
    1188:	06 2e       	mov	r0, r22
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <__umoddi3+0x172>
    118c:	22 0c       	add	r2, r2
    118e:	33 1c       	adc	r3, r3
    1190:	44 1c       	adc	r4, r4
    1192:	55 1c       	adc	r5, r5
    1194:	0a 94       	dec	r0
    1196:	d2 f7       	brpl	.-12     	; 0x118c <__umoddi3+0x16a>
    1198:	a4 01       	movw	r20, r8
    119a:	93 01       	movw	r18, r6
    119c:	06 2e       	mov	r0, r22
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <__umoddi3+0x186>
    11a0:	22 0f       	add	r18, r18
    11a2:	33 1f       	adc	r19, r19
    11a4:	44 1f       	adc	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	0a 94       	dec	r0
    11aa:	d2 f7       	brpl	.-12     	; 0x11a0 <__umoddi3+0x17e>
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	8a 19       	sub	r24, r10
    11b2:	9b 09       	sbc	r25, r11
    11b4:	6c 96       	adiw	r28, 0x1c	; 28
    11b6:	cc ac       	ldd	r12, Y+60	; 0x3c
    11b8:	dd ac       	ldd	r13, Y+61	; 0x3d
    11ba:	ee ac       	ldd	r14, Y+62	; 0x3e
    11bc:	ff ac       	ldd	r15, Y+63	; 0x3f
    11be:	6c 97       	sbiw	r28, 0x1c	; 28
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <__umoddi3+0x1a8>
    11c2:	f6 94       	lsr	r15
    11c4:	e7 94       	ror	r14
    11c6:	d7 94       	ror	r13
    11c8:	c7 94       	ror	r12
    11ca:	8a 95       	dec	r24
    11cc:	d2 f7       	brpl	.-12     	; 0x11c2 <__umoddi3+0x1a0>
    11ce:	87 01       	movw	r16, r14
    11d0:	76 01       	movw	r14, r12
    11d2:	e2 2a       	or	r14, r18
    11d4:	f3 2a       	or	r15, r19
    11d6:	04 2b       	or	r16, r20
    11d8:	15 2b       	or	r17, r21
    11da:	ed aa       	std	Y+53, r14	; 0x35
    11dc:	fe aa       	std	Y+54, r15	; 0x36
    11de:	0f ab       	std	Y+55, r16	; 0x37
    11e0:	18 af       	std	Y+56, r17	; 0x38
    11e2:	6c 96       	adiw	r28, 0x1c	; 28
    11e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    11e6:	9d ad       	ldd	r25, Y+61	; 0x3d
    11e8:	ae ad       	ldd	r26, Y+62	; 0x3e
    11ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    11ec:	6c 97       	sbiw	r28, 0x1c	; 28
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <__umoddi3+0x1d6>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	6a 95       	dec	r22
    11fa:	d2 f7       	brpl	.-12     	; 0x11f0 <__umoddi3+0x1ce>
    11fc:	89 ab       	std	Y+49, r24	; 0x31
    11fe:	9a ab       	std	Y+50, r25	; 0x32
    1200:	ab ab       	std	Y+51, r26	; 0x33
    1202:	bc ab       	std	Y+52, r27	; 0x34
    1204:	32 01       	movw	r6, r4
    1206:	88 24       	eor	r8, r8
    1208:	99 24       	eor	r9, r9
    120a:	b2 01       	movw	r22, r4
    120c:	a1 01       	movw	r20, r2
    120e:	60 70       	andi	r22, 0x00	; 0
    1210:	70 70       	andi	r23, 0x00	; 0
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	4c af       	std	Y+60, r20	; 0x3c
    1216:	5d af       	std	Y+61, r21	; 0x3d
    1218:	6e af       	std	Y+62, r22	; 0x3e
    121a:	7f af       	std	Y+63, r23	; 0x3f
    121c:	21 97       	sbiw	r28, 0x01	; 1
    121e:	6d a9       	ldd	r22, Y+53	; 0x35
    1220:	7e a9       	ldd	r23, Y+54	; 0x36
    1222:	8f a9       	ldd	r24, Y+55	; 0x37
    1224:	98 ad       	ldd	r25, Y+56	; 0x38
    1226:	a4 01       	movw	r20, r8
    1228:	93 01       	movw	r18, r6
    122a:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    122e:	7b 01       	movw	r14, r22
    1230:	8c 01       	movw	r16, r24
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	a4 01       	movw	r20, r8
    123c:	93 01       	movw	r18, r6
    123e:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1242:	ca 01       	movw	r24, r20
    1244:	b9 01       	movw	r22, r18
    1246:	21 96       	adiw	r28, 0x01	; 1
    1248:	2c ad       	ldd	r18, Y+60	; 0x3c
    124a:	3d ad       	ldd	r19, Y+61	; 0x3d
    124c:	4e ad       	ldd	r20, Y+62	; 0x3e
    124e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1250:	21 97       	sbiw	r28, 0x01	; 1
    1252:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	87 01       	movw	r16, r14
    125c:	ff 24       	eor	r15, r15
    125e:	ee 24       	eor	r14, r14
    1260:	a9 a8       	ldd	r10, Y+49	; 0x31
    1262:	ba a8       	ldd	r11, Y+50	; 0x32
    1264:	cb a8       	ldd	r12, Y+51	; 0x33
    1266:	dc a8       	ldd	r13, Y+52	; 0x34
    1268:	c6 01       	movw	r24, r12
    126a:	aa 27       	eor	r26, r26
    126c:	bb 27       	eor	r27, r27
    126e:	57 01       	movw	r10, r14
    1270:	68 01       	movw	r12, r16
    1272:	a8 2a       	or	r10, r24
    1274:	b9 2a       	or	r11, r25
    1276:	ca 2a       	or	r12, r26
    1278:	db 2a       	or	r13, r27
    127a:	a2 16       	cp	r10, r18
    127c:	b3 06       	cpc	r11, r19
    127e:	c4 06       	cpc	r12, r20
    1280:	d5 06       	cpc	r13, r21
    1282:	90 f4       	brcc	.+36     	; 0x12a8 <__umoddi3+0x286>
    1284:	a2 0c       	add	r10, r2
    1286:	b3 1c       	adc	r11, r3
    1288:	c4 1c       	adc	r12, r4
    128a:	d5 1c       	adc	r13, r5
    128c:	a2 14       	cp	r10, r2
    128e:	b3 04       	cpc	r11, r3
    1290:	c4 04       	cpc	r12, r4
    1292:	d5 04       	cpc	r13, r5
    1294:	48 f0       	brcs	.+18     	; 0x12a8 <__umoddi3+0x286>
    1296:	a2 16       	cp	r10, r18
    1298:	b3 06       	cpc	r11, r19
    129a:	c4 06       	cpc	r12, r20
    129c:	d5 06       	cpc	r13, r21
    129e:	20 f4       	brcc	.+8      	; 0x12a8 <__umoddi3+0x286>
    12a0:	a2 0c       	add	r10, r2
    12a2:	b3 1c       	adc	r11, r3
    12a4:	c4 1c       	adc	r12, r4
    12a6:	d5 1c       	adc	r13, r5
    12a8:	a2 1a       	sub	r10, r18
    12aa:	b3 0a       	sbc	r11, r19
    12ac:	c4 0a       	sbc	r12, r20
    12ae:	d5 0a       	sbc	r13, r21
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    12bc:	7b 01       	movw	r14, r22
    12be:	8c 01       	movw	r16, r24
    12c0:	c6 01       	movw	r24, r12
    12c2:	b5 01       	movw	r22, r10
    12c4:	a4 01       	movw	r20, r8
    12c6:	93 01       	movw	r18, r6
    12c8:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    12cc:	ca 01       	movw	r24, r20
    12ce:	b9 01       	movw	r22, r18
    12d0:	21 96       	adiw	r28, 0x01	; 1
    12d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12da:	21 97       	sbiw	r28, 0x01	; 1
    12dc:	ba c1       	rjmp	.+884    	; 0x1652 <__umoddi3+0x630>
    12de:	21 14       	cp	r2, r1
    12e0:	31 04       	cpc	r3, r1
    12e2:	41 04       	cpc	r4, r1
    12e4:	51 04       	cpc	r5, r1
    12e6:	71 f4       	brne	.+28     	; 0x1304 <__umoddi3+0x2e2>
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    12fc:	c9 01       	movw	r24, r18
    12fe:	da 01       	movw	r26, r20
    1300:	1c 01       	movw	r2, r24
    1302:	2d 01       	movw	r4, r26
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	20 16       	cp	r2, r16
    1308:	00 e0       	ldi	r16, 0x00	; 0
    130a:	30 06       	cpc	r3, r16
    130c:	01 e0       	ldi	r16, 0x01	; 1
    130e:	40 06       	cpc	r4, r16
    1310:	00 e0       	ldi	r16, 0x00	; 0
    1312:	50 06       	cpc	r5, r16
    1314:	88 f4       	brcc	.+34     	; 0x1338 <__umoddi3+0x316>
    1316:	1f ef       	ldi	r17, 0xFF	; 255
    1318:	21 16       	cp	r2, r17
    131a:	31 04       	cpc	r3, r1
    131c:	41 04       	cpc	r4, r1
    131e:	51 04       	cpc	r5, r1
    1320:	39 f0       	breq	.+14     	; 0x1330 <__umoddi3+0x30e>
    1322:	30 f0       	brcs	.+12     	; 0x1330 <__umoddi3+0x30e>
    1324:	68 e0       	ldi	r22, 0x08	; 8
    1326:	e6 2e       	mov	r14, r22
    1328:	f1 2c       	mov	r15, r1
    132a:	01 2d       	mov	r16, r1
    132c:	11 2d       	mov	r17, r1
    132e:	18 c0       	rjmp	.+48     	; 0x1360 <__umoddi3+0x33e>
    1330:	ee 24       	eor	r14, r14
    1332:	ff 24       	eor	r15, r15
    1334:	87 01       	movw	r16, r14
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <__umoddi3+0x33e>
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	24 16       	cp	r2, r20
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	34 06       	cpc	r3, r20
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	44 06       	cpc	r4, r20
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	54 06       	cpc	r5, r20
    1348:	30 f0       	brcs	.+12     	; 0x1356 <__umoddi3+0x334>
    134a:	58 e1       	ldi	r21, 0x18	; 24
    134c:	e5 2e       	mov	r14, r21
    134e:	f1 2c       	mov	r15, r1
    1350:	01 2d       	mov	r16, r1
    1352:	11 2d       	mov	r17, r1
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <__umoddi3+0x33e>
    1356:	40 e1       	ldi	r20, 0x10	; 16
    1358:	e4 2e       	mov	r14, r20
    135a:	f1 2c       	mov	r15, r1
    135c:	01 2d       	mov	r16, r1
    135e:	11 2d       	mov	r17, r1
    1360:	d2 01       	movw	r26, r4
    1362:	c1 01       	movw	r24, r2
    1364:	0e 2c       	mov	r0, r14
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__umoddi3+0x34e>
    1368:	b6 95       	lsr	r27
    136a:	a7 95       	ror	r26
    136c:	97 95       	ror	r25
    136e:	87 95       	ror	r24
    1370:	0a 94       	dec	r0
    1372:	d2 f7       	brpl	.-12     	; 0x1368 <__umoddi3+0x346>
    1374:	82 56       	subi	r24, 0x62	; 98
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	dc 01       	movw	r26, r24
    137a:	2c 91       	ld	r18, X
    137c:	30 e2       	ldi	r19, 0x20	; 32
    137e:	a3 2e       	mov	r10, r19
    1380:	b1 2c       	mov	r11, r1
    1382:	c1 2c       	mov	r12, r1
    1384:	d1 2c       	mov	r13, r1
    1386:	d6 01       	movw	r26, r12
    1388:	c5 01       	movw	r24, r10
    138a:	8e 19       	sub	r24, r14
    138c:	9f 09       	sbc	r25, r15
    138e:	a0 0b       	sbc	r26, r16
    1390:	b1 0b       	sbc	r27, r17
    1392:	7c 01       	movw	r14, r24
    1394:	8d 01       	movw	r16, r26
    1396:	e2 1a       	sub	r14, r18
    1398:	f1 08       	sbc	r15, r1
    139a:	01 09       	sbc	r16, r1
    139c:	11 09       	sbc	r17, r1
    139e:	e9 ae       	std	Y+57, r14	; 0x39
    13a0:	fa ae       	std	Y+58, r15	; 0x3a
    13a2:	0b af       	std	Y+59, r16	; 0x3b
    13a4:	1c af       	std	Y+60, r17	; 0x3c
    13a6:	e1 14       	cp	r14, r1
    13a8:	f1 04       	cpc	r15, r1
    13aa:	01 05       	cpc	r16, r1
    13ac:	11 05       	cpc	r17, r1
    13ae:	39 f4       	brne	.+14     	; 0x13be <__umoddi3+0x39c>
    13b0:	64 01       	movw	r12, r8
    13b2:	53 01       	movw	r10, r6
    13b4:	a2 18       	sub	r10, r2
    13b6:	b3 08       	sbc	r11, r3
    13b8:	c4 08       	sbc	r12, r4
    13ba:	d5 08       	sbc	r13, r5
    13bc:	e2 c0       	rjmp	.+452    	; 0x1582 <__umoddi3+0x560>
    13be:	f9 ac       	ldd	r15, Y+57	; 0x39
    13c0:	68 96       	adiw	r28, 0x18	; 24
    13c2:	ff ae       	std	Y+63, r15	; 0x3f
    13c4:	68 97       	sbiw	r28, 0x18	; 24
    13c6:	0f 2c       	mov	r0, r15
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <__umoddi3+0x3b0>
    13ca:	22 0c       	add	r2, r2
    13cc:	33 1c       	adc	r3, r3
    13ce:	44 1c       	adc	r4, r4
    13d0:	55 1c       	adc	r5, r5
    13d2:	0a 94       	dec	r0
    13d4:	d2 f7       	brpl	.-12     	; 0x13ca <__umoddi3+0x3a8>
    13d6:	8a 2d       	mov	r24, r10
    13d8:	8f 19       	sub	r24, r15
    13da:	64 01       	movw	r12, r8
    13dc:	53 01       	movw	r10, r6
    13de:	08 2e       	mov	r0, r24
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__umoddi3+0x3c8>
    13e2:	d6 94       	lsr	r13
    13e4:	c7 94       	ror	r12
    13e6:	b7 94       	ror	r11
    13e8:	a7 94       	ror	r10
    13ea:	0a 94       	dec	r0
    13ec:	d2 f7       	brpl	.-12     	; 0x13e2 <__umoddi3+0x3c0>
    13ee:	a4 01       	movw	r20, r8
    13f0:	93 01       	movw	r18, r6
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <__umoddi3+0x3da>
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	44 1f       	adc	r20, r20
    13fa:	55 1f       	adc	r21, r21
    13fc:	fa 94       	dec	r15
    13fe:	d2 f7       	brpl	.-12     	; 0x13f4 <__umoddi3+0x3d2>
    1400:	6c 96       	adiw	r28, 0x1c	; 28
    1402:	6c ac       	ldd	r6, Y+60	; 0x3c
    1404:	7d ac       	ldd	r7, Y+61	; 0x3d
    1406:	8e ac       	ldd	r8, Y+62	; 0x3e
    1408:	9f ac       	ldd	r9, Y+63	; 0x3f
    140a:	6c 97       	sbiw	r28, 0x1c	; 28
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__umoddi3+0x3f4>
    140e:	96 94       	lsr	r9
    1410:	87 94       	ror	r8
    1412:	77 94       	ror	r7
    1414:	67 94       	ror	r6
    1416:	8a 95       	dec	r24
    1418:	d2 f7       	brpl	.-12     	; 0x140e <__umoddi3+0x3ec>
    141a:	84 01       	movw	r16, r8
    141c:	73 01       	movw	r14, r6
    141e:	e2 2a       	or	r14, r18
    1420:	f3 2a       	or	r15, r19
    1422:	04 2b       	or	r16, r20
    1424:	15 2b       	or	r17, r21
    1426:	ed a6       	std	Y+45, r14	; 0x2d
    1428:	fe a6       	std	Y+46, r15	; 0x2e
    142a:	0f a7       	std	Y+47, r16	; 0x2f
    142c:	18 ab       	std	Y+48, r17	; 0x30
    142e:	32 01       	movw	r6, r4
    1430:	88 24       	eor	r8, r8
    1432:	99 24       	eor	r9, r9
    1434:	b2 01       	movw	r22, r4
    1436:	a1 01       	movw	r20, r2
    1438:	60 70       	andi	r22, 0x00	; 0
    143a:	70 70       	andi	r23, 0x00	; 0
    143c:	25 96       	adiw	r28, 0x05	; 5
    143e:	4c af       	std	Y+60, r20	; 0x3c
    1440:	5d af       	std	Y+61, r21	; 0x3d
    1442:	6e af       	std	Y+62, r22	; 0x3e
    1444:	7f af       	std	Y+63, r23	; 0x3f
    1446:	25 97       	sbiw	r28, 0x05	; 5
    1448:	c6 01       	movw	r24, r12
    144a:	b5 01       	movw	r22, r10
    144c:	a4 01       	movw	r20, r8
    144e:	93 01       	movw	r18, r6
    1450:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1454:	7b 01       	movw	r14, r22
    1456:	8c 01       	movw	r16, r24
    1458:	c6 01       	movw	r24, r12
    145a:	b5 01       	movw	r22, r10
    145c:	a4 01       	movw	r20, r8
    145e:	93 01       	movw	r18, r6
    1460:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1464:	ca 01       	movw	r24, r20
    1466:	b9 01       	movw	r22, r18
    1468:	25 96       	adiw	r28, 0x05	; 5
    146a:	2c ad       	ldd	r18, Y+60	; 0x3c
    146c:	3d ad       	ldd	r19, Y+61	; 0x3d
    146e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1470:	5f ad       	ldd	r21, Y+63	; 0x3f
    1472:	25 97       	sbiw	r28, 0x05	; 5
    1474:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	87 01       	movw	r16, r14
    147e:	ff 24       	eor	r15, r15
    1480:	ee 24       	eor	r14, r14
    1482:	ad a4       	ldd	r10, Y+45	; 0x2d
    1484:	be a4       	ldd	r11, Y+46	; 0x2e
    1486:	cf a4       	ldd	r12, Y+47	; 0x2f
    1488:	d8 a8       	ldd	r13, Y+48	; 0x30
    148a:	c6 01       	movw	r24, r12
    148c:	aa 27       	eor	r26, r26
    148e:	bb 27       	eor	r27, r27
    1490:	5c 01       	movw	r10, r24
    1492:	6d 01       	movw	r12, r26
    1494:	ae 28       	or	r10, r14
    1496:	bf 28       	or	r11, r15
    1498:	c0 2a       	or	r12, r16
    149a:	d1 2a       	or	r13, r17
    149c:	a2 16       	cp	r10, r18
    149e:	b3 06       	cpc	r11, r19
    14a0:	c4 06       	cpc	r12, r20
    14a2:	d5 06       	cpc	r13, r21
    14a4:	90 f4       	brcc	.+36     	; 0x14ca <__umoddi3+0x4a8>
    14a6:	a2 0c       	add	r10, r2
    14a8:	b3 1c       	adc	r11, r3
    14aa:	c4 1c       	adc	r12, r4
    14ac:	d5 1c       	adc	r13, r5
    14ae:	a2 14       	cp	r10, r2
    14b0:	b3 04       	cpc	r11, r3
    14b2:	c4 04       	cpc	r12, r4
    14b4:	d5 04       	cpc	r13, r5
    14b6:	48 f0       	brcs	.+18     	; 0x14ca <__umoddi3+0x4a8>
    14b8:	a2 16       	cp	r10, r18
    14ba:	b3 06       	cpc	r11, r19
    14bc:	c4 06       	cpc	r12, r20
    14be:	d5 06       	cpc	r13, r21
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <__umoddi3+0x4a8>
    14c2:	a2 0c       	add	r10, r2
    14c4:	b3 1c       	adc	r11, r3
    14c6:	c4 1c       	adc	r12, r4
    14c8:	d5 1c       	adc	r13, r5
    14ca:	a2 1a       	sub	r10, r18
    14cc:	b3 0a       	sbc	r11, r19
    14ce:	c4 0a       	sbc	r12, r20
    14d0:	d5 0a       	sbc	r13, r21
    14d2:	c6 01       	movw	r24, r12
    14d4:	b5 01       	movw	r22, r10
    14d6:	a4 01       	movw	r20, r8
    14d8:	93 01       	movw	r18, r6
    14da:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    14de:	7b 01       	movw	r14, r22
    14e0:	8c 01       	movw	r16, r24
    14e2:	c6 01       	movw	r24, r12
    14e4:	b5 01       	movw	r22, r10
    14e6:	a4 01       	movw	r20, r8
    14e8:	93 01       	movw	r18, r6
    14ea:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    14ee:	ca 01       	movw	r24, r20
    14f0:	b9 01       	movw	r22, r18
    14f2:	25 96       	adiw	r28, 0x05	; 5
    14f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    14f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    14f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    14fc:	25 97       	sbiw	r28, 0x05	; 5
    14fe:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	87 01       	movw	r16, r14
    1508:	ff 24       	eor	r15, r15
    150a:	ee 24       	eor	r14, r14
    150c:	8d a5       	ldd	r24, Y+45	; 0x2d
    150e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1510:	af a5       	ldd	r26, Y+47	; 0x2f
    1512:	b8 a9       	ldd	r27, Y+48	; 0x30
    1514:	a0 70       	andi	r26, 0x00	; 0
    1516:	b0 70       	andi	r27, 0x00	; 0
    1518:	57 01       	movw	r10, r14
    151a:	68 01       	movw	r12, r16
    151c:	a8 2a       	or	r10, r24
    151e:	b9 2a       	or	r11, r25
    1520:	ca 2a       	or	r12, r26
    1522:	db 2a       	or	r13, r27
    1524:	a2 16       	cp	r10, r18
    1526:	b3 06       	cpc	r11, r19
    1528:	c4 06       	cpc	r12, r20
    152a:	d5 06       	cpc	r13, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x530>
    152e:	a2 0c       	add	r10, r2
    1530:	b3 1c       	adc	r11, r3
    1532:	c4 1c       	adc	r12, r4
    1534:	d5 1c       	adc	r13, r5
    1536:	a2 14       	cp	r10, r2
    1538:	b3 04       	cpc	r11, r3
    153a:	c4 04       	cpc	r12, r4
    153c:	d5 04       	cpc	r13, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x530>
    1540:	a2 16       	cp	r10, r18
    1542:	b3 06       	cpc	r11, r19
    1544:	c4 06       	cpc	r12, r20
    1546:	d5 06       	cpc	r13, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x530>
    154a:	a2 0c       	add	r10, r2
    154c:	b3 1c       	adc	r11, r3
    154e:	c4 1c       	adc	r12, r4
    1550:	d5 1c       	adc	r13, r5
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	68 96       	adiw	r28, 0x18	; 24
    1560:	0f ac       	ldd	r0, Y+63	; 0x3f
    1562:	68 97       	sbiw	r28, 0x18	; 24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <__umoddi3+0x54c>
    1566:	ee 0c       	add	r14, r14
    1568:	ff 1c       	adc	r15, r15
    156a:	00 1f       	adc	r16, r16
    156c:	11 1f       	adc	r17, r17
    156e:	0a 94       	dec	r0
    1570:	d2 f7       	brpl	.-12     	; 0x1566 <__umoddi3+0x544>
    1572:	e9 aa       	std	Y+49, r14	; 0x31
    1574:	fa aa       	std	Y+50, r15	; 0x32
    1576:	0b ab       	std	Y+51, r16	; 0x33
    1578:	1c ab       	std	Y+52, r17	; 0x34
    157a:	a2 1a       	sub	r10, r18
    157c:	b3 0a       	sbc	r11, r19
    157e:	c4 0a       	sbc	r12, r20
    1580:	d5 0a       	sbc	r13, r21
    1582:	32 01       	movw	r6, r4
    1584:	88 24       	eor	r8, r8
    1586:	99 24       	eor	r9, r9
    1588:	b2 01       	movw	r22, r4
    158a:	a1 01       	movw	r20, r2
    158c:	60 70       	andi	r22, 0x00	; 0
    158e:	70 70       	andi	r23, 0x00	; 0
    1590:	29 96       	adiw	r28, 0x09	; 9
    1592:	4c af       	std	Y+60, r20	; 0x3c
    1594:	5d af       	std	Y+61, r21	; 0x3d
    1596:	6e af       	std	Y+62, r22	; 0x3e
    1598:	7f af       	std	Y+63, r23	; 0x3f
    159a:	29 97       	sbiw	r28, 0x09	; 9
    159c:	c6 01       	movw	r24, r12
    159e:	b5 01       	movw	r22, r10
    15a0:	a4 01       	movw	r20, r8
    15a2:	93 01       	movw	r18, r6
    15a4:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    15a8:	7b 01       	movw	r14, r22
    15aa:	8c 01       	movw	r16, r24
    15ac:	c6 01       	movw	r24, r12
    15ae:	b5 01       	movw	r22, r10
    15b0:	a4 01       	movw	r20, r8
    15b2:	93 01       	movw	r18, r6
    15b4:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    15b8:	ca 01       	movw	r24, r20
    15ba:	b9 01       	movw	r22, r18
    15bc:	29 96       	adiw	r28, 0x09	; 9
    15be:	2c ad       	ldd	r18, Y+60	; 0x3c
    15c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    15c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    15c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    15c6:	29 97       	sbiw	r28, 0x09	; 9
    15c8:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	87 01       	movw	r16, r14
    15d2:	ff 24       	eor	r15, r15
    15d4:	ee 24       	eor	r14, r14
    15d6:	a9 a8       	ldd	r10, Y+49	; 0x31
    15d8:	ba a8       	ldd	r11, Y+50	; 0x32
    15da:	cb a8       	ldd	r12, Y+51	; 0x33
    15dc:	dc a8       	ldd	r13, Y+52	; 0x34
    15de:	c6 01       	movw	r24, r12
    15e0:	aa 27       	eor	r26, r26
    15e2:	bb 27       	eor	r27, r27
    15e4:	57 01       	movw	r10, r14
    15e6:	68 01       	movw	r12, r16
    15e8:	a8 2a       	or	r10, r24
    15ea:	b9 2a       	or	r11, r25
    15ec:	ca 2a       	or	r12, r26
    15ee:	db 2a       	or	r13, r27
    15f0:	a2 16       	cp	r10, r18
    15f2:	b3 06       	cpc	r11, r19
    15f4:	c4 06       	cpc	r12, r20
    15f6:	d5 06       	cpc	r13, r21
    15f8:	90 f4       	brcc	.+36     	; 0x161e <__umoddi3+0x5fc>
    15fa:	a2 0c       	add	r10, r2
    15fc:	b3 1c       	adc	r11, r3
    15fe:	c4 1c       	adc	r12, r4
    1600:	d5 1c       	adc	r13, r5
    1602:	a2 14       	cp	r10, r2
    1604:	b3 04       	cpc	r11, r3
    1606:	c4 04       	cpc	r12, r4
    1608:	d5 04       	cpc	r13, r5
    160a:	48 f0       	brcs	.+18     	; 0x161e <__umoddi3+0x5fc>
    160c:	a2 16       	cp	r10, r18
    160e:	b3 06       	cpc	r11, r19
    1610:	c4 06       	cpc	r12, r20
    1612:	d5 06       	cpc	r13, r21
    1614:	20 f4       	brcc	.+8      	; 0x161e <__umoddi3+0x5fc>
    1616:	a2 0c       	add	r10, r2
    1618:	b3 1c       	adc	r11, r3
    161a:	c4 1c       	adc	r12, r4
    161c:	d5 1c       	adc	r13, r5
    161e:	a2 1a       	sub	r10, r18
    1620:	b3 0a       	sbc	r11, r19
    1622:	c4 0a       	sbc	r12, r20
    1624:	d5 0a       	sbc	r13, r21
    1626:	c6 01       	movw	r24, r12
    1628:	b5 01       	movw	r22, r10
    162a:	a4 01       	movw	r20, r8
    162c:	93 01       	movw	r18, r6
    162e:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1632:	7b 01       	movw	r14, r22
    1634:	8c 01       	movw	r16, r24
    1636:	c6 01       	movw	r24, r12
    1638:	b5 01       	movw	r22, r10
    163a:	a4 01       	movw	r20, r8
    163c:	93 01       	movw	r18, r6
    163e:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1642:	ca 01       	movw	r24, r20
    1644:	b9 01       	movw	r22, r18
    1646:	29 96       	adiw	r28, 0x09	; 9
    1648:	2c ad       	ldd	r18, Y+60	; 0x3c
    164a:	3d ad       	ldd	r19, Y+61	; 0x3d
    164c:	4e ad       	ldd	r20, Y+62	; 0x3e
    164e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1650:	29 97       	sbiw	r28, 0x09	; 9
    1652:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	87 01       	movw	r16, r14
    165c:	ff 24       	eor	r15, r15
    165e:	ee 24       	eor	r14, r14
    1660:	89 a9       	ldd	r24, Y+49	; 0x31
    1662:	9a a9       	ldd	r25, Y+50	; 0x32
    1664:	ab a9       	ldd	r26, Y+51	; 0x33
    1666:	bc a9       	ldd	r27, Y+52	; 0x34
    1668:	a0 70       	andi	r26, 0x00	; 0
    166a:	b0 70       	andi	r27, 0x00	; 0
    166c:	e8 2a       	or	r14, r24
    166e:	f9 2a       	or	r15, r25
    1670:	0a 2b       	or	r16, r26
    1672:	1b 2b       	or	r17, r27
    1674:	e2 16       	cp	r14, r18
    1676:	f3 06       	cpc	r15, r19
    1678:	04 07       	cpc	r16, r20
    167a:	15 07       	cpc	r17, r21
    167c:	90 f4       	brcc	.+36     	; 0x16a2 <__umoddi3+0x680>
    167e:	e2 0c       	add	r14, r2
    1680:	f3 1c       	adc	r15, r3
    1682:	04 1d       	adc	r16, r4
    1684:	15 1d       	adc	r17, r5
    1686:	e2 14       	cp	r14, r2
    1688:	f3 04       	cpc	r15, r3
    168a:	04 05       	cpc	r16, r4
    168c:	15 05       	cpc	r17, r5
    168e:	48 f0       	brcs	.+18     	; 0x16a2 <__umoddi3+0x680>
    1690:	e2 16       	cp	r14, r18
    1692:	f3 06       	cpc	r15, r19
    1694:	04 07       	cpc	r16, r20
    1696:	15 07       	cpc	r17, r21
    1698:	20 f4       	brcc	.+8      	; 0x16a2 <__umoddi3+0x680>
    169a:	e2 0c       	add	r14, r2
    169c:	f3 1c       	adc	r15, r3
    169e:	04 1d       	adc	r16, r4
    16a0:	15 1d       	adc	r17, r5
    16a2:	e2 1a       	sub	r14, r18
    16a4:	f3 0a       	sbc	r15, r19
    16a6:	04 0b       	sbc	r16, r20
    16a8:	15 0b       	sbc	r17, r21
    16aa:	d8 01       	movw	r26, r16
    16ac:	c7 01       	movw	r24, r14
    16ae:	09 ac       	ldd	r0, Y+57	; 0x39
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <__umoddi3+0x698>
    16b2:	b6 95       	lsr	r27
    16b4:	a7 95       	ror	r26
    16b6:	97 95       	ror	r25
    16b8:	87 95       	ror	r24
    16ba:	0a 94       	dec	r0
    16bc:	d2 f7       	brpl	.-12     	; 0x16b2 <__umoddi3+0x690>
    16be:	89 8b       	std	Y+17, r24	; 0x11
    16c0:	9a 8b       	std	Y+18, r25	; 0x12
    16c2:	ab 8b       	std	Y+19, r26	; 0x13
    16c4:	bc 8b       	std	Y+20, r27	; 0x14
    16c6:	1d 8a       	std	Y+21, r1	; 0x15
    16c8:	1e 8a       	std	Y+22, r1	; 0x16
    16ca:	1f 8a       	std	Y+23, r1	; 0x17
    16cc:	18 8e       	std	Y+24, r1	; 0x18
    16ce:	28 2f       	mov	r18, r24
    16d0:	3a 89       	ldd	r19, Y+18	; 0x12
    16d2:	4b 89       	ldd	r20, Y+19	; 0x13
    16d4:	5c 89       	ldd	r21, Y+20	; 0x14
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	0c c3       	rjmp	.+1560   	; 0x1cf2 <__umoddi3+0xcd0>
    16da:	6a 14       	cp	r6, r10
    16dc:	7b 04       	cpc	r7, r11
    16de:	8c 04       	cpc	r8, r12
    16e0:	9d 04       	cpc	r9, r13
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <__umoddi3+0x6c4>
    16e4:	09 c3       	rjmp	.+1554   	; 0x1cf8 <__umoddi3+0xcd6>
    16e6:	00 e0       	ldi	r16, 0x00	; 0
    16e8:	a0 16       	cp	r10, r16
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	b0 06       	cpc	r11, r16
    16ee:	01 e0       	ldi	r16, 0x01	; 1
    16f0:	c0 06       	cpc	r12, r16
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	d0 06       	cpc	r13, r16
    16f6:	88 f4       	brcc	.+34     	; 0x171a <__umoddi3+0x6f8>
    16f8:	1f ef       	ldi	r17, 0xFF	; 255
    16fa:	a1 16       	cp	r10, r17
    16fc:	b1 04       	cpc	r11, r1
    16fe:	c1 04       	cpc	r12, r1
    1700:	d1 04       	cpc	r13, r1
    1702:	39 f0       	breq	.+14     	; 0x1712 <__umoddi3+0x6f0>
    1704:	30 f0       	brcs	.+12     	; 0x1712 <__umoddi3+0x6f0>
    1706:	28 e0       	ldi	r18, 0x08	; 8
    1708:	e2 2e       	mov	r14, r18
    170a:	f1 2c       	mov	r15, r1
    170c:	01 2d       	mov	r16, r1
    170e:	11 2d       	mov	r17, r1
    1710:	18 c0       	rjmp	.+48     	; 0x1742 <__umoddi3+0x720>
    1712:	ee 24       	eor	r14, r14
    1714:	ff 24       	eor	r15, r15
    1716:	87 01       	movw	r16, r14
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <__umoddi3+0x720>
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	a4 16       	cp	r10, r20
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	b4 06       	cpc	r11, r20
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	c4 06       	cpc	r12, r20
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	d4 06       	cpc	r13, r20
    172a:	30 f0       	brcs	.+12     	; 0x1738 <__umoddi3+0x716>
    172c:	98 e1       	ldi	r25, 0x18	; 24
    172e:	e9 2e       	mov	r14, r25
    1730:	f1 2c       	mov	r15, r1
    1732:	01 2d       	mov	r16, r1
    1734:	11 2d       	mov	r17, r1
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <__umoddi3+0x720>
    1738:	80 e1       	ldi	r24, 0x10	; 16
    173a:	e8 2e       	mov	r14, r24
    173c:	f1 2c       	mov	r15, r1
    173e:	01 2d       	mov	r16, r1
    1740:	11 2d       	mov	r17, r1
    1742:	d6 01       	movw	r26, r12
    1744:	c5 01       	movw	r24, r10
    1746:	0e 2c       	mov	r0, r14
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__umoddi3+0x730>
    174a:	b6 95       	lsr	r27
    174c:	a7 95       	ror	r26
    174e:	97 95       	ror	r25
    1750:	87 95       	ror	r24
    1752:	0a 94       	dec	r0
    1754:	d2 f7       	brpl	.-12     	; 0x174a <__umoddi3+0x728>
    1756:	82 56       	subi	r24, 0x62	; 98
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	dc 01       	movw	r26, r24
    175c:	2c 91       	ld	r18, X
    175e:	80 e2       	ldi	r24, 0x20	; 32
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	8e 19       	sub	r24, r14
    1768:	9f 09       	sbc	r25, r15
    176a:	a0 0b       	sbc	r26, r16
    176c:	b1 0b       	sbc	r27, r17
    176e:	82 1b       	sub	r24, r18
    1770:	91 09       	sbc	r25, r1
    1772:	a1 09       	sbc	r26, r1
    1774:	b1 09       	sbc	r27, r1
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	a1 05       	cpc	r26, r1
    177a:	b1 05       	cpc	r27, r1
    177c:	09 f0       	breq	.+2      	; 0x1780 <__umoddi3+0x75e>
    177e:	4f c0       	rjmp	.+158    	; 0x181e <__umoddi3+0x7fc>
    1780:	a6 14       	cp	r10, r6
    1782:	b7 04       	cpc	r11, r7
    1784:	c8 04       	cpc	r12, r8
    1786:	d9 04       	cpc	r13, r9
    1788:	58 f0       	brcs	.+22     	; 0x17a0 <__umoddi3+0x77e>
    178a:	6c 96       	adiw	r28, 0x1c	; 28
    178c:	ec ac       	ldd	r14, Y+60	; 0x3c
    178e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1790:	0e ad       	ldd	r16, Y+62	; 0x3e
    1792:	1f ad       	ldd	r17, Y+63	; 0x3f
    1794:	6c 97       	sbiw	r28, 0x1c	; 28
    1796:	e2 14       	cp	r14, r2
    1798:	f3 04       	cpc	r15, r3
    179a:	04 05       	cpc	r16, r4
    179c:	15 05       	cpc	r17, r5
    179e:	68 f1       	brcs	.+90     	; 0x17fa <__umoddi3+0x7d8>
    17a0:	6c 96       	adiw	r28, 0x1c	; 28
    17a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    17aa:	6c 97       	sbiw	r28, 0x1c	; 28
    17ac:	e2 18       	sub	r14, r2
    17ae:	f3 08       	sbc	r15, r3
    17b0:	04 09       	sbc	r16, r4
    17b2:	15 09       	sbc	r17, r5
    17b4:	a4 01       	movw	r20, r8
    17b6:	93 01       	movw	r18, r6
    17b8:	2a 19       	sub	r18, r10
    17ba:	3b 09       	sbc	r19, r11
    17bc:	4c 09       	sbc	r20, r12
    17be:	5d 09       	sbc	r21, r13
    17c0:	aa 24       	eor	r10, r10
    17c2:	bb 24       	eor	r11, r11
    17c4:	65 01       	movw	r12, r10
    17c6:	6c 96       	adiw	r28, 0x1c	; 28
    17c8:	6c ad       	ldd	r22, Y+60	; 0x3c
    17ca:	7d ad       	ldd	r23, Y+61	; 0x3d
    17cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    17ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    17d0:	6c 97       	sbiw	r28, 0x1c	; 28
    17d2:	6e 15       	cp	r22, r14
    17d4:	7f 05       	cpc	r23, r15
    17d6:	80 07       	cpc	r24, r16
    17d8:	91 07       	cpc	r25, r17
    17da:	28 f4       	brcc	.+10     	; 0x17e6 <__umoddi3+0x7c4>
    17dc:	b1 e0       	ldi	r27, 0x01	; 1
    17de:	ab 2e       	mov	r10, r27
    17e0:	b1 2c       	mov	r11, r1
    17e2:	c1 2c       	mov	r12, r1
    17e4:	d1 2c       	mov	r13, r1
    17e6:	da 01       	movw	r26, r20
    17e8:	c9 01       	movw	r24, r18
    17ea:	8a 19       	sub	r24, r10
    17ec:	9b 09       	sbc	r25, r11
    17ee:	ac 09       	sbc	r26, r12
    17f0:	bd 09       	sbc	r27, r13
    17f2:	8d ab       	std	Y+53, r24	; 0x35
    17f4:	9e ab       	std	Y+54, r25	; 0x36
    17f6:	af ab       	std	Y+55, r26	; 0x37
    17f8:	b8 af       	std	Y+56, r27	; 0x38
    17fa:	e9 8a       	std	Y+17, r14	; 0x11
    17fc:	fa 8a       	std	Y+18, r15	; 0x12
    17fe:	0b 8b       	std	Y+19, r16	; 0x13
    1800:	1c 8b       	std	Y+20, r17	; 0x14
    1802:	6d a8       	ldd	r6, Y+53	; 0x35
    1804:	7e a8       	ldd	r7, Y+54	; 0x36
    1806:	8f a8       	ldd	r8, Y+55	; 0x37
    1808:	98 ac       	ldd	r9, Y+56	; 0x38
    180a:	6d 8a       	std	Y+21, r6	; 0x15
    180c:	7e 8a       	std	Y+22, r7	; 0x16
    180e:	8f 8a       	std	Y+23, r8	; 0x17
    1810:	98 8e       	std	Y+24, r9	; 0x18
    1812:	2e 2d       	mov	r18, r14
    1814:	3a 89       	ldd	r19, Y+18	; 0x12
    1816:	4b 89       	ldd	r20, Y+19	; 0x13
    1818:	5c 89       	ldd	r21, Y+20	; 0x14
    181a:	6d a9       	ldd	r22, Y+53	; 0x35
    181c:	6a c2       	rjmp	.+1236   	; 0x1cf2 <__umoddi3+0xcd0>
    181e:	67 96       	adiw	r28, 0x17	; 23
    1820:	8f af       	std	Y+63, r24	; 0x3f
    1822:	67 97       	sbiw	r28, 0x17	; 23
    1824:	a6 01       	movw	r20, r12
    1826:	95 01       	movw	r18, r10
    1828:	08 2e       	mov	r0, r24
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <__umoddi3+0x812>
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	0a 94       	dec	r0
    1836:	d2 f7       	brpl	.-12     	; 0x182c <__umoddi3+0x80a>
    1838:	a0 e2       	ldi	r26, 0x20	; 32
    183a:	aa 2e       	mov	r10, r26
    183c:	a8 1a       	sub	r10, r24
    183e:	66 96       	adiw	r28, 0x16	; 22
    1840:	af ae       	std	Y+63, r10	; 0x3f
    1842:	66 97       	sbiw	r28, 0x16	; 22
    1844:	d2 01       	movw	r26, r4
    1846:	c1 01       	movw	r24, r2
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <__umoddi3+0x830>
    184a:	b6 95       	lsr	r27
    184c:	a7 95       	ror	r26
    184e:	97 95       	ror	r25
    1850:	87 95       	ror	r24
    1852:	aa 94       	dec	r10
    1854:	d2 f7       	brpl	.-12     	; 0x184a <__umoddi3+0x828>
    1856:	6c 01       	movw	r12, r24
    1858:	7d 01       	movw	r14, r26
    185a:	c2 2a       	or	r12, r18
    185c:	d3 2a       	or	r13, r19
    185e:	e4 2a       	or	r14, r20
    1860:	f5 2a       	or	r15, r21
    1862:	c9 a6       	std	Y+41, r12	; 0x29
    1864:	da a6       	std	Y+42, r13	; 0x2a
    1866:	eb a6       	std	Y+43, r14	; 0x2b
    1868:	fc a6       	std	Y+44, r15	; 0x2c
    186a:	82 01       	movw	r16, r4
    186c:	71 01       	movw	r14, r2
    186e:	67 96       	adiw	r28, 0x17	; 23
    1870:	0f ac       	ldd	r0, Y+63	; 0x3f
    1872:	67 97       	sbiw	r28, 0x17	; 23
    1874:	04 c0       	rjmp	.+8      	; 0x187e <__umoddi3+0x85c>
    1876:	ee 0c       	add	r14, r14
    1878:	ff 1c       	adc	r15, r15
    187a:	00 1f       	adc	r16, r16
    187c:	11 1f       	adc	r17, r17
    187e:	0a 94       	dec	r0
    1880:	d2 f7       	brpl	.-12     	; 0x1876 <__umoddi3+0x854>
    1882:	ed a2       	std	Y+37, r14	; 0x25
    1884:	fe a2       	std	Y+38, r15	; 0x26
    1886:	0f a3       	std	Y+39, r16	; 0x27
    1888:	18 a7       	std	Y+40, r17	; 0x28
    188a:	64 01       	movw	r12, r8
    188c:	53 01       	movw	r10, r6
    188e:	66 96       	adiw	r28, 0x16	; 22
    1890:	0f ac       	ldd	r0, Y+63	; 0x3f
    1892:	66 97       	sbiw	r28, 0x16	; 22
    1894:	04 c0       	rjmp	.+8      	; 0x189e <__umoddi3+0x87c>
    1896:	d6 94       	lsr	r13
    1898:	c7 94       	ror	r12
    189a:	b7 94       	ror	r11
    189c:	a7 94       	ror	r10
    189e:	0a 94       	dec	r0
    18a0:	d2 f7       	brpl	.-12     	; 0x1896 <__umoddi3+0x874>
    18a2:	a4 01       	movw	r20, r8
    18a4:	93 01       	movw	r18, r6
    18a6:	67 96       	adiw	r28, 0x17	; 23
    18a8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18aa:	67 97       	sbiw	r28, 0x17	; 23
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <__umoddi3+0x894>
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	44 1f       	adc	r20, r20
    18b4:	55 1f       	adc	r21, r21
    18b6:	0a 94       	dec	r0
    18b8:	d2 f7       	brpl	.-12     	; 0x18ae <__umoddi3+0x88c>
    18ba:	6c 96       	adiw	r28, 0x1c	; 28
    18bc:	8c ad       	ldd	r24, Y+60	; 0x3c
    18be:	9d ad       	ldd	r25, Y+61	; 0x3d
    18c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    18c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    18c4:	6c 97       	sbiw	r28, 0x1c	; 28
    18c6:	66 96       	adiw	r28, 0x16	; 22
    18c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ca:	66 97       	sbiw	r28, 0x16	; 22
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__umoddi3+0x8b4>
    18ce:	b6 95       	lsr	r27
    18d0:	a7 95       	ror	r26
    18d2:	97 95       	ror	r25
    18d4:	87 95       	ror	r24
    18d6:	0a 94       	dec	r0
    18d8:	d2 f7       	brpl	.-12     	; 0x18ce <__umoddi3+0x8ac>
    18da:	3c 01       	movw	r6, r24
    18dc:	4d 01       	movw	r8, r26
    18de:	62 2a       	or	r6, r18
    18e0:	73 2a       	or	r7, r19
    18e2:	84 2a       	or	r8, r20
    18e4:	95 2a       	or	r9, r21
    18e6:	69 a2       	std	Y+33, r6	; 0x21
    18e8:	7a a2       	std	Y+34, r7	; 0x22
    18ea:	8b a2       	std	Y+35, r8	; 0x23
    18ec:	9c a2       	std	Y+36, r9	; 0x24
    18ee:	6c 96       	adiw	r28, 0x1c	; 28
    18f0:	ec ac       	ldd	r14, Y+60	; 0x3c
    18f2:	fd ac       	ldd	r15, Y+61	; 0x3d
    18f4:	0e ad       	ldd	r16, Y+62	; 0x3e
    18f6:	1f ad       	ldd	r17, Y+63	; 0x3f
    18f8:	6c 97       	sbiw	r28, 0x1c	; 28
    18fa:	67 96       	adiw	r28, 0x17	; 23
    18fc:	0f ac       	ldd	r0, Y+63	; 0x3f
    18fe:	67 97       	sbiw	r28, 0x17	; 23
    1900:	04 c0       	rjmp	.+8      	; 0x190a <__umoddi3+0x8e8>
    1902:	ee 0c       	add	r14, r14
    1904:	ff 1c       	adc	r15, r15
    1906:	00 1f       	adc	r16, r16
    1908:	11 1f       	adc	r17, r17
    190a:	0a 94       	dec	r0
    190c:	d2 f7       	brpl	.-12     	; 0x1902 <__umoddi3+0x8e0>
    190e:	ed 8e       	std	Y+29, r14	; 0x1d
    1910:	fe 8e       	std	Y+30, r15	; 0x1e
    1912:	0f 8f       	std	Y+31, r16	; 0x1f
    1914:	18 a3       	std	Y+32, r17	; 0x20
    1916:	49 a5       	ldd	r20, Y+41	; 0x29
    1918:	5a a5       	ldd	r21, Y+42	; 0x2a
    191a:	6b a5       	ldd	r22, Y+43	; 0x2b
    191c:	7c a5       	ldd	r23, Y+44	; 0x2c
    191e:	3b 01       	movw	r6, r22
    1920:	88 24       	eor	r8, r8
    1922:	99 24       	eor	r9, r9
    1924:	60 70       	andi	r22, 0x00	; 0
    1926:	70 70       	andi	r23, 0x00	; 0
    1928:	2d 96       	adiw	r28, 0x0d	; 13
    192a:	4c af       	std	Y+60, r20	; 0x3c
    192c:	5d af       	std	Y+61, r21	; 0x3d
    192e:	6e af       	std	Y+62, r22	; 0x3e
    1930:	7f af       	std	Y+63, r23	; 0x3f
    1932:	2d 97       	sbiw	r28, 0x0d	; 13
    1934:	c6 01       	movw	r24, r12
    1936:	b5 01       	movw	r22, r10
    1938:	a4 01       	movw	r20, r8
    193a:	93 01       	movw	r18, r6
    193c:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1940:	7b 01       	movw	r14, r22
    1942:	8c 01       	movw	r16, r24
    1944:	c6 01       	movw	r24, r12
    1946:	b5 01       	movw	r22, r10
    1948:	a4 01       	movw	r20, r8
    194a:	93 01       	movw	r18, r6
    194c:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    1950:	c9 01       	movw	r24, r18
    1952:	da 01       	movw	r26, r20
    1954:	1c 01       	movw	r2, r24
    1956:	2d 01       	movw	r4, r26
    1958:	c2 01       	movw	r24, r4
    195a:	b1 01       	movw	r22, r2
    195c:	2d 96       	adiw	r28, 0x0d	; 13
    195e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1960:	3d ad       	ldd	r19, Y+61	; 0x3d
    1962:	4e ad       	ldd	r20, Y+62	; 0x3e
    1964:	5f ad       	ldd	r21, Y+63	; 0x3f
    1966:	2d 97       	sbiw	r28, 0x0d	; 13
    1968:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	87 01       	movw	r16, r14
    1972:	ff 24       	eor	r15, r15
    1974:	ee 24       	eor	r14, r14
    1976:	a9 a0       	ldd	r10, Y+33	; 0x21
    1978:	ba a0       	ldd	r11, Y+34	; 0x22
    197a:	cb a0       	ldd	r12, Y+35	; 0x23
    197c:	dc a0       	ldd	r13, Y+36	; 0x24
    197e:	c6 01       	movw	r24, r12
    1980:	aa 27       	eor	r26, r26
    1982:	bb 27       	eor	r27, r27
    1984:	57 01       	movw	r10, r14
    1986:	68 01       	movw	r12, r16
    1988:	a8 2a       	or	r10, r24
    198a:	b9 2a       	or	r11, r25
    198c:	ca 2a       	or	r12, r26
    198e:	db 2a       	or	r13, r27
    1990:	a2 16       	cp	r10, r18
    1992:	b3 06       	cpc	r11, r19
    1994:	c4 06       	cpc	r12, r20
    1996:	d5 06       	cpc	r13, r21
    1998:	00 f5       	brcc	.+64     	; 0x19da <__umoddi3+0x9b8>
    199a:	08 94       	sec
    199c:	21 08       	sbc	r2, r1
    199e:	31 08       	sbc	r3, r1
    19a0:	41 08       	sbc	r4, r1
    19a2:	51 08       	sbc	r5, r1
    19a4:	e9 a4       	ldd	r14, Y+41	; 0x29
    19a6:	fa a4       	ldd	r15, Y+42	; 0x2a
    19a8:	0b a5       	ldd	r16, Y+43	; 0x2b
    19aa:	1c a5       	ldd	r17, Y+44	; 0x2c
    19ac:	ae 0c       	add	r10, r14
    19ae:	bf 1c       	adc	r11, r15
    19b0:	c0 1e       	adc	r12, r16
    19b2:	d1 1e       	adc	r13, r17
    19b4:	ae 14       	cp	r10, r14
    19b6:	bf 04       	cpc	r11, r15
    19b8:	c0 06       	cpc	r12, r16
    19ba:	d1 06       	cpc	r13, r17
    19bc:	70 f0       	brcs	.+28     	; 0x19da <__umoddi3+0x9b8>
    19be:	a2 16       	cp	r10, r18
    19c0:	b3 06       	cpc	r11, r19
    19c2:	c4 06       	cpc	r12, r20
    19c4:	d5 06       	cpc	r13, r21
    19c6:	48 f4       	brcc	.+18     	; 0x19da <__umoddi3+0x9b8>
    19c8:	08 94       	sec
    19ca:	21 08       	sbc	r2, r1
    19cc:	31 08       	sbc	r3, r1
    19ce:	41 08       	sbc	r4, r1
    19d0:	51 08       	sbc	r5, r1
    19d2:	ae 0c       	add	r10, r14
    19d4:	bf 1c       	adc	r11, r15
    19d6:	c0 1e       	adc	r12, r16
    19d8:	d1 1e       	adc	r13, r17
    19da:	a2 1a       	sub	r10, r18
    19dc:	b3 0a       	sbc	r11, r19
    19de:	c4 0a       	sbc	r12, r20
    19e0:	d5 0a       	sbc	r13, r21
    19e2:	c6 01       	movw	r24, r12
    19e4:	b5 01       	movw	r22, r10
    19e6:	a4 01       	movw	r20, r8
    19e8:	93 01       	movw	r18, r6
    19ea:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    19ee:	7b 01       	movw	r14, r22
    19f0:	8c 01       	movw	r16, r24
    19f2:	c6 01       	movw	r24, r12
    19f4:	b5 01       	movw	r22, r10
    19f6:	a4 01       	movw	r20, r8
    19f8:	93 01       	movw	r18, r6
    19fa:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    19fe:	c9 01       	movw	r24, r18
    1a00:	da 01       	movw	r26, r20
    1a02:	3c 01       	movw	r6, r24
    1a04:	4d 01       	movw	r8, r26
    1a06:	c4 01       	movw	r24, r8
    1a08:	b3 01       	movw	r22, r6
    1a0a:	2d 96       	adiw	r28, 0x0d	; 13
    1a0c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a0e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a10:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a12:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a14:	2d 97       	sbiw	r28, 0x0d	; 13
    1a16:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	87 01       	movw	r16, r14
    1a20:	ff 24       	eor	r15, r15
    1a22:	ee 24       	eor	r14, r14
    1a24:	89 a1       	ldd	r24, Y+33	; 0x21
    1a26:	9a a1       	ldd	r25, Y+34	; 0x22
    1a28:	ab a1       	ldd	r26, Y+35	; 0x23
    1a2a:	bc a1       	ldd	r27, Y+36	; 0x24
    1a2c:	a0 70       	andi	r26, 0x00	; 0
    1a2e:	b0 70       	andi	r27, 0x00	; 0
    1a30:	57 01       	movw	r10, r14
    1a32:	68 01       	movw	r12, r16
    1a34:	a8 2a       	or	r10, r24
    1a36:	b9 2a       	or	r11, r25
    1a38:	ca 2a       	or	r12, r26
    1a3a:	db 2a       	or	r13, r27
    1a3c:	a2 16       	cp	r10, r18
    1a3e:	b3 06       	cpc	r11, r19
    1a40:	c4 06       	cpc	r12, r20
    1a42:	d5 06       	cpc	r13, r21
    1a44:	00 f5       	brcc	.+64     	; 0x1a86 <__umoddi3+0xa64>
    1a46:	08 94       	sec
    1a48:	61 08       	sbc	r6, r1
    1a4a:	71 08       	sbc	r7, r1
    1a4c:	81 08       	sbc	r8, r1
    1a4e:	91 08       	sbc	r9, r1
    1a50:	69 a5       	ldd	r22, Y+41	; 0x29
    1a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	a6 0e       	add	r10, r22
    1a5a:	b7 1e       	adc	r11, r23
    1a5c:	c8 1e       	adc	r12, r24
    1a5e:	d9 1e       	adc	r13, r25
    1a60:	a6 16       	cp	r10, r22
    1a62:	b7 06       	cpc	r11, r23
    1a64:	c8 06       	cpc	r12, r24
    1a66:	d9 06       	cpc	r13, r25
    1a68:	70 f0       	brcs	.+28     	; 0x1a86 <__umoddi3+0xa64>
    1a6a:	a2 16       	cp	r10, r18
    1a6c:	b3 06       	cpc	r11, r19
    1a6e:	c4 06       	cpc	r12, r20
    1a70:	d5 06       	cpc	r13, r21
    1a72:	48 f4       	brcc	.+18     	; 0x1a86 <__umoddi3+0xa64>
    1a74:	08 94       	sec
    1a76:	61 08       	sbc	r6, r1
    1a78:	71 08       	sbc	r7, r1
    1a7a:	81 08       	sbc	r8, r1
    1a7c:	91 08       	sbc	r9, r1
    1a7e:	a6 0e       	add	r10, r22
    1a80:	b7 1e       	adc	r11, r23
    1a82:	c8 1e       	adc	r12, r24
    1a84:	d9 1e       	adc	r13, r25
    1a86:	d6 01       	movw	r26, r12
    1a88:	c5 01       	movw	r24, r10
    1a8a:	82 1b       	sub	r24, r18
    1a8c:	93 0b       	sbc	r25, r19
    1a8e:	a4 0b       	sbc	r26, r20
    1a90:	b5 0b       	sbc	r27, r21
    1a92:	89 8f       	std	Y+25, r24	; 0x19
    1a94:	9a 8f       	std	Y+26, r25	; 0x1a
    1a96:	ab 8f       	std	Y+27, r26	; 0x1b
    1a98:	bc 8f       	std	Y+28, r27	; 0x1c
    1a9a:	d1 01       	movw	r26, r2
    1a9c:	99 27       	eor	r25, r25
    1a9e:	88 27       	eor	r24, r24
    1aa0:	84 01       	movw	r16, r8
    1aa2:	73 01       	movw	r14, r6
    1aa4:	e8 2a       	or	r14, r24
    1aa6:	f9 2a       	or	r15, r25
    1aa8:	0a 2b       	or	r16, r26
    1aaa:	1b 2b       	or	r17, r27
    1aac:	4f ef       	ldi	r20, 0xFF	; 255
    1aae:	a4 2e       	mov	r10, r20
    1ab0:	4f ef       	ldi	r20, 0xFF	; 255
    1ab2:	b4 2e       	mov	r11, r20
    1ab4:	c1 2c       	mov	r12, r1
    1ab6:	d1 2c       	mov	r13, r1
    1ab8:	ae 20       	and	r10, r14
    1aba:	bf 20       	and	r11, r15
    1abc:	c0 22       	and	r12, r16
    1abe:	d1 22       	and	r13, r17
    1ac0:	78 01       	movw	r14, r16
    1ac2:	00 27       	eor	r16, r16
    1ac4:	11 27       	eor	r17, r17
    1ac6:	6d a0       	ldd	r6, Y+37	; 0x25
    1ac8:	7e a0       	ldd	r7, Y+38	; 0x26
    1aca:	8f a0       	ldd	r8, Y+39	; 0x27
    1acc:	98 a4       	ldd	r9, Y+40	; 0x28
    1ace:	4f ef       	ldi	r20, 0xFF	; 255
    1ad0:	5f ef       	ldi	r21, 0xFF	; 255
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	64 22       	and	r6, r20
    1ad8:	75 22       	and	r7, r21
    1ada:	86 22       	and	r8, r22
    1adc:	97 22       	and	r9, r23
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	af a1       	ldd	r26, Y+39	; 0x27
    1ae4:	b8 a5       	ldd	r27, Y+40	; 0x28
    1ae6:	bd 01       	movw	r22, r26
    1ae8:	88 27       	eor	r24, r24
    1aea:	99 27       	eor	r25, r25
    1aec:	65 96       	adiw	r28, 0x15	; 21
    1aee:	6c af       	std	Y+60, r22	; 0x3c
    1af0:	7d af       	std	Y+61, r23	; 0x3d
    1af2:	8e af       	std	Y+62, r24	; 0x3e
    1af4:	9f af       	std	Y+63, r25	; 0x3f
    1af6:	65 97       	sbiw	r28, 0x15	; 21
    1af8:	c6 01       	movw	r24, r12
    1afa:	b5 01       	movw	r22, r10
    1afc:	a4 01       	movw	r20, r8
    1afe:	93 01       	movw	r18, r6
    1b00:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1b04:	61 96       	adiw	r28, 0x11	; 17
    1b06:	6c af       	std	Y+60, r22	; 0x3c
    1b08:	7d af       	std	Y+61, r23	; 0x3d
    1b0a:	8e af       	std	Y+62, r24	; 0x3e
    1b0c:	9f af       	std	Y+63, r25	; 0x3f
    1b0e:	61 97       	sbiw	r28, 0x11	; 17
    1b10:	c6 01       	movw	r24, r12
    1b12:	b5 01       	movw	r22, r10
    1b14:	65 96       	adiw	r28, 0x15	; 21
    1b16:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b18:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b1e:	65 97       	sbiw	r28, 0x15	; 21
    1b20:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1b24:	1b 01       	movw	r2, r22
    1b26:	2c 01       	movw	r4, r24
    1b28:	c8 01       	movw	r24, r16
    1b2a:	b7 01       	movw	r22, r14
    1b2c:	a4 01       	movw	r20, r8
    1b2e:	93 01       	movw	r18, r6
    1b30:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1b34:	5b 01       	movw	r10, r22
    1b36:	6c 01       	movw	r12, r24
    1b38:	c8 01       	movw	r24, r16
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	65 96       	adiw	r28, 0x15	; 21
    1b3e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b40:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b42:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b44:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b46:	65 97       	sbiw	r28, 0x15	; 21
    1b48:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__mulsi3>
    1b4c:	7b 01       	movw	r14, r22
    1b4e:	8c 01       	movw	r16, r24
    1b50:	a6 01       	movw	r20, r12
    1b52:	95 01       	movw	r18, r10
    1b54:	22 0d       	add	r18, r2
    1b56:	33 1d       	adc	r19, r3
    1b58:	44 1d       	adc	r20, r4
    1b5a:	55 1d       	adc	r21, r5
    1b5c:	61 96       	adiw	r28, 0x11	; 17
    1b5e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b60:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b62:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b64:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b66:	61 97       	sbiw	r28, 0x11	; 17
    1b68:	c4 01       	movw	r24, r8
    1b6a:	aa 27       	eor	r26, r26
    1b6c:	bb 27       	eor	r27, r27
    1b6e:	28 0f       	add	r18, r24
    1b70:	39 1f       	adc	r19, r25
    1b72:	4a 1f       	adc	r20, r26
    1b74:	5b 1f       	adc	r21, r27
    1b76:	2a 15       	cp	r18, r10
    1b78:	3b 05       	cpc	r19, r11
    1b7a:	4c 05       	cpc	r20, r12
    1b7c:	5d 05       	cpc	r21, r13
    1b7e:	48 f4       	brcc	.+18     	; 0x1b92 <__umoddi3+0xb70>
    1b80:	81 2c       	mov	r8, r1
    1b82:	91 2c       	mov	r9, r1
    1b84:	e1 e0       	ldi	r30, 0x01	; 1
    1b86:	ae 2e       	mov	r10, r30
    1b88:	b1 2c       	mov	r11, r1
    1b8a:	e8 0c       	add	r14, r8
    1b8c:	f9 1c       	adc	r15, r9
    1b8e:	0a 1d       	adc	r16, r10
    1b90:	1b 1d       	adc	r17, r11
    1b92:	ca 01       	movw	r24, r20
    1b94:	aa 27       	eor	r26, r26
    1b96:	bb 27       	eor	r27, r27
    1b98:	57 01       	movw	r10, r14
    1b9a:	68 01       	movw	r12, r16
    1b9c:	a8 0e       	add	r10, r24
    1b9e:	b9 1e       	adc	r11, r25
    1ba0:	ca 1e       	adc	r12, r26
    1ba2:	db 1e       	adc	r13, r27
    1ba4:	a9 01       	movw	r20, r18
    1ba6:	33 27       	eor	r19, r19
    1ba8:	22 27       	eor	r18, r18
    1baa:	61 96       	adiw	r28, 0x11	; 17
    1bac:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bae:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bb0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bb2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bb4:	61 97       	sbiw	r28, 0x11	; 17
    1bb6:	a0 70       	andi	r26, 0x00	; 0
    1bb8:	b0 70       	andi	r27, 0x00	; 0
    1bba:	28 0f       	add	r18, r24
    1bbc:	39 1f       	adc	r19, r25
    1bbe:	4a 1f       	adc	r20, r26
    1bc0:	5b 1f       	adc	r21, r27
    1bc2:	e9 8c       	ldd	r14, Y+25	; 0x19
    1bc4:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1bc6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1bc8:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1bca:	ea 14       	cp	r14, r10
    1bcc:	fb 04       	cpc	r15, r11
    1bce:	0c 05       	cpc	r16, r12
    1bd0:	1d 05       	cpc	r17, r13
    1bd2:	70 f0       	brcs	.+28     	; 0x1bf0 <__umoddi3+0xbce>
    1bd4:	ae 14       	cp	r10, r14
    1bd6:	bf 04       	cpc	r11, r15
    1bd8:	c0 06       	cpc	r12, r16
    1bda:	d1 06       	cpc	r13, r17
    1bdc:	69 f5       	brne	.+90     	; 0x1c38 <__umoddi3+0xc16>
    1bde:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1be0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1be2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be4:	98 a1       	ldd	r25, Y+32	; 0x20
    1be6:	62 17       	cp	r22, r18
    1be8:	73 07       	cpc	r23, r19
    1bea:	84 07       	cpc	r24, r20
    1bec:	95 07       	cpc	r25, r21
    1bee:	20 f5       	brcc	.+72     	; 0x1c38 <__umoddi3+0xc16>
    1bf0:	da 01       	movw	r26, r20
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	6d a0       	ldd	r6, Y+37	; 0x25
    1bf6:	7e a0       	ldd	r7, Y+38	; 0x26
    1bf8:	8f a0       	ldd	r8, Y+39	; 0x27
    1bfa:	98 a4       	ldd	r9, Y+40	; 0x28
    1bfc:	86 19       	sub	r24, r6
    1bfe:	97 09       	sbc	r25, r7
    1c00:	a8 09       	sbc	r26, r8
    1c02:	b9 09       	sbc	r27, r9
    1c04:	e9 a4       	ldd	r14, Y+41	; 0x29
    1c06:	fa a4       	ldd	r15, Y+42	; 0x2a
    1c08:	0b a5       	ldd	r16, Y+43	; 0x2b
    1c0a:	1c a5       	ldd	r17, Y+44	; 0x2c
    1c0c:	ae 18       	sub	r10, r14
    1c0e:	bf 08       	sbc	r11, r15
    1c10:	c0 0a       	sbc	r12, r16
    1c12:	d1 0a       	sbc	r13, r17
    1c14:	ee 24       	eor	r14, r14
    1c16:	ff 24       	eor	r15, r15
    1c18:	87 01       	movw	r16, r14
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	4a 07       	cpc	r20, r26
    1c20:	5b 07       	cpc	r21, r27
    1c22:	28 f4       	brcc	.+10     	; 0x1c2e <__umoddi3+0xc0c>
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	e2 2e       	mov	r14, r18
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	01 2d       	mov	r16, r1
    1c2c:	11 2d       	mov	r17, r1
    1c2e:	ae 18       	sub	r10, r14
    1c30:	bf 08       	sbc	r11, r15
    1c32:	c0 0a       	sbc	r12, r16
    1c34:	d1 0a       	sbc	r13, r17
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <__umoddi3+0xc1a>
    1c38:	da 01       	movw	r26, r20
    1c3a:	c9 01       	movw	r24, r18
    1c3c:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1c3e:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1c40:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1c42:	98 a0       	ldd	r9, Y+32	; 0x20
    1c44:	68 1a       	sub	r6, r24
    1c46:	79 0a       	sbc	r7, r25
    1c48:	8a 0a       	sbc	r8, r26
    1c4a:	9b 0a       	sbc	r9, r27
    1c4c:	49 8d       	ldd	r20, Y+25	; 0x19
    1c4e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1c50:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1c52:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1c54:	4a 19       	sub	r20, r10
    1c56:	5b 09       	sbc	r21, r11
    1c58:	6c 09       	sbc	r22, r12
    1c5a:	7d 09       	sbc	r23, r13
    1c5c:	5a 01       	movw	r10, r20
    1c5e:	6b 01       	movw	r12, r22
    1c60:	22 24       	eor	r2, r2
    1c62:	33 24       	eor	r3, r3
    1c64:	21 01       	movw	r4, r2
    1c66:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c68:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c6e:	66 15       	cp	r22, r6
    1c70:	77 05       	cpc	r23, r7
    1c72:	88 05       	cpc	r24, r8
    1c74:	99 05       	cpc	r25, r9
    1c76:	28 f4       	brcc	.+10     	; 0x1c82 <__umoddi3+0xc60>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	28 2e       	mov	r2, r24
    1c7c:	31 2c       	mov	r3, r1
    1c7e:	41 2c       	mov	r4, r1
    1c80:	51 2c       	mov	r5, r1
    1c82:	86 01       	movw	r16, r12
    1c84:	75 01       	movw	r14, r10
    1c86:	e2 18       	sub	r14, r2
    1c88:	f3 08       	sbc	r15, r3
    1c8a:	04 09       	sbc	r16, r4
    1c8c:	15 09       	sbc	r17, r5
    1c8e:	a8 01       	movw	r20, r16
    1c90:	97 01       	movw	r18, r14
    1c92:	66 96       	adiw	r28, 0x16	; 22
    1c94:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c96:	66 97       	sbiw	r28, 0x16	; 22
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <__umoddi3+0xc80>
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	44 1f       	adc	r20, r20
    1ca0:	55 1f       	adc	r21, r21
    1ca2:	0a 94       	dec	r0
    1ca4:	d2 f7       	brpl	.-12     	; 0x1c9a <__umoddi3+0xc78>
    1ca6:	d4 01       	movw	r26, r8
    1ca8:	c3 01       	movw	r24, r6
    1caa:	67 96       	adiw	r28, 0x17	; 23
    1cac:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cae:	67 97       	sbiw	r28, 0x17	; 23
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <__umoddi3+0xc98>
    1cb2:	b6 95       	lsr	r27
    1cb4:	a7 95       	ror	r26
    1cb6:	97 95       	ror	r25
    1cb8:	87 95       	ror	r24
    1cba:	0a 94       	dec	r0
    1cbc:	d2 f7       	brpl	.-12     	; 0x1cb2 <__umoddi3+0xc90>
    1cbe:	28 2b       	or	r18, r24
    1cc0:	39 2b       	or	r19, r25
    1cc2:	4a 2b       	or	r20, r26
    1cc4:	5b 2b       	or	r21, r27
    1cc6:	29 8b       	std	Y+17, r18	; 0x11
    1cc8:	3a 8b       	std	Y+18, r19	; 0x12
    1cca:	4b 8b       	std	Y+19, r20	; 0x13
    1ccc:	5c 8b       	std	Y+20, r21	; 0x14
    1cce:	67 96       	adiw	r28, 0x17	; 23
    1cd0:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cd2:	67 97       	sbiw	r28, 0x17	; 23
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <__umoddi3+0xcbc>
    1cd6:	16 95       	lsr	r17
    1cd8:	07 95       	ror	r16
    1cda:	f7 94       	ror	r15
    1cdc:	e7 94       	ror	r14
    1cde:	0a 94       	dec	r0
    1ce0:	d2 f7       	brpl	.-12     	; 0x1cd6 <__umoddi3+0xcb4>
    1ce2:	ed 8a       	std	Y+21, r14	; 0x15
    1ce4:	fe 8a       	std	Y+22, r15	; 0x16
    1ce6:	0f 8b       	std	Y+23, r16	; 0x17
    1ce8:	18 8f       	std	Y+24, r17	; 0x18
    1cea:	3a 89       	ldd	r19, Y+18	; 0x12
    1cec:	4b 89       	ldd	r20, Y+19	; 0x13
    1cee:	5c 89       	ldd	r21, Y+20	; 0x14
    1cf0:	6e 2d       	mov	r22, r14
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	c5 5a       	subi	r28, 0xA5	; 165
    1cfa:	df 4f       	sbci	r29, 0xFF	; 255
    1cfc:	e2 e1       	ldi	r30, 0x12	; 18
    1cfe:	0c 94 21 31 	jmp	0x6242	; 0x6242 <__epilogue_restores__>

00001d02 <_fpadd_parts>:
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e7 e8       	ldi	r30, 0x87	; 135
    1d08:	fe e0       	ldi	r31, 0x0E	; 14
    1d0a:	0c 94 05 31 	jmp	0x620a	; 0x620a <__prologue_saves__>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	2b 01       	movw	r4, r22
    1d12:	fa 01       	movw	r30, r20
    1d14:	9c 91       	ld	r25, X
    1d16:	92 30       	cpi	r25, 0x02	; 2
    1d18:	08 f4       	brcc	.+2      	; 0x1d1c <_fpadd_parts+0x1a>
    1d1a:	39 c1       	rjmp	.+626    	; 0x1f8e <_fpadd_parts+0x28c>
    1d1c:	eb 01       	movw	r28, r22
    1d1e:	88 81       	ld	r24, Y
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <_fpadd_parts+0x24>
    1d24:	33 c1       	rjmp	.+614    	; 0x1f8c <_fpadd_parts+0x28a>
    1d26:	94 30       	cpi	r25, 0x04	; 4
    1d28:	69 f4       	brne	.+26     	; 0x1d44 <_fpadd_parts+0x42>
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <_fpadd_parts+0x2e>
    1d2e:	2f c1       	rjmp	.+606    	; 0x1f8e <_fpadd_parts+0x28c>
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	9c 91       	ld	r25, X
    1d34:	11 97       	sbiw	r26, 0x01	; 1
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	98 17       	cp	r25, r24
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <_fpadd_parts+0x3c>
    1d3c:	28 c1       	rjmp	.+592    	; 0x1f8e <_fpadd_parts+0x28c>
    1d3e:	a6 e9       	ldi	r26, 0x96	; 150
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	25 c1       	rjmp	.+586    	; 0x1f8e <_fpadd_parts+0x28c>
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <_fpadd_parts+0x48>
    1d48:	21 c1       	rjmp	.+578    	; 0x1f8c <_fpadd_parts+0x28a>
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	a9 f4       	brne	.+42     	; 0x1d78 <_fpadd_parts+0x76>
    1d4e:	92 30       	cpi	r25, 0x02	; 2
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <_fpadd_parts+0x52>
    1d52:	1d c1       	rjmp	.+570    	; 0x1f8e <_fpadd_parts+0x28c>
    1d54:	9a 01       	movw	r18, r20
    1d56:	ad 01       	movw	r20, r26
    1d58:	88 e0       	ldi	r24, 0x08	; 8
    1d5a:	ea 01       	movw	r28, r20
    1d5c:	09 90       	ld	r0, Y+
    1d5e:	ae 01       	movw	r20, r28
    1d60:	e9 01       	movw	r28, r18
    1d62:	09 92       	st	Y+, r0
    1d64:	9e 01       	movw	r18, r28
    1d66:	81 50       	subi	r24, 0x01	; 1
    1d68:	c1 f7       	brne	.-16     	; 0x1d5a <_fpadd_parts+0x58>
    1d6a:	e2 01       	movw	r28, r4
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	9c 91       	ld	r25, X
    1d72:	89 23       	and	r24, r25
    1d74:	81 83       	std	Z+1, r24	; 0x01
    1d76:	08 c1       	rjmp	.+528    	; 0x1f88 <_fpadd_parts+0x286>
    1d78:	92 30       	cpi	r25, 0x02	; 2
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <_fpadd_parts+0x7c>
    1d7c:	07 c1       	rjmp	.+526    	; 0x1f8c <_fpadd_parts+0x28a>
    1d7e:	12 96       	adiw	r26, 0x02	; 2
    1d80:	2d 90       	ld	r2, X+
    1d82:	3c 90       	ld	r3, X
    1d84:	13 97       	sbiw	r26, 0x03	; 3
    1d86:	eb 01       	movw	r28, r22
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	14 96       	adiw	r26, 0x04	; 4
    1d8e:	ad 90       	ld	r10, X+
    1d90:	bd 90       	ld	r11, X+
    1d92:	cd 90       	ld	r12, X+
    1d94:	dc 90       	ld	r13, X
    1d96:	17 97       	sbiw	r26, 0x07	; 7
    1d98:	ec 80       	ldd	r14, Y+4	; 0x04
    1d9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d9c:	0e 81       	ldd	r16, Y+6	; 0x06
    1d9e:	1f 81       	ldd	r17, Y+7	; 0x07
    1da0:	91 01       	movw	r18, r2
    1da2:	28 1b       	sub	r18, r24
    1da4:	39 0b       	sbc	r19, r25
    1da6:	b9 01       	movw	r22, r18
    1da8:	37 ff       	sbrs	r19, 7
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <_fpadd_parts+0xb2>
    1dac:	66 27       	eor	r22, r22
    1dae:	77 27       	eor	r23, r23
    1db0:	62 1b       	sub	r22, r18
    1db2:	73 0b       	sbc	r23, r19
    1db4:	60 32       	cpi	r22, 0x20	; 32
    1db6:	71 05       	cpc	r23, r1
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <_fpadd_parts+0xba>
    1dba:	61 c0       	rjmp	.+194    	; 0x1e7e <_fpadd_parts+0x17c>
    1dbc:	12 16       	cp	r1, r18
    1dbe:	13 06       	cpc	r1, r19
    1dc0:	6c f5       	brge	.+90     	; 0x1e1c <_fpadd_parts+0x11a>
    1dc2:	37 01       	movw	r6, r14
    1dc4:	48 01       	movw	r8, r16
    1dc6:	06 2e       	mov	r0, r22
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <_fpadd_parts+0xd0>
    1dca:	96 94       	lsr	r9
    1dcc:	87 94       	ror	r8
    1dce:	77 94       	ror	r7
    1dd0:	67 94       	ror	r6
    1dd2:	0a 94       	dec	r0
    1dd4:	d2 f7       	brpl	.-12     	; 0x1dca <_fpadd_parts+0xc8>
    1dd6:	21 e0       	ldi	r18, 0x01	; 1
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <_fpadd_parts+0xe6>
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	44 1f       	adc	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	6a 95       	dec	r22
    1dea:	d2 f7       	brpl	.-12     	; 0x1de0 <_fpadd_parts+0xde>
    1dec:	21 50       	subi	r18, 0x01	; 1
    1dee:	30 40       	sbci	r19, 0x00	; 0
    1df0:	40 40       	sbci	r20, 0x00	; 0
    1df2:	50 40       	sbci	r21, 0x00	; 0
    1df4:	2e 21       	and	r18, r14
    1df6:	3f 21       	and	r19, r15
    1df8:	40 23       	and	r20, r16
    1dfa:	51 23       	and	r21, r17
    1dfc:	21 15       	cp	r18, r1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	41 05       	cpc	r20, r1
    1e02:	51 05       	cpc	r21, r1
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <_fpadd_parts+0x10c>
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	79 01       	movw	r14, r18
    1e10:	8a 01       	movw	r16, r20
    1e12:	e6 28       	or	r14, r6
    1e14:	f7 28       	or	r15, r7
    1e16:	08 29       	or	r16, r8
    1e18:	19 29       	or	r17, r9
    1e1a:	3c c0       	rjmp	.+120    	; 0x1e94 <_fpadd_parts+0x192>
    1e1c:	23 2b       	or	r18, r19
    1e1e:	d1 f1       	breq	.+116    	; 0x1e94 <_fpadd_parts+0x192>
    1e20:	26 0e       	add	r2, r22
    1e22:	37 1e       	adc	r3, r23
    1e24:	35 01       	movw	r6, r10
    1e26:	46 01       	movw	r8, r12
    1e28:	06 2e       	mov	r0, r22
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <_fpadd_parts+0x132>
    1e2c:	96 94       	lsr	r9
    1e2e:	87 94       	ror	r8
    1e30:	77 94       	ror	r7
    1e32:	67 94       	ror	r6
    1e34:	0a 94       	dec	r0
    1e36:	d2 f7       	brpl	.-12     	; 0x1e2c <_fpadd_parts+0x12a>
    1e38:	21 e0       	ldi	r18, 0x01	; 1
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <_fpadd_parts+0x148>
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	44 1f       	adc	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	6a 95       	dec	r22
    1e4c:	d2 f7       	brpl	.-12     	; 0x1e42 <_fpadd_parts+0x140>
    1e4e:	21 50       	subi	r18, 0x01	; 1
    1e50:	30 40       	sbci	r19, 0x00	; 0
    1e52:	40 40       	sbci	r20, 0x00	; 0
    1e54:	50 40       	sbci	r21, 0x00	; 0
    1e56:	2a 21       	and	r18, r10
    1e58:	3b 21       	and	r19, r11
    1e5a:	4c 21       	and	r20, r12
    1e5c:	5d 21       	and	r21, r13
    1e5e:	21 15       	cp	r18, r1
    1e60:	31 05       	cpc	r19, r1
    1e62:	41 05       	cpc	r20, r1
    1e64:	51 05       	cpc	r21, r1
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <_fpadd_parts+0x16e>
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	59 01       	movw	r10, r18
    1e72:	6a 01       	movw	r12, r20
    1e74:	a6 28       	or	r10, r6
    1e76:	b7 28       	or	r11, r7
    1e78:	c8 28       	or	r12, r8
    1e7a:	d9 28       	or	r13, r9
    1e7c:	0b c0       	rjmp	.+22     	; 0x1e94 <_fpadd_parts+0x192>
    1e7e:	82 15       	cp	r24, r2
    1e80:	93 05       	cpc	r25, r3
    1e82:	2c f0       	brlt	.+10     	; 0x1e8e <_fpadd_parts+0x18c>
    1e84:	1c 01       	movw	r2, r24
    1e86:	aa 24       	eor	r10, r10
    1e88:	bb 24       	eor	r11, r11
    1e8a:	65 01       	movw	r12, r10
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <_fpadd_parts+0x192>
    1e8e:	ee 24       	eor	r14, r14
    1e90:	ff 24       	eor	r15, r15
    1e92:	87 01       	movw	r16, r14
    1e94:	11 96       	adiw	r26, 0x01	; 1
    1e96:	9c 91       	ld	r25, X
    1e98:	d2 01       	movw	r26, r4
    1e9a:	11 96       	adiw	r26, 0x01	; 1
    1e9c:	8c 91       	ld	r24, X
    1e9e:	98 17       	cp	r25, r24
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <_fpadd_parts+0x1a2>
    1ea2:	45 c0       	rjmp	.+138    	; 0x1f2e <_fpadd_parts+0x22c>
    1ea4:	99 23       	and	r25, r25
    1ea6:	39 f0       	breq	.+14     	; 0x1eb6 <_fpadd_parts+0x1b4>
    1ea8:	a8 01       	movw	r20, r16
    1eaa:	97 01       	movw	r18, r14
    1eac:	2a 19       	sub	r18, r10
    1eae:	3b 09       	sbc	r19, r11
    1eb0:	4c 09       	sbc	r20, r12
    1eb2:	5d 09       	sbc	r21, r13
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <_fpadd_parts+0x1c0>
    1eb6:	a6 01       	movw	r20, r12
    1eb8:	95 01       	movw	r18, r10
    1eba:	2e 19       	sub	r18, r14
    1ebc:	3f 09       	sbc	r19, r15
    1ebe:	40 0b       	sbc	r20, r16
    1ec0:	51 0b       	sbc	r21, r17
    1ec2:	57 fd       	sbrc	r21, 7
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <_fpadd_parts+0x1d4>
    1ec6:	11 82       	std	Z+1, r1	; 0x01
    1ec8:	33 82       	std	Z+3, r3	; 0x03
    1eca:	22 82       	std	Z+2, r2	; 0x02
    1ecc:	24 83       	std	Z+4, r18	; 0x04
    1ece:	35 83       	std	Z+5, r19	; 0x05
    1ed0:	46 83       	std	Z+6, r20	; 0x06
    1ed2:	57 83       	std	Z+7, r21	; 0x07
    1ed4:	1d c0       	rjmp	.+58     	; 0x1f10 <_fpadd_parts+0x20e>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	81 83       	std	Z+1, r24	; 0x01
    1eda:	33 82       	std	Z+3, r3	; 0x03
    1edc:	22 82       	std	Z+2, r2	; 0x02
    1ede:	88 27       	eor	r24, r24
    1ee0:	99 27       	eor	r25, r25
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	82 1b       	sub	r24, r18
    1ee6:	93 0b       	sbc	r25, r19
    1ee8:	a4 0b       	sbc	r26, r20
    1eea:	b5 0b       	sbc	r27, r21
    1eec:	84 83       	std	Z+4, r24	; 0x04
    1eee:	95 83       	std	Z+5, r25	; 0x05
    1ef0:	a6 83       	std	Z+6, r26	; 0x06
    1ef2:	b7 83       	std	Z+7, r27	; 0x07
    1ef4:	0d c0       	rjmp	.+26     	; 0x1f10 <_fpadd_parts+0x20e>
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	44 1f       	adc	r20, r20
    1efc:	55 1f       	adc	r21, r21
    1efe:	24 83       	std	Z+4, r18	; 0x04
    1f00:	35 83       	std	Z+5, r19	; 0x05
    1f02:	46 83       	std	Z+6, r20	; 0x06
    1f04:	57 83       	std	Z+7, r21	; 0x07
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	93 83       	std	Z+3, r25	; 0x03
    1f0e:	82 83       	std	Z+2, r24	; 0x02
    1f10:	24 81       	ldd	r18, Z+4	; 0x04
    1f12:	35 81       	ldd	r19, Z+5	; 0x05
    1f14:	46 81       	ldd	r20, Z+6	; 0x06
    1f16:	57 81       	ldd	r21, Z+7	; 0x07
    1f18:	da 01       	movw	r26, r20
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	a1 09       	sbc	r26, r1
    1f20:	b1 09       	sbc	r27, r1
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	af 4f       	sbci	r26, 0xFF	; 255
    1f28:	bf 43       	sbci	r27, 0x3F	; 63
    1f2a:	28 f3       	brcs	.-54     	; 0x1ef6 <_fpadd_parts+0x1f4>
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <_fpadd_parts+0x242>
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	33 82       	std	Z+3, r3	; 0x03
    1f32:	22 82       	std	Z+2, r2	; 0x02
    1f34:	ea 0c       	add	r14, r10
    1f36:	fb 1c       	adc	r15, r11
    1f38:	0c 1d       	adc	r16, r12
    1f3a:	1d 1d       	adc	r17, r13
    1f3c:	e4 82       	std	Z+4, r14	; 0x04
    1f3e:	f5 82       	std	Z+5, r15	; 0x05
    1f40:	06 83       	std	Z+6, r16	; 0x06
    1f42:	17 83       	std	Z+7, r17	; 0x07
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	80 83       	st	Z, r24
    1f48:	24 81       	ldd	r18, Z+4	; 0x04
    1f4a:	35 81       	ldd	r19, Z+5	; 0x05
    1f4c:	46 81       	ldd	r20, Z+6	; 0x06
    1f4e:	57 81       	ldd	r21, Z+7	; 0x07
    1f50:	57 ff       	sbrs	r21, 7
    1f52:	1a c0       	rjmp	.+52     	; 0x1f88 <_fpadd_parts+0x286>
    1f54:	c9 01       	movw	r24, r18
    1f56:	aa 27       	eor	r26, r26
    1f58:	97 fd       	sbrc	r25, 7
    1f5a:	a0 95       	com	r26
    1f5c:	ba 2f       	mov	r27, r26
    1f5e:	81 70       	andi	r24, 0x01	; 1
    1f60:	90 70       	andi	r25, 0x00	; 0
    1f62:	a0 70       	andi	r26, 0x00	; 0
    1f64:	b0 70       	andi	r27, 0x00	; 0
    1f66:	56 95       	lsr	r21
    1f68:	47 95       	ror	r20
    1f6a:	37 95       	ror	r19
    1f6c:	27 95       	ror	r18
    1f6e:	82 2b       	or	r24, r18
    1f70:	93 2b       	or	r25, r19
    1f72:	a4 2b       	or	r26, r20
    1f74:	b5 2b       	or	r27, r21
    1f76:	84 83       	std	Z+4, r24	; 0x04
    1f78:	95 83       	std	Z+5, r25	; 0x05
    1f7a:	a6 83       	std	Z+6, r26	; 0x06
    1f7c:	b7 83       	std	Z+7, r27	; 0x07
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	93 83       	std	Z+3, r25	; 0x03
    1f86:	82 83       	std	Z+2, r24	; 0x02
    1f88:	df 01       	movw	r26, r30
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <_fpadd_parts+0x28c>
    1f8c:	d2 01       	movw	r26, r4
    1f8e:	cd 01       	movw	r24, r26
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	e2 e1       	ldi	r30, 0x12	; 18
    1f96:	0c 94 21 31 	jmp	0x6242	; 0x6242 <__epilogue_restores__>

00001f9a <__subsf3>:
    1f9a:	a0 e2       	ldi	r26, 0x20	; 32
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1fa0:	ff e0       	ldi	r31, 0x0F	; 15
    1fa2:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__prologue_saves__+0x18>
    1fa6:	69 83       	std	Y+1, r22	; 0x01
    1fa8:	7a 83       	std	Y+2, r23	; 0x02
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	2d 83       	std	Y+5, r18	; 0x05
    1fb0:	3e 83       	std	Y+6, r19	; 0x06
    1fb2:	4f 83       	std	Y+7, r20	; 0x07
    1fb4:	58 87       	std	Y+8, r21	; 0x08
    1fb6:	e9 e0       	ldi	r30, 0x09	; 9
    1fb8:	ee 2e       	mov	r14, r30
    1fba:	f1 2c       	mov	r15, r1
    1fbc:	ec 0e       	add	r14, r28
    1fbe:	fd 1e       	adc	r15, r29
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    1fca:	8e 01       	movw	r16, r28
    1fcc:	0f 5e       	subi	r16, 0xEF	; 239
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	05 96       	adiw	r24, 0x05	; 5
    1fd4:	b8 01       	movw	r22, r16
    1fd6:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    1fda:	8a 89       	ldd	r24, Y+18	; 0x12
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	89 27       	eor	r24, r25
    1fe0:	8a 8b       	std	Y+18, r24	; 0x12
    1fe2:	c7 01       	movw	r24, r14
    1fe4:	b8 01       	movw	r22, r16
    1fe6:	ae 01       	movw	r20, r28
    1fe8:	47 5e       	subi	r20, 0xE7	; 231
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_fpadd_parts>
    1ff0:	0e 94 ad 13 	call	0x275a	; 0x275a <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e6 e0       	ldi	r30, 0x06	; 6
    1ff8:	0c 94 2d 31 	jmp	0x625a	; 0x625a <__epilogue_restores__+0x18>

00001ffc <__addsf3>:
    1ffc:	a0 e2       	ldi	r26, 0x20	; 32
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__prologue_saves__+0x18>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	f9 e0       	ldi	r31, 0x09	; 9
    201a:	ef 2e       	mov	r14, r31
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    203c:	c7 01       	movw	r24, r14
    203e:	b8 01       	movw	r22, r16
    2040:	ae 01       	movw	r20, r28
    2042:	47 5e       	subi	r20, 0xE7	; 231
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_fpadd_parts>
    204a:	0e 94 ad 13 	call	0x275a	; 0x275a <__pack_f>
    204e:	a0 96       	adiw	r28, 0x20	; 32
    2050:	e6 e0       	ldi	r30, 0x06	; 6
    2052:	0c 94 2d 31 	jmp	0x625a	; 0x625a <__epilogue_restores__+0x18>

00002056 <__mulsf3>:
    2056:	a0 e2       	ldi	r26, 0x20	; 32
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e1       	ldi	r31, 0x10	; 16
    205e:	0c 94 05 31 	jmp	0x620a	; 0x620a <__prologue_saves__>
    2062:	69 83       	std	Y+1, r22	; 0x01
    2064:	7a 83       	std	Y+2, r23	; 0x02
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	2d 83       	std	Y+5, r18	; 0x05
    206c:	3e 83       	std	Y+6, r19	; 0x06
    206e:	4f 83       	std	Y+7, r20	; 0x07
    2070:	58 87       	std	Y+8, r21	; 0x08
    2072:	ce 01       	movw	r24, r28
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	be 01       	movw	r22, r28
    2078:	67 5f       	subi	r22, 0xF7	; 247
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    2080:	ce 01       	movw	r24, r28
    2082:	05 96       	adiw	r24, 0x05	; 5
    2084:	be 01       	movw	r22, r28
    2086:	6f 5e       	subi	r22, 0xEF	; 239
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    208e:	99 85       	ldd	r25, Y+9	; 0x09
    2090:	92 30       	cpi	r25, 0x02	; 2
    2092:	88 f0       	brcs	.+34     	; 0x20b6 <__mulsf3+0x60>
    2094:	89 89       	ldd	r24, Y+17	; 0x11
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	c8 f0       	brcs	.+50     	; 0x20cc <__mulsf3+0x76>
    209a:	94 30       	cpi	r25, 0x04	; 4
    209c:	19 f4       	brne	.+6      	; 0x20a4 <__mulsf3+0x4e>
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	51 f4       	brne	.+20     	; 0x20b6 <__mulsf3+0x60>
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <__mulsf3+0x56>
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <__mulsf3+0x5c>
    20a8:	92 30       	cpi	r25, 0x02	; 2
    20aa:	81 f4       	brne	.+32     	; 0x20cc <__mulsf3+0x76>
    20ac:	86 e9       	ldi	r24, 0x96	; 150
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	c6 c0       	rjmp	.+396    	; 0x223e <__mulsf3+0x1e8>
    20b2:	92 30       	cpi	r25, 0x02	; 2
    20b4:	49 f4       	brne	.+18     	; 0x20c8 <__mulsf3+0x72>
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	8a 89       	ldd	r24, Y+18	; 0x12
    20bc:	98 13       	cpse	r25, r24
    20be:	21 e0       	ldi	r18, 0x01	; 1
    20c0:	2a 87       	std	Y+10, r18	; 0x0a
    20c2:	ce 01       	movw	r24, r28
    20c4:	09 96       	adiw	r24, 0x09	; 9
    20c6:	bb c0       	rjmp	.+374    	; 0x223e <__mulsf3+0x1e8>
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	49 f4       	brne	.+18     	; 0x20de <__mulsf3+0x88>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	8a 89       	ldd	r24, Y+18	; 0x12
    20d2:	98 13       	cpse	r25, r24
    20d4:	21 e0       	ldi	r18, 0x01	; 1
    20d6:	2a 8b       	std	Y+18, r18	; 0x12
    20d8:	ce 01       	movw	r24, r28
    20da:	41 96       	adiw	r24, 0x11	; 17
    20dc:	b0 c0       	rjmp	.+352    	; 0x223e <__mulsf3+0x1e8>
    20de:	2d 84       	ldd	r2, Y+13	; 0x0d
    20e0:	3e 84       	ldd	r3, Y+14	; 0x0e
    20e2:	4f 84       	ldd	r4, Y+15	; 0x0f
    20e4:	58 88       	ldd	r5, Y+16	; 0x10
    20e6:	6d 88       	ldd	r6, Y+21	; 0x15
    20e8:	7e 88       	ldd	r7, Y+22	; 0x16
    20ea:	8f 88       	ldd	r8, Y+23	; 0x17
    20ec:	98 8c       	ldd	r9, Y+24	; 0x18
    20ee:	ee 24       	eor	r14, r14
    20f0:	ff 24       	eor	r15, r15
    20f2:	87 01       	movw	r16, r14
    20f4:	aa 24       	eor	r10, r10
    20f6:	bb 24       	eor	r11, r11
    20f8:	65 01       	movw	r12, r10
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	e0 e0       	ldi	r30, 0x00	; 0
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	c1 01       	movw	r24, r2
    2108:	81 70       	andi	r24, 0x01	; 1
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	89 2b       	or	r24, r25
    210e:	e9 f0       	breq	.+58     	; 0x214a <__mulsf3+0xf4>
    2110:	e6 0c       	add	r14, r6
    2112:	f7 1c       	adc	r15, r7
    2114:	08 1d       	adc	r16, r8
    2116:	19 1d       	adc	r17, r9
    2118:	9a 01       	movw	r18, r20
    211a:	ab 01       	movw	r20, r22
    211c:	2a 0d       	add	r18, r10
    211e:	3b 1d       	adc	r19, r11
    2120:	4c 1d       	adc	r20, r12
    2122:	5d 1d       	adc	r21, r13
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a0 e0       	ldi	r26, 0x00	; 0
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e6 14       	cp	r14, r6
    212e:	f7 04       	cpc	r15, r7
    2130:	08 05       	cpc	r16, r8
    2132:	19 05       	cpc	r17, r9
    2134:	20 f4       	brcc	.+8      	; 0x213e <__mulsf3+0xe8>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	ba 01       	movw	r22, r20
    2140:	a9 01       	movw	r20, r18
    2142:	48 0f       	add	r20, r24
    2144:	59 1f       	adc	r21, r25
    2146:	6a 1f       	adc	r22, r26
    2148:	7b 1f       	adc	r23, r27
    214a:	aa 0c       	add	r10, r10
    214c:	bb 1c       	adc	r11, r11
    214e:	cc 1c       	adc	r12, r12
    2150:	dd 1c       	adc	r13, r13
    2152:	97 fe       	sbrs	r9, 7
    2154:	08 c0       	rjmp	.+16     	; 0x2166 <__mulsf3+0x110>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e0       	ldi	r26, 0x00	; 0
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	a8 2a       	or	r10, r24
    2160:	b9 2a       	or	r11, r25
    2162:	ca 2a       	or	r12, r26
    2164:	db 2a       	or	r13, r27
    2166:	31 96       	adiw	r30, 0x01	; 1
    2168:	e0 32       	cpi	r30, 0x20	; 32
    216a:	f1 05       	cpc	r31, r1
    216c:	49 f0       	breq	.+18     	; 0x2180 <__mulsf3+0x12a>
    216e:	66 0c       	add	r6, r6
    2170:	77 1c       	adc	r7, r7
    2172:	88 1c       	adc	r8, r8
    2174:	99 1c       	adc	r9, r9
    2176:	56 94       	lsr	r5
    2178:	47 94       	ror	r4
    217a:	37 94       	ror	r3
    217c:	27 94       	ror	r2
    217e:	c3 cf       	rjmp	.-122    	; 0x2106 <__mulsf3+0xb0>
    2180:	fa 85       	ldd	r31, Y+10	; 0x0a
    2182:	ea 89       	ldd	r30, Y+18	; 0x12
    2184:	2b 89       	ldd	r18, Y+19	; 0x13
    2186:	3c 89       	ldd	r19, Y+20	; 0x14
    2188:	8b 85       	ldd	r24, Y+11	; 0x0b
    218a:	9c 85       	ldd	r25, Y+12	; 0x0c
    218c:	28 0f       	add	r18, r24
    218e:	39 1f       	adc	r19, r25
    2190:	2e 5f       	subi	r18, 0xFE	; 254
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	17 c0       	rjmp	.+46     	; 0x21c4 <__mulsf3+0x16e>
    2196:	ca 01       	movw	r24, r20
    2198:	81 70       	andi	r24, 0x01	; 1
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	89 2b       	or	r24, r25
    219e:	61 f0       	breq	.+24     	; 0x21b8 <__mulsf3+0x162>
    21a0:	16 95       	lsr	r17
    21a2:	07 95       	ror	r16
    21a4:	f7 94       	ror	r15
    21a6:	e7 94       	ror	r14
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e8       	ldi	r27, 0x80	; 128
    21b0:	e8 2a       	or	r14, r24
    21b2:	f9 2a       	or	r15, r25
    21b4:	0a 2b       	or	r16, r26
    21b6:	1b 2b       	or	r17, r27
    21b8:	76 95       	lsr	r23
    21ba:	67 95       	ror	r22
    21bc:	57 95       	ror	r21
    21be:	47 95       	ror	r20
    21c0:	2f 5f       	subi	r18, 0xFF	; 255
    21c2:	3f 4f       	sbci	r19, 0xFF	; 255
    21c4:	77 fd       	sbrc	r23, 7
    21c6:	e7 cf       	rjmp	.-50     	; 0x2196 <__mulsf3+0x140>
    21c8:	0c c0       	rjmp	.+24     	; 0x21e2 <__mulsf3+0x18c>
    21ca:	44 0f       	add	r20, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	17 fd       	sbrc	r17, 7
    21d4:	41 60       	ori	r20, 0x01	; 1
    21d6:	ee 0c       	add	r14, r14
    21d8:	ff 1c       	adc	r15, r15
    21da:	00 1f       	adc	r16, r16
    21dc:	11 1f       	adc	r17, r17
    21de:	21 50       	subi	r18, 0x01	; 1
    21e0:	30 40       	sbci	r19, 0x00	; 0
    21e2:	40 30       	cpi	r20, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	59 07       	cpc	r21, r25
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	69 07       	cpc	r22, r25
    21ec:	90 e4       	ldi	r25, 0x40	; 64
    21ee:	79 07       	cpc	r23, r25
    21f0:	60 f3       	brcs	.-40     	; 0x21ca <__mulsf3+0x174>
    21f2:	2b 8f       	std	Y+27, r18	; 0x1b
    21f4:	3c 8f       	std	Y+28, r19	; 0x1c
    21f6:	db 01       	movw	r26, r22
    21f8:	ca 01       	movw	r24, r20
    21fa:	8f 77       	andi	r24, 0x7F	; 127
    21fc:	90 70       	andi	r25, 0x00	; 0
    21fe:	a0 70       	andi	r26, 0x00	; 0
    2200:	b0 70       	andi	r27, 0x00	; 0
    2202:	80 34       	cpi	r24, 0x40	; 64
    2204:	91 05       	cpc	r25, r1
    2206:	a1 05       	cpc	r26, r1
    2208:	b1 05       	cpc	r27, r1
    220a:	61 f4       	brne	.+24     	; 0x2224 <__mulsf3+0x1ce>
    220c:	47 fd       	sbrc	r20, 7
    220e:	0a c0       	rjmp	.+20     	; 0x2224 <__mulsf3+0x1ce>
    2210:	e1 14       	cp	r14, r1
    2212:	f1 04       	cpc	r15, r1
    2214:	01 05       	cpc	r16, r1
    2216:	11 05       	cpc	r17, r1
    2218:	29 f0       	breq	.+10     	; 0x2224 <__mulsf3+0x1ce>
    221a:	40 5c       	subi	r20, 0xC0	; 192
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	6f 4f       	sbci	r22, 0xFF	; 255
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	40 78       	andi	r20, 0x80	; 128
    2224:	1a 8e       	std	Y+26, r1	; 0x1a
    2226:	fe 17       	cp	r31, r30
    2228:	11 f0       	breq	.+4      	; 0x222e <__mulsf3+0x1d8>
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8a 8f       	std	Y+26, r24	; 0x1a
    222e:	4d 8f       	std	Y+29, r20	; 0x1d
    2230:	5e 8f       	std	Y+30, r21	; 0x1e
    2232:	6f 8f       	std	Y+31, r22	; 0x1f
    2234:	78 a3       	std	Y+32, r23	; 0x20
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	89 8f       	std	Y+25, r24	; 0x19
    223a:	ce 01       	movw	r24, r28
    223c:	49 96       	adiw	r24, 0x19	; 25
    223e:	0e 94 ad 13 	call	0x275a	; 0x275a <__pack_f>
    2242:	a0 96       	adiw	r28, 0x20	; 32
    2244:	e2 e1       	ldi	r30, 0x12	; 18
    2246:	0c 94 21 31 	jmp	0x6242	; 0x6242 <__epilogue_restores__>

0000224a <__divsf3>:
    224a:	a8 e1       	ldi	r26, 0x18	; 24
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	eb e2       	ldi	r30, 0x2B	; 43
    2250:	f1 e1       	ldi	r31, 0x11	; 17
    2252:	0c 94 0d 31 	jmp	0x621a	; 0x621a <__prologue_saves__+0x10>
    2256:	69 83       	std	Y+1, r22	; 0x01
    2258:	7a 83       	std	Y+2, r23	; 0x02
    225a:	8b 83       	std	Y+3, r24	; 0x03
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	2d 83       	std	Y+5, r18	; 0x05
    2260:	3e 83       	std	Y+6, r19	; 0x06
    2262:	4f 83       	std	Y+7, r20	; 0x07
    2264:	58 87       	std	Y+8, r21	; 0x08
    2266:	b9 e0       	ldi	r27, 0x09	; 9
    2268:	eb 2e       	mov	r14, r27
    226a:	f1 2c       	mov	r15, r1
    226c:	ec 0e       	add	r14, r28
    226e:	fd 1e       	adc	r15, r29
    2270:	ce 01       	movw	r24, r28
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	b7 01       	movw	r22, r14
    2276:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    227a:	8e 01       	movw	r16, r28
    227c:	0f 5e       	subi	r16, 0xEF	; 239
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	ce 01       	movw	r24, r28
    2282:	05 96       	adiw	r24, 0x05	; 5
    2284:	b8 01       	movw	r22, r16
    2286:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    228a:	29 85       	ldd	r18, Y+9	; 0x09
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	08 f4       	brcc	.+2      	; 0x2292 <__divsf3+0x48>
    2290:	7e c0       	rjmp	.+252    	; 0x238e <__divsf3+0x144>
    2292:	39 89       	ldd	r19, Y+17	; 0x11
    2294:	32 30       	cpi	r19, 0x02	; 2
    2296:	10 f4       	brcc	.+4      	; 0x229c <__divsf3+0x52>
    2298:	b8 01       	movw	r22, r16
    229a:	7c c0       	rjmp	.+248    	; 0x2394 <__divsf3+0x14a>
    229c:	8a 85       	ldd	r24, Y+10	; 0x0a
    229e:	9a 89       	ldd	r25, Y+18	; 0x12
    22a0:	89 27       	eor	r24, r25
    22a2:	8a 87       	std	Y+10, r24	; 0x0a
    22a4:	24 30       	cpi	r18, 0x04	; 4
    22a6:	11 f0       	breq	.+4      	; 0x22ac <__divsf3+0x62>
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	31 f4       	brne	.+12     	; 0x22b8 <__divsf3+0x6e>
    22ac:	23 17       	cp	r18, r19
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <__divsf3+0x68>
    22b0:	6e c0       	rjmp	.+220    	; 0x238e <__divsf3+0x144>
    22b2:	66 e9       	ldi	r22, 0x96	; 150
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	6e c0       	rjmp	.+220    	; 0x2394 <__divsf3+0x14a>
    22b8:	34 30       	cpi	r19, 0x04	; 4
    22ba:	39 f4       	brne	.+14     	; 0x22ca <__divsf3+0x80>
    22bc:	1d 86       	std	Y+13, r1	; 0x0d
    22be:	1e 86       	std	Y+14, r1	; 0x0e
    22c0:	1f 86       	std	Y+15, r1	; 0x0f
    22c2:	18 8a       	std	Y+16, r1	; 0x10
    22c4:	1c 86       	std	Y+12, r1	; 0x0c
    22c6:	1b 86       	std	Y+11, r1	; 0x0b
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <__divsf3+0x88>
    22ca:	32 30       	cpi	r19, 0x02	; 2
    22cc:	21 f4       	brne	.+8      	; 0x22d6 <__divsf3+0x8c>
    22ce:	84 e0       	ldi	r24, 0x04	; 4
    22d0:	89 87       	std	Y+9, r24	; 0x09
    22d2:	b7 01       	movw	r22, r14
    22d4:	5f c0       	rjmp	.+190    	; 0x2394 <__divsf3+0x14a>
    22d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    22d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    22da:	8b 89       	ldd	r24, Y+19	; 0x13
    22dc:	9c 89       	ldd	r25, Y+20	; 0x14
    22de:	28 1b       	sub	r18, r24
    22e0:	39 0b       	sbc	r19, r25
    22e2:	3c 87       	std	Y+12, r19	; 0x0c
    22e4:	2b 87       	std	Y+11, r18	; 0x0b
    22e6:	ed 84       	ldd	r14, Y+13	; 0x0d
    22e8:	fe 84       	ldd	r15, Y+14	; 0x0e
    22ea:	0f 85       	ldd	r16, Y+15	; 0x0f
    22ec:	18 89       	ldd	r17, Y+16	; 0x10
    22ee:	ad 88       	ldd	r10, Y+21	; 0x15
    22f0:	be 88       	ldd	r11, Y+22	; 0x16
    22f2:	cf 88       	ldd	r12, Y+23	; 0x17
    22f4:	d8 8c       	ldd	r13, Y+24	; 0x18
    22f6:	ea 14       	cp	r14, r10
    22f8:	fb 04       	cpc	r15, r11
    22fa:	0c 05       	cpc	r16, r12
    22fc:	1d 05       	cpc	r17, r13
    22fe:	40 f4       	brcc	.+16     	; 0x2310 <__divsf3+0xc6>
    2300:	ee 0c       	add	r14, r14
    2302:	ff 1c       	adc	r15, r15
    2304:	00 1f       	adc	r16, r16
    2306:	11 1f       	adc	r17, r17
    2308:	21 50       	subi	r18, 0x01	; 1
    230a:	30 40       	sbci	r19, 0x00	; 0
    230c:	3c 87       	std	Y+12, r19	; 0x0c
    230e:	2b 87       	std	Y+11, r18	; 0x0b
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e4       	ldi	r27, 0x40	; 64
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	ea 14       	cp	r14, r10
    2326:	fb 04       	cpc	r15, r11
    2328:	0c 05       	cpc	r16, r12
    232a:	1d 05       	cpc	r17, r13
    232c:	40 f0       	brcs	.+16     	; 0x233e <__divsf3+0xf4>
    232e:	28 2b       	or	r18, r24
    2330:	39 2b       	or	r19, r25
    2332:	4a 2b       	or	r20, r26
    2334:	5b 2b       	or	r21, r27
    2336:	ea 18       	sub	r14, r10
    2338:	fb 08       	sbc	r15, r11
    233a:	0c 09       	sbc	r16, r12
    233c:	1d 09       	sbc	r17, r13
    233e:	b6 95       	lsr	r27
    2340:	a7 95       	ror	r26
    2342:	97 95       	ror	r25
    2344:	87 95       	ror	r24
    2346:	ee 0c       	add	r14, r14
    2348:	ff 1c       	adc	r15, r15
    234a:	00 1f       	adc	r16, r16
    234c:	11 1f       	adc	r17, r17
    234e:	6f 5f       	subi	r22, 0xFF	; 255
    2350:	7f 4f       	sbci	r23, 0xFF	; 255
    2352:	6f 31       	cpi	r22, 0x1F	; 31
    2354:	71 05       	cpc	r23, r1
    2356:	31 f7       	brne	.-52     	; 0x2324 <__divsf3+0xda>
    2358:	da 01       	movw	r26, r20
    235a:	c9 01       	movw	r24, r18
    235c:	8f 77       	andi	r24, 0x7F	; 127
    235e:	90 70       	andi	r25, 0x00	; 0
    2360:	a0 70       	andi	r26, 0x00	; 0
    2362:	b0 70       	andi	r27, 0x00	; 0
    2364:	80 34       	cpi	r24, 0x40	; 64
    2366:	91 05       	cpc	r25, r1
    2368:	a1 05       	cpc	r26, r1
    236a:	b1 05       	cpc	r27, r1
    236c:	61 f4       	brne	.+24     	; 0x2386 <__divsf3+0x13c>
    236e:	27 fd       	sbrc	r18, 7
    2370:	0a c0       	rjmp	.+20     	; 0x2386 <__divsf3+0x13c>
    2372:	e1 14       	cp	r14, r1
    2374:	f1 04       	cpc	r15, r1
    2376:	01 05       	cpc	r16, r1
    2378:	11 05       	cpc	r17, r1
    237a:	29 f0       	breq	.+10     	; 0x2386 <__divsf3+0x13c>
    237c:	20 5c       	subi	r18, 0xC0	; 192
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	4f 4f       	sbci	r20, 0xFF	; 255
    2382:	5f 4f       	sbci	r21, 0xFF	; 255
    2384:	20 78       	andi	r18, 0x80	; 128
    2386:	2d 87       	std	Y+13, r18	; 0x0d
    2388:	3e 87       	std	Y+14, r19	; 0x0e
    238a:	4f 87       	std	Y+15, r20	; 0x0f
    238c:	58 8b       	std	Y+16, r21	; 0x10
    238e:	be 01       	movw	r22, r28
    2390:	67 5f       	subi	r22, 0xF7	; 247
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	cb 01       	movw	r24, r22
    2396:	0e 94 ad 13 	call	0x275a	; 0x275a <__pack_f>
    239a:	68 96       	adiw	r28, 0x18	; 24
    239c:	ea e0       	ldi	r30, 0x0A	; 10
    239e:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__epilogue_restores__+0x10>

000023a2 <__eqsf2>:
    23a2:	a8 e1       	ldi	r26, 0x18	; 24
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e7 ed       	ldi	r30, 0xD7	; 215
    23a8:	f1 e1       	ldi	r31, 0x11	; 17
    23aa:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__prologue_saves__+0x18>
    23ae:	69 83       	std	Y+1, r22	; 0x01
    23b0:	7a 83       	std	Y+2, r23	; 0x02
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	2d 83       	std	Y+5, r18	; 0x05
    23b8:	3e 83       	std	Y+6, r19	; 0x06
    23ba:	4f 83       	std	Y+7, r20	; 0x07
    23bc:	58 87       	std	Y+8, r21	; 0x08
    23be:	89 e0       	ldi	r24, 0x09	; 9
    23c0:	e8 2e       	mov	r14, r24
    23c2:	f1 2c       	mov	r15, r1
    23c4:	ec 0e       	add	r14, r28
    23c6:	fd 1e       	adc	r15, r29
    23c8:	ce 01       	movw	r24, r28
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	b7 01       	movw	r22, r14
    23ce:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    23d2:	8e 01       	movw	r16, r28
    23d4:	0f 5e       	subi	r16, 0xEF	; 239
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	ce 01       	movw	r24, r28
    23da:	05 96       	adiw	r24, 0x05	; 5
    23dc:	b8 01       	movw	r22, r16
    23de:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	40 f0       	brcs	.+16     	; 0x23f8 <__eqsf2+0x56>
    23e8:	89 89       	ldd	r24, Y+17	; 0x11
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	28 f0       	brcs	.+10     	; 0x23f8 <__eqsf2+0x56>
    23ee:	c7 01       	movw	r24, r14
    23f0:	b8 01       	movw	r22, r16
    23f2:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__fpcmp_parts_f>
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <__eqsf2+0x58>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	68 96       	adiw	r28, 0x18	; 24
    23fc:	e6 e0       	ldi	r30, 0x06	; 6
    23fe:	0c 94 2d 31 	jmp	0x625a	; 0x625a <__epilogue_restores__+0x18>

00002402 <__gtsf2>:
    2402:	a8 e1       	ldi	r26, 0x18	; 24
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e0       	ldi	r30, 0x07	; 7
    2408:	f2 e1       	ldi	r31, 0x12	; 18
    240a:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__prologue_saves__+0x18>
    240e:	69 83       	std	Y+1, r22	; 0x01
    2410:	7a 83       	std	Y+2, r23	; 0x02
    2412:	8b 83       	std	Y+3, r24	; 0x03
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	2d 83       	std	Y+5, r18	; 0x05
    2418:	3e 83       	std	Y+6, r19	; 0x06
    241a:	4f 83       	std	Y+7, r20	; 0x07
    241c:	58 87       	std	Y+8, r21	; 0x08
    241e:	89 e0       	ldi	r24, 0x09	; 9
    2420:	e8 2e       	mov	r14, r24
    2422:	f1 2c       	mov	r15, r1
    2424:	ec 0e       	add	r14, r28
    2426:	fd 1e       	adc	r15, r29
    2428:	ce 01       	movw	r24, r28
    242a:	01 96       	adiw	r24, 0x01	; 1
    242c:	b7 01       	movw	r22, r14
    242e:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    2432:	8e 01       	movw	r16, r28
    2434:	0f 5e       	subi	r16, 0xEF	; 239
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	ce 01       	movw	r24, r28
    243a:	05 96       	adiw	r24, 0x05	; 5
    243c:	b8 01       	movw	r22, r16
    243e:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	40 f0       	brcs	.+16     	; 0x2458 <__gtsf2+0x56>
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	28 f0       	brcs	.+10     	; 0x2458 <__gtsf2+0x56>
    244e:	c7 01       	movw	r24, r14
    2450:	b8 01       	movw	r22, r16
    2452:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__fpcmp_parts_f>
    2456:	01 c0       	rjmp	.+2      	; 0x245a <__gtsf2+0x58>
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	68 96       	adiw	r28, 0x18	; 24
    245c:	e6 e0       	ldi	r30, 0x06	; 6
    245e:	0c 94 2d 31 	jmp	0x625a	; 0x625a <__epilogue_restores__+0x18>

00002462 <__gesf2>:
    2462:	a8 e1       	ldi	r26, 0x18	; 24
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e3       	ldi	r30, 0x37	; 55
    2468:	f2 e1       	ldi	r31, 0x12	; 18
    246a:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__prologue_saves__+0x18>
    246e:	69 83       	std	Y+1, r22	; 0x01
    2470:	7a 83       	std	Y+2, r23	; 0x02
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	2d 83       	std	Y+5, r18	; 0x05
    2478:	3e 83       	std	Y+6, r19	; 0x06
    247a:	4f 83       	std	Y+7, r20	; 0x07
    247c:	58 87       	std	Y+8, r21	; 0x08
    247e:	89 e0       	ldi	r24, 0x09	; 9
    2480:	e8 2e       	mov	r14, r24
    2482:	f1 2c       	mov	r15, r1
    2484:	ec 0e       	add	r14, r28
    2486:	fd 1e       	adc	r15, r29
    2488:	ce 01       	movw	r24, r28
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	b7 01       	movw	r22, r14
    248e:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    2492:	8e 01       	movw	r16, r28
    2494:	0f 5e       	subi	r16, 0xEF	; 239
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	ce 01       	movw	r24, r28
    249a:	05 96       	adiw	r24, 0x05	; 5
    249c:	b8 01       	movw	r22, r16
    249e:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	40 f0       	brcs	.+16     	; 0x24b8 <__gesf2+0x56>
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	28 f0       	brcs	.+10     	; 0x24b8 <__gesf2+0x56>
    24ae:	c7 01       	movw	r24, r14
    24b0:	b8 01       	movw	r22, r16
    24b2:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__fpcmp_parts_f>
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <__gesf2+0x58>
    24b8:	8f ef       	ldi	r24, 0xFF	; 255
    24ba:	68 96       	adiw	r28, 0x18	; 24
    24bc:	e6 e0       	ldi	r30, 0x06	; 6
    24be:	0c 94 2d 31 	jmp	0x625a	; 0x625a <__epilogue_restores__+0x18>

000024c2 <__ltsf2>:
    24c2:	a8 e1       	ldi	r26, 0x18	; 24
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e6       	ldi	r30, 0x67	; 103
    24c8:	f2 e1       	ldi	r31, 0x12	; 18
    24ca:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__prologue_saves__+0x18>
    24ce:	69 83       	std	Y+1, r22	; 0x01
    24d0:	7a 83       	std	Y+2, r23	; 0x02
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	2d 83       	std	Y+5, r18	; 0x05
    24d8:	3e 83       	std	Y+6, r19	; 0x06
    24da:	4f 83       	std	Y+7, r20	; 0x07
    24dc:	58 87       	std	Y+8, r21	; 0x08
    24de:	89 e0       	ldi	r24, 0x09	; 9
    24e0:	e8 2e       	mov	r14, r24
    24e2:	f1 2c       	mov	r15, r1
    24e4:	ec 0e       	add	r14, r28
    24e6:	fd 1e       	adc	r15, r29
    24e8:	ce 01       	movw	r24, r28
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	b7 01       	movw	r22, r14
    24ee:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    24f2:	8e 01       	movw	r16, r28
    24f4:	0f 5e       	subi	r16, 0xEF	; 239
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	ce 01       	movw	r24, r28
    24fa:	05 96       	adiw	r24, 0x05	; 5
    24fc:	b8 01       	movw	r22, r16
    24fe:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	82 30       	cpi	r24, 0x02	; 2
    2506:	40 f0       	brcs	.+16     	; 0x2518 <__ltsf2+0x56>
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	82 30       	cpi	r24, 0x02	; 2
    250c:	28 f0       	brcs	.+10     	; 0x2518 <__ltsf2+0x56>
    250e:	c7 01       	movw	r24, r14
    2510:	b8 01       	movw	r22, r16
    2512:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__fpcmp_parts_f>
    2516:	01 c0       	rjmp	.+2      	; 0x251a <__ltsf2+0x58>
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	68 96       	adiw	r28, 0x18	; 24
    251c:	e6 e0       	ldi	r30, 0x06	; 6
    251e:	0c 94 2d 31 	jmp	0x625a	; 0x625a <__epilogue_restores__+0x18>

00002522 <__fixsfsi>:
    2522:	ac e0       	ldi	r26, 0x0C	; 12
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e7 e9       	ldi	r30, 0x97	; 151
    2528:	f2 e1       	ldi	r31, 0x12	; 18
    252a:	0c 94 15 31 	jmp	0x622a	; 0x622a <__prologue_saves__+0x20>
    252e:	69 83       	std	Y+1, r22	; 0x01
    2530:	7a 83       	std	Y+2, r23	; 0x02
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	ce 01       	movw	r24, r28
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	be 01       	movw	r22, r28
    253c:	6b 5f       	subi	r22, 0xFB	; 251
    253e:	7f 4f       	sbci	r23, 0xFF	; 255
    2540:	0e 94 82 14 	call	0x2904	; 0x2904 <__unpack_f>
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	61 f1       	breq	.+88     	; 0x25a2 <__fixsfsi+0x80>
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	50 f1       	brcs	.+84     	; 0x25a2 <__fixsfsi+0x80>
    254e:	84 30       	cpi	r24, 0x04	; 4
    2550:	21 f4       	brne	.+8      	; 0x255a <__fixsfsi+0x38>
    2552:	8e 81       	ldd	r24, Y+6	; 0x06
    2554:	88 23       	and	r24, r24
    2556:	51 f1       	breq	.+84     	; 0x25ac <__fixsfsi+0x8a>
    2558:	2e c0       	rjmp	.+92     	; 0x25b6 <__fixsfsi+0x94>
    255a:	2f 81       	ldd	r18, Y+7	; 0x07
    255c:	38 85       	ldd	r19, Y+8	; 0x08
    255e:	37 fd       	sbrc	r19, 7
    2560:	20 c0       	rjmp	.+64     	; 0x25a2 <__fixsfsi+0x80>
    2562:	6e 81       	ldd	r22, Y+6	; 0x06
    2564:	2f 31       	cpi	r18, 0x1F	; 31
    2566:	31 05       	cpc	r19, r1
    2568:	1c f0       	brlt	.+6      	; 0x2570 <__fixsfsi+0x4e>
    256a:	66 23       	and	r22, r22
    256c:	f9 f0       	breq	.+62     	; 0x25ac <__fixsfsi+0x8a>
    256e:	23 c0       	rjmp	.+70     	; 0x25b6 <__fixsfsi+0x94>
    2570:	8e e1       	ldi	r24, 0x1E	; 30
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	82 1b       	sub	r24, r18
    2576:	93 0b       	sbc	r25, r19
    2578:	29 85       	ldd	r18, Y+9	; 0x09
    257a:	3a 85       	ldd	r19, Y+10	; 0x0a
    257c:	4b 85       	ldd	r20, Y+11	; 0x0b
    257e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2580:	04 c0       	rjmp	.+8      	; 0x258a <__fixsfsi+0x68>
    2582:	56 95       	lsr	r21
    2584:	47 95       	ror	r20
    2586:	37 95       	ror	r19
    2588:	27 95       	ror	r18
    258a:	8a 95       	dec	r24
    258c:	d2 f7       	brpl	.-12     	; 0x2582 <__fixsfsi+0x60>
    258e:	66 23       	and	r22, r22
    2590:	b1 f0       	breq	.+44     	; 0x25be <__fixsfsi+0x9c>
    2592:	50 95       	com	r21
    2594:	40 95       	com	r20
    2596:	30 95       	com	r19
    2598:	21 95       	neg	r18
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	4f 4f       	sbci	r20, 0xFF	; 255
    259e:	5f 4f       	sbci	r21, 0xFF	; 255
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <__fixsfsi+0x9c>
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <__fixsfsi+0x9c>
    25ac:	2f ef       	ldi	r18, 0xFF	; 255
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f ef       	ldi	r20, 0xFF	; 255
    25b2:	5f e7       	ldi	r21, 0x7F	; 127
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__fixsfsi+0x9c>
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	50 e8       	ldi	r21, 0x80	; 128
    25be:	b9 01       	movw	r22, r18
    25c0:	ca 01       	movw	r24, r20
    25c2:	2c 96       	adiw	r28, 0x0c	; 12
    25c4:	e2 e0       	ldi	r30, 0x02	; 2
    25c6:	0c 94 31 31 	jmp	0x6262	; 0x6262 <__epilogue_restores__+0x20>

000025ca <__floatunsisf>:
    25ca:	a8 e0       	ldi	r26, 0x08	; 8
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	eb ee       	ldi	r30, 0xEB	; 235
    25d0:	f2 e1       	ldi	r31, 0x12	; 18
    25d2:	0c 94 0d 31 	jmp	0x621a	; 0x621a <__prologue_saves__+0x10>
    25d6:	7b 01       	movw	r14, r22
    25d8:	8c 01       	movw	r16, r24
    25da:	61 15       	cp	r22, r1
    25dc:	71 05       	cpc	r23, r1
    25de:	81 05       	cpc	r24, r1
    25e0:	91 05       	cpc	r25, r1
    25e2:	19 f4       	brne	.+6      	; 0x25ea <__floatunsisf+0x20>
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	60 c0       	rjmp	.+192    	; 0x26aa <__floatunsisf+0xe0>
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	8e e1       	ldi	r24, 0x1E	; 30
    25f0:	c8 2e       	mov	r12, r24
    25f2:	d1 2c       	mov	r13, r1
    25f4:	dc 82       	std	Y+4, r13	; 0x04
    25f6:	cb 82       	std	Y+3, r12	; 0x03
    25f8:	ed 82       	std	Y+5, r14	; 0x05
    25fa:	fe 82       	std	Y+6, r15	; 0x06
    25fc:	0f 83       	std	Y+7, r16	; 0x07
    25fe:	18 87       	std	Y+8, r17	; 0x08
    2600:	c8 01       	movw	r24, r16
    2602:	b7 01       	movw	r22, r14
    2604:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__clzsi2>
    2608:	fc 01       	movw	r30, r24
    260a:	31 97       	sbiw	r30, 0x01	; 1
    260c:	f7 ff       	sbrs	r31, 7
    260e:	3b c0       	rjmp	.+118    	; 0x2686 <__floatunsisf+0xbc>
    2610:	22 27       	eor	r18, r18
    2612:	33 27       	eor	r19, r19
    2614:	2e 1b       	sub	r18, r30
    2616:	3f 0b       	sbc	r19, r31
    2618:	57 01       	movw	r10, r14
    261a:	68 01       	movw	r12, r16
    261c:	02 2e       	mov	r0, r18
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <__floatunsisf+0x5e>
    2620:	d6 94       	lsr	r13
    2622:	c7 94       	ror	r12
    2624:	b7 94       	ror	r11
    2626:	a7 94       	ror	r10
    2628:	0a 94       	dec	r0
    262a:	d2 f7       	brpl	.-12     	; 0x2620 <__floatunsisf+0x56>
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e0       	ldi	r26, 0x00	; 0
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <__floatunsisf+0x7c>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	aa 1f       	adc	r26, r26
    2644:	bb 1f       	adc	r27, r27
    2646:	2a 95       	dec	r18
    2648:	d2 f7       	brpl	.-12     	; 0x263e <__floatunsisf+0x74>
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	a1 09       	sbc	r26, r1
    264e:	b1 09       	sbc	r27, r1
    2650:	8e 21       	and	r24, r14
    2652:	9f 21       	and	r25, r15
    2654:	a0 23       	and	r26, r16
    2656:	b1 23       	and	r27, r17
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	a1 05       	cpc	r26, r1
    265c:	b1 05       	cpc	r27, r1
    265e:	21 f0       	breq	.+8      	; 0x2668 <__floatunsisf+0x9e>
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	4a 29       	or	r20, r10
    266a:	5b 29       	or	r21, r11
    266c:	6c 29       	or	r22, r12
    266e:	7d 29       	or	r23, r13
    2670:	4d 83       	std	Y+5, r20	; 0x05
    2672:	5e 83       	std	Y+6, r21	; 0x06
    2674:	6f 83       	std	Y+7, r22	; 0x07
    2676:	78 87       	std	Y+8, r23	; 0x08
    2678:	8e e1       	ldi	r24, 0x1E	; 30
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	8e 1b       	sub	r24, r30
    267e:	9f 0b       	sbc	r25, r31
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
    2684:	12 c0       	rjmp	.+36     	; 0x26aa <__floatunsisf+0xe0>
    2686:	30 97       	sbiw	r30, 0x00	; 0
    2688:	81 f0       	breq	.+32     	; 0x26aa <__floatunsisf+0xe0>
    268a:	0e 2e       	mov	r0, r30
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <__floatunsisf+0xcc>
    268e:	ee 0c       	add	r14, r14
    2690:	ff 1c       	adc	r15, r15
    2692:	00 1f       	adc	r16, r16
    2694:	11 1f       	adc	r17, r17
    2696:	0a 94       	dec	r0
    2698:	d2 f7       	brpl	.-12     	; 0x268e <__floatunsisf+0xc4>
    269a:	ed 82       	std	Y+5, r14	; 0x05
    269c:	fe 82       	std	Y+6, r15	; 0x06
    269e:	0f 83       	std	Y+7, r16	; 0x07
    26a0:	18 87       	std	Y+8, r17	; 0x08
    26a2:	ce 1a       	sub	r12, r30
    26a4:	df 0a       	sbc	r13, r31
    26a6:	dc 82       	std	Y+4, r13	; 0x04
    26a8:	cb 82       	std	Y+3, r12	; 0x03
    26aa:	1a 82       	std	Y+2, r1	; 0x02
    26ac:	ce 01       	movw	r24, r28
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	0e 94 ad 13 	call	0x275a	; 0x275a <__pack_f>
    26b4:	28 96       	adiw	r28, 0x08	; 8
    26b6:	ea e0       	ldi	r30, 0x0A	; 10
    26b8:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__epilogue_restores__+0x10>

000026bc <__clzsi2>:
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	7b 01       	movw	r14, r22
    26c6:	8c 01       	movw	r16, r24
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	e8 16       	cp	r14, r24
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	f8 06       	cpc	r15, r24
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	08 07       	cpc	r16, r24
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	18 07       	cpc	r17, r24
    26d8:	88 f4       	brcc	.+34     	; 0x26fc <__clzsi2+0x40>
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	e8 16       	cp	r14, r24
    26de:	f1 04       	cpc	r15, r1
    26e0:	01 05       	cpc	r16, r1
    26e2:	11 05       	cpc	r17, r1
    26e4:	31 f0       	breq	.+12     	; 0x26f2 <__clzsi2+0x36>
    26e6:	28 f0       	brcs	.+10     	; 0x26f2 <__clzsi2+0x36>
    26e8:	88 e0       	ldi	r24, 0x08	; 8
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e0       	ldi	r26, 0x00	; 0
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	17 c0       	rjmp	.+46     	; 0x2720 <__clzsi2+0x64>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e0       	ldi	r26, 0x00	; 0
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	12 c0       	rjmp	.+36     	; 0x2720 <__clzsi2+0x64>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	e8 16       	cp	r14, r24
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	f8 06       	cpc	r15, r24
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	08 07       	cpc	r16, r24
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	18 07       	cpc	r17, r24
    270c:	28 f0       	brcs	.+10     	; 0x2718 <__clzsi2+0x5c>
    270e:	88 e1       	ldi	r24, 0x18	; 24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	04 c0       	rjmp	.+8      	; 0x2720 <__clzsi2+0x64>
    2718:	80 e1       	ldi	r24, 0x10	; 16
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	20 e2       	ldi	r18, 0x20	; 32
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	28 1b       	sub	r18, r24
    272a:	39 0b       	sbc	r19, r25
    272c:	4a 0b       	sbc	r20, r26
    272e:	5b 0b       	sbc	r21, r27
    2730:	04 c0       	rjmp	.+8      	; 0x273a <__clzsi2+0x7e>
    2732:	16 95       	lsr	r17
    2734:	07 95       	ror	r16
    2736:	f7 94       	ror	r15
    2738:	e7 94       	ror	r14
    273a:	8a 95       	dec	r24
    273c:	d2 f7       	brpl	.-12     	; 0x2732 <__clzsi2+0x76>
    273e:	f7 01       	movw	r30, r14
    2740:	e2 56       	subi	r30, 0x62	; 98
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	28 1b       	sub	r18, r24
    2748:	31 09       	sbc	r19, r1
    274a:	41 09       	sbc	r20, r1
    274c:	51 09       	sbc	r21, r1
    274e:	c9 01       	movw	r24, r18
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	ff 90       	pop	r15
    2756:	ef 90       	pop	r14
    2758:	08 95       	ret

0000275a <__pack_f>:
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	fc 01       	movw	r30, r24
    2766:	e4 80       	ldd	r14, Z+4	; 0x04
    2768:	f5 80       	ldd	r15, Z+5	; 0x05
    276a:	06 81       	ldd	r16, Z+6	; 0x06
    276c:	17 81       	ldd	r17, Z+7	; 0x07
    276e:	d1 80       	ldd	r13, Z+1	; 0x01
    2770:	80 81       	ld	r24, Z
    2772:	82 30       	cpi	r24, 0x02	; 2
    2774:	48 f4       	brcc	.+18     	; 0x2788 <__pack_f+0x2e>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e1       	ldi	r26, 0x10	; 16
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e8 2a       	or	r14, r24
    2780:	f9 2a       	or	r15, r25
    2782:	0a 2b       	or	r16, r26
    2784:	1b 2b       	or	r17, r27
    2786:	a5 c0       	rjmp	.+330    	; 0x28d2 <__pack_f+0x178>
    2788:	84 30       	cpi	r24, 0x04	; 4
    278a:	09 f4       	brne	.+2      	; 0x278e <__pack_f+0x34>
    278c:	9f c0       	rjmp	.+318    	; 0x28cc <__pack_f+0x172>
    278e:	82 30       	cpi	r24, 0x02	; 2
    2790:	21 f4       	brne	.+8      	; 0x279a <__pack_f+0x40>
    2792:	ee 24       	eor	r14, r14
    2794:	ff 24       	eor	r15, r15
    2796:	87 01       	movw	r16, r14
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <__pack_f+0x4a>
    279a:	e1 14       	cp	r14, r1
    279c:	f1 04       	cpc	r15, r1
    279e:	01 05       	cpc	r16, r1
    27a0:	11 05       	cpc	r17, r1
    27a2:	19 f4       	brne	.+6      	; 0x27aa <__pack_f+0x50>
    27a4:	e0 e0       	ldi	r30, 0x00	; 0
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	96 c0       	rjmp	.+300    	; 0x28d6 <__pack_f+0x17c>
    27aa:	62 81       	ldd	r22, Z+2	; 0x02
    27ac:	73 81       	ldd	r23, Z+3	; 0x03
    27ae:	9f ef       	ldi	r25, 0xFF	; 255
    27b0:	62 38       	cpi	r22, 0x82	; 130
    27b2:	79 07       	cpc	r23, r25
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <__pack_f+0x5e>
    27b6:	5b c0       	rjmp	.+182    	; 0x286e <__pack_f+0x114>
    27b8:	22 e8       	ldi	r18, 0x82	; 130
    27ba:	3f ef       	ldi	r19, 0xFF	; 255
    27bc:	26 1b       	sub	r18, r22
    27be:	37 0b       	sbc	r19, r23
    27c0:	2a 31       	cpi	r18, 0x1A	; 26
    27c2:	31 05       	cpc	r19, r1
    27c4:	2c f0       	brlt	.+10     	; 0x27d0 <__pack_f+0x76>
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	2a c0       	rjmp	.+84     	; 0x2824 <__pack_f+0xca>
    27d0:	b8 01       	movw	r22, r16
    27d2:	a7 01       	movw	r20, r14
    27d4:	02 2e       	mov	r0, r18
    27d6:	04 c0       	rjmp	.+8      	; 0x27e0 <__pack_f+0x86>
    27d8:	76 95       	lsr	r23
    27da:	67 95       	ror	r22
    27dc:	57 95       	ror	r21
    27de:	47 95       	ror	r20
    27e0:	0a 94       	dec	r0
    27e2:	d2 f7       	brpl	.-12     	; 0x27d8 <__pack_f+0x7e>
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <__pack_f+0x9c>
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	aa 1f       	adc	r26, r26
    27f4:	bb 1f       	adc	r27, r27
    27f6:	2a 95       	dec	r18
    27f8:	d2 f7       	brpl	.-12     	; 0x27ee <__pack_f+0x94>
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	a1 09       	sbc	r26, r1
    27fe:	b1 09       	sbc	r27, r1
    2800:	8e 21       	and	r24, r14
    2802:	9f 21       	and	r25, r15
    2804:	a0 23       	and	r26, r16
    2806:	b1 23       	and	r27, r17
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	a1 05       	cpc	r26, r1
    280c:	b1 05       	cpc	r27, r1
    280e:	21 f0       	breq	.+8      	; 0x2818 <__pack_f+0xbe>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	9a 01       	movw	r18, r20
    281a:	ab 01       	movw	r20, r22
    281c:	28 2b       	or	r18, r24
    281e:	39 2b       	or	r19, r25
    2820:	4a 2b       	or	r20, r26
    2822:	5b 2b       	or	r21, r27
    2824:	da 01       	movw	r26, r20
    2826:	c9 01       	movw	r24, r18
    2828:	8f 77       	andi	r24, 0x7F	; 127
    282a:	90 70       	andi	r25, 0x00	; 0
    282c:	a0 70       	andi	r26, 0x00	; 0
    282e:	b0 70       	andi	r27, 0x00	; 0
    2830:	80 34       	cpi	r24, 0x40	; 64
    2832:	91 05       	cpc	r25, r1
    2834:	a1 05       	cpc	r26, r1
    2836:	b1 05       	cpc	r27, r1
    2838:	39 f4       	brne	.+14     	; 0x2848 <__pack_f+0xee>
    283a:	27 ff       	sbrs	r18, 7
    283c:	09 c0       	rjmp	.+18     	; 0x2850 <__pack_f+0xf6>
    283e:	20 5c       	subi	r18, 0xC0	; 192
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	4f 4f       	sbci	r20, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <__pack_f+0xf6>
    2848:	21 5c       	subi	r18, 0xC1	; 193
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	4f 4f       	sbci	r20, 0xFF	; 255
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	e0 e0       	ldi	r30, 0x00	; 0
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	20 30       	cpi	r18, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	3a 07       	cpc	r19, r26
    285a:	a0 e0       	ldi	r26, 0x00	; 0
    285c:	4a 07       	cpc	r20, r26
    285e:	a0 e4       	ldi	r26, 0x40	; 64
    2860:	5a 07       	cpc	r21, r26
    2862:	10 f0       	brcs	.+4      	; 0x2868 <__pack_f+0x10e>
    2864:	e1 e0       	ldi	r30, 0x01	; 1
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	79 01       	movw	r14, r18
    286a:	8a 01       	movw	r16, r20
    286c:	27 c0       	rjmp	.+78     	; 0x28bc <__pack_f+0x162>
    286e:	60 38       	cpi	r22, 0x80	; 128
    2870:	71 05       	cpc	r23, r1
    2872:	64 f5       	brge	.+88     	; 0x28cc <__pack_f+0x172>
    2874:	fb 01       	movw	r30, r22
    2876:	e1 58       	subi	r30, 0x81	; 129
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	d8 01       	movw	r26, r16
    287c:	c7 01       	movw	r24, r14
    287e:	8f 77       	andi	r24, 0x7F	; 127
    2880:	90 70       	andi	r25, 0x00	; 0
    2882:	a0 70       	andi	r26, 0x00	; 0
    2884:	b0 70       	andi	r27, 0x00	; 0
    2886:	80 34       	cpi	r24, 0x40	; 64
    2888:	91 05       	cpc	r25, r1
    288a:	a1 05       	cpc	r26, r1
    288c:	b1 05       	cpc	r27, r1
    288e:	39 f4       	brne	.+14     	; 0x289e <__pack_f+0x144>
    2890:	e7 fe       	sbrs	r14, 7
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <__pack_f+0x154>
    2894:	80 e4       	ldi	r24, 0x40	; 64
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	a0 e0       	ldi	r26, 0x00	; 0
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <__pack_f+0x14c>
    289e:	8f e3       	ldi	r24, 0x3F	; 63
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a0 e0       	ldi	r26, 0x00	; 0
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e8 0e       	add	r14, r24
    28a8:	f9 1e       	adc	r15, r25
    28aa:	0a 1f       	adc	r16, r26
    28ac:	1b 1f       	adc	r17, r27
    28ae:	17 ff       	sbrs	r17, 7
    28b0:	05 c0       	rjmp	.+10     	; 0x28bc <__pack_f+0x162>
    28b2:	16 95       	lsr	r17
    28b4:	07 95       	ror	r16
    28b6:	f7 94       	ror	r15
    28b8:	e7 94       	ror	r14
    28ba:	31 96       	adiw	r30, 0x01	; 1
    28bc:	87 e0       	ldi	r24, 0x07	; 7
    28be:	16 95       	lsr	r17
    28c0:	07 95       	ror	r16
    28c2:	f7 94       	ror	r15
    28c4:	e7 94       	ror	r14
    28c6:	8a 95       	dec	r24
    28c8:	d1 f7       	brne	.-12     	; 0x28be <__pack_f+0x164>
    28ca:	05 c0       	rjmp	.+10     	; 0x28d6 <__pack_f+0x17c>
    28cc:	ee 24       	eor	r14, r14
    28ce:	ff 24       	eor	r15, r15
    28d0:	87 01       	movw	r16, r14
    28d2:	ef ef       	ldi	r30, 0xFF	; 255
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	6e 2f       	mov	r22, r30
    28d8:	67 95       	ror	r22
    28da:	66 27       	eor	r22, r22
    28dc:	67 95       	ror	r22
    28de:	90 2f       	mov	r25, r16
    28e0:	9f 77       	andi	r25, 0x7F	; 127
    28e2:	d7 94       	ror	r13
    28e4:	dd 24       	eor	r13, r13
    28e6:	d7 94       	ror	r13
    28e8:	8e 2f       	mov	r24, r30
    28ea:	86 95       	lsr	r24
    28ec:	49 2f       	mov	r20, r25
    28ee:	46 2b       	or	r20, r22
    28f0:	58 2f       	mov	r21, r24
    28f2:	5d 29       	or	r21, r13
    28f4:	b7 01       	movw	r22, r14
    28f6:	ca 01       	movw	r24, r20
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	08 95       	ret

00002904 <__unpack_f>:
    2904:	fc 01       	movw	r30, r24
    2906:	db 01       	movw	r26, r22
    2908:	40 81       	ld	r20, Z
    290a:	51 81       	ldd	r21, Z+1	; 0x01
    290c:	22 81       	ldd	r18, Z+2	; 0x02
    290e:	62 2f       	mov	r22, r18
    2910:	6f 77       	andi	r22, 0x7F	; 127
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	22 1f       	adc	r18, r18
    2916:	22 27       	eor	r18, r18
    2918:	22 1f       	adc	r18, r18
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	89 2f       	mov	r24, r25
    291e:	88 0f       	add	r24, r24
    2920:	82 2b       	or	r24, r18
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	99 1f       	adc	r25, r25
    2928:	99 27       	eor	r25, r25
    292a:	99 1f       	adc	r25, r25
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	9c 93       	st	X, r25
    2930:	11 97       	sbiw	r26, 0x01	; 1
    2932:	21 15       	cp	r18, r1
    2934:	31 05       	cpc	r19, r1
    2936:	a9 f5       	brne	.+106    	; 0x29a2 <__unpack_f+0x9e>
    2938:	41 15       	cp	r20, r1
    293a:	51 05       	cpc	r21, r1
    293c:	61 05       	cpc	r22, r1
    293e:	71 05       	cpc	r23, r1
    2940:	11 f4       	brne	.+4      	; 0x2946 <__unpack_f+0x42>
    2942:	82 e0       	ldi	r24, 0x02	; 2
    2944:	37 c0       	rjmp	.+110    	; 0x29b4 <__unpack_f+0xb0>
    2946:	82 e8       	ldi	r24, 0x82	; 130
    2948:	9f ef       	ldi	r25, 0xFF	; 255
    294a:	13 96       	adiw	r26, 0x03	; 3
    294c:	9c 93       	st	X, r25
    294e:	8e 93       	st	-X, r24
    2950:	12 97       	sbiw	r26, 0x02	; 2
    2952:	9a 01       	movw	r18, r20
    2954:	ab 01       	movw	r20, r22
    2956:	67 e0       	ldi	r22, 0x07	; 7
    2958:	22 0f       	add	r18, r18
    295a:	33 1f       	adc	r19, r19
    295c:	44 1f       	adc	r20, r20
    295e:	55 1f       	adc	r21, r21
    2960:	6a 95       	dec	r22
    2962:	d1 f7       	brne	.-12     	; 0x2958 <__unpack_f+0x54>
    2964:	83 e0       	ldi	r24, 0x03	; 3
    2966:	8c 93       	st	X, r24
    2968:	0d c0       	rjmp	.+26     	; 0x2984 <__unpack_f+0x80>
    296a:	22 0f       	add	r18, r18
    296c:	33 1f       	adc	r19, r19
    296e:	44 1f       	adc	r20, r20
    2970:	55 1f       	adc	r21, r21
    2972:	12 96       	adiw	r26, 0x02	; 2
    2974:	8d 91       	ld	r24, X+
    2976:	9c 91       	ld	r25, X
    2978:	13 97       	sbiw	r26, 0x03	; 3
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	13 96       	adiw	r26, 0x03	; 3
    297e:	9c 93       	st	X, r25
    2980:	8e 93       	st	-X, r24
    2982:	12 97       	sbiw	r26, 0x02	; 2
    2984:	20 30       	cpi	r18, 0x00	; 0
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	38 07       	cpc	r19, r24
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	48 07       	cpc	r20, r24
    298e:	80 e4       	ldi	r24, 0x40	; 64
    2990:	58 07       	cpc	r21, r24
    2992:	58 f3       	brcs	.-42     	; 0x296a <__unpack_f+0x66>
    2994:	14 96       	adiw	r26, 0x04	; 4
    2996:	2d 93       	st	X+, r18
    2998:	3d 93       	st	X+, r19
    299a:	4d 93       	st	X+, r20
    299c:	5c 93       	st	X, r21
    299e:	17 97       	sbiw	r26, 0x07	; 7
    29a0:	08 95       	ret
    29a2:	2f 3f       	cpi	r18, 0xFF	; 255
    29a4:	31 05       	cpc	r19, r1
    29a6:	79 f4       	brne	.+30     	; 0x29c6 <__unpack_f+0xc2>
    29a8:	41 15       	cp	r20, r1
    29aa:	51 05       	cpc	r21, r1
    29ac:	61 05       	cpc	r22, r1
    29ae:	71 05       	cpc	r23, r1
    29b0:	19 f4       	brne	.+6      	; 0x29b8 <__unpack_f+0xb4>
    29b2:	84 e0       	ldi	r24, 0x04	; 4
    29b4:	8c 93       	st	X, r24
    29b6:	08 95       	ret
    29b8:	64 ff       	sbrs	r22, 4
    29ba:	03 c0       	rjmp	.+6      	; 0x29c2 <__unpack_f+0xbe>
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	8c 93       	st	X, r24
    29c0:	12 c0       	rjmp	.+36     	; 0x29e6 <__unpack_f+0xe2>
    29c2:	1c 92       	st	X, r1
    29c4:	10 c0       	rjmp	.+32     	; 0x29e6 <__unpack_f+0xe2>
    29c6:	2f 57       	subi	r18, 0x7F	; 127
    29c8:	30 40       	sbci	r19, 0x00	; 0
    29ca:	13 96       	adiw	r26, 0x03	; 3
    29cc:	3c 93       	st	X, r19
    29ce:	2e 93       	st	-X, r18
    29d0:	12 97       	sbiw	r26, 0x02	; 2
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	8c 93       	st	X, r24
    29d6:	87 e0       	ldi	r24, 0x07	; 7
    29d8:	44 0f       	add	r20, r20
    29da:	55 1f       	adc	r21, r21
    29dc:	66 1f       	adc	r22, r22
    29de:	77 1f       	adc	r23, r23
    29e0:	8a 95       	dec	r24
    29e2:	d1 f7       	brne	.-12     	; 0x29d8 <__unpack_f+0xd4>
    29e4:	70 64       	ori	r23, 0x40	; 64
    29e6:	14 96       	adiw	r26, 0x04	; 4
    29e8:	4d 93       	st	X+, r20
    29ea:	5d 93       	st	X+, r21
    29ec:	6d 93       	st	X+, r22
    29ee:	7c 93       	st	X, r23
    29f0:	17 97       	sbiw	r26, 0x07	; 7
    29f2:	08 95       	ret

000029f4 <__fpcmp_parts_f>:
    29f4:	1f 93       	push	r17
    29f6:	dc 01       	movw	r26, r24
    29f8:	fb 01       	movw	r30, r22
    29fa:	9c 91       	ld	r25, X
    29fc:	92 30       	cpi	r25, 0x02	; 2
    29fe:	08 f4       	brcc	.+2      	; 0x2a02 <__fpcmp_parts_f+0xe>
    2a00:	47 c0       	rjmp	.+142    	; 0x2a90 <__fpcmp_parts_f+0x9c>
    2a02:	80 81       	ld	r24, Z
    2a04:	82 30       	cpi	r24, 0x02	; 2
    2a06:	08 f4       	brcc	.+2      	; 0x2a0a <__fpcmp_parts_f+0x16>
    2a08:	43 c0       	rjmp	.+134    	; 0x2a90 <__fpcmp_parts_f+0x9c>
    2a0a:	94 30       	cpi	r25, 0x04	; 4
    2a0c:	51 f4       	brne	.+20     	; 0x2a22 <__fpcmp_parts_f+0x2e>
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	1c 91       	ld	r17, X
    2a12:	84 30       	cpi	r24, 0x04	; 4
    2a14:	99 f5       	brne	.+102    	; 0x2a7c <__fpcmp_parts_f+0x88>
    2a16:	81 81       	ldd	r24, Z+1	; 0x01
    2a18:	68 2f       	mov	r22, r24
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	61 1b       	sub	r22, r17
    2a1e:	71 09       	sbc	r23, r1
    2a20:	3f c0       	rjmp	.+126    	; 0x2aa0 <__fpcmp_parts_f+0xac>
    2a22:	84 30       	cpi	r24, 0x04	; 4
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <__fpcmp_parts_f+0x3a>
    2a26:	92 30       	cpi	r25, 0x02	; 2
    2a28:	31 f4       	brne	.+12     	; 0x2a36 <__fpcmp_parts_f+0x42>
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	b9 f1       	breq	.+110    	; 0x2a9c <__fpcmp_parts_f+0xa8>
    2a2e:	81 81       	ldd	r24, Z+1	; 0x01
    2a30:	88 23       	and	r24, r24
    2a32:	89 f1       	breq	.+98     	; 0x2a96 <__fpcmp_parts_f+0xa2>
    2a34:	2d c0       	rjmp	.+90     	; 0x2a90 <__fpcmp_parts_f+0x9c>
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	1c 91       	ld	r17, X
    2a3a:	11 97       	sbiw	r26, 0x01	; 1
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	f1 f0       	breq	.+60     	; 0x2a7c <__fpcmp_parts_f+0x88>
    2a40:	81 81       	ldd	r24, Z+1	; 0x01
    2a42:	18 17       	cp	r17, r24
    2a44:	d9 f4       	brne	.+54     	; 0x2a7c <__fpcmp_parts_f+0x88>
    2a46:	12 96       	adiw	r26, 0x02	; 2
    2a48:	2d 91       	ld	r18, X+
    2a4a:	3c 91       	ld	r19, X
    2a4c:	13 97       	sbiw	r26, 0x03	; 3
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	82 17       	cp	r24, r18
    2a54:	93 07       	cpc	r25, r19
    2a56:	94 f0       	brlt	.+36     	; 0x2a7c <__fpcmp_parts_f+0x88>
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	bc f0       	brlt	.+46     	; 0x2a8c <__fpcmp_parts_f+0x98>
    2a5e:	14 96       	adiw	r26, 0x04	; 4
    2a60:	8d 91       	ld	r24, X+
    2a62:	9d 91       	ld	r25, X+
    2a64:	0d 90       	ld	r0, X+
    2a66:	bc 91       	ld	r27, X
    2a68:	a0 2d       	mov	r26, r0
    2a6a:	24 81       	ldd	r18, Z+4	; 0x04
    2a6c:	35 81       	ldd	r19, Z+5	; 0x05
    2a6e:	46 81       	ldd	r20, Z+6	; 0x06
    2a70:	57 81       	ldd	r21, Z+7	; 0x07
    2a72:	28 17       	cp	r18, r24
    2a74:	39 07       	cpc	r19, r25
    2a76:	4a 07       	cpc	r20, r26
    2a78:	5b 07       	cpc	r21, r27
    2a7a:	18 f4       	brcc	.+6      	; 0x2a82 <__fpcmp_parts_f+0x8e>
    2a7c:	11 23       	and	r17, r17
    2a7e:	41 f0       	breq	.+16     	; 0x2a90 <__fpcmp_parts_f+0x9c>
    2a80:	0a c0       	rjmp	.+20     	; 0x2a96 <__fpcmp_parts_f+0xa2>
    2a82:	82 17       	cp	r24, r18
    2a84:	93 07       	cpc	r25, r19
    2a86:	a4 07       	cpc	r26, r20
    2a88:	b5 07       	cpc	r27, r21
    2a8a:	40 f4       	brcc	.+16     	; 0x2a9c <__fpcmp_parts_f+0xa8>
    2a8c:	11 23       	and	r17, r17
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <__fpcmp_parts_f+0xa2>
    2a90:	61 e0       	ldi	r22, 0x01	; 1
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	05 c0       	rjmp	.+10     	; 0x2aa0 <__fpcmp_parts_f+0xac>
    2a96:	6f ef       	ldi	r22, 0xFF	; 255
    2a98:	7f ef       	ldi	r23, 0xFF	; 255
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <__fpcmp_parts_f+0xac>
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	1f 91       	pop	r17
    2aa4:	08 95       	ret

00002aa6 <GIE_void_Enable>:
#include "GIE_interface.h"
#include "GIE_private.h"



void GIE_void_Enable(void){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,GIE_BIT);
    2aae:	af e5       	ldi	r26, 0x5F	; 95
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	ef e5       	ldi	r30, 0x5F	; 95
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	80 68       	ori	r24, 0x80	; 128
    2aba:	8c 93       	st	X, r24
}
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <GIE_void_Disable>:

void GIE_void_Disable(void){
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,GIE_BIT);
    2aca:	af e5       	ldi	r26, 0x5F	; 95
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	ef e5       	ldi	r30, 0x5F	; 95
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8f 77       	andi	r24, 0x7F	; 127
    2ad6:	8c 93       	st	X, r24

}
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <EXTI_voidInit>:

#include "EXTI_interface.h"
#include "EXTI_config.h"
#include "EXTI_private.h"

void EXTI_voidInit(void) {
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62

	/*EXTERNAL INTERRUPT 0*/
#ifdef EXTI_LINE0_ENABLE
	SET_BIT(GICR_REG, GICR_INT0_BIT);
    2ae6:	ab e5       	ldi	r26, 0x5B	; 91
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	eb e5       	ldi	r30, 0x5B	; 91
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	80 64       	ori	r24, 0x40	; 64
    2af2:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,MCUCR_ISC01_BIT);
#elif EXTI_u8Line0_Mode == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR_REG,MCUCR_ISC00_BIT);
	SET_BIT(MCUCR_REG,MCUCR_ISC01_BIT);
#elif EXTI_u8Line0_Mode == EXTI_RISING_EDGE
	SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2af4:	a5 e5       	ldi	r26, 0x55	; 85
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e5 e5       	ldi	r30, 0x55	; 85
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	81 60       	ori	r24, 0x01	; 1
    2b00:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2b02:	a5 e5       	ldi	r26, 0x55	; 85
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e5 e5       	ldi	r30, 0x55	; 85
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	82 60       	ori	r24, 0x02	; 2
    2b0e:	8c 93       	st	X, r24
#endif
#endif

	/*EXTERNAL INTERRUPT 1*/
#ifdef EXTI_LINE1_ENABLE
	SET_BIT(GICR_REG,GICR_INT1_BIT);
    2b10:	ab e5       	ldi	r26, 0x5B	; 91
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	eb e5       	ldi	r30, 0x5B	; 91
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	80 68       	ori	r24, 0x80	; 128
    2b1c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,MCUCR_ISC11_BIT);
#elif EXTI_u8Line1_Mode == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR_REG,MCUCR_ISC10_BIT);
	SET_BIT(MCUCR_REG,MCUCR_ISC11_BIT);
#elif EXTI_u8Line1_Mode == EXTI_RISING_EDGE
	SET_BIT(MCUCR_REG,MCUCR_ISC10_BIT);
    2b1e:	a5 e5       	ldi	r26, 0x55	; 85
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e5 e5       	ldi	r30, 0x55	; 85
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	84 60       	ori	r24, 0x04	; 4
    2b2a:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,MCUCR_ISC11_BIT);
    2b2c:	a5 e5       	ldi	r26, 0x55	; 85
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e5 e5       	ldi	r30, 0x55	; 85
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	88 60       	ori	r24, 0x08	; 8
    2b38:	8c 93       	st	X, r24
#endif
#endif

	/*EXTERNAL INTERRUPT 2*/
#ifdef EXTI_LINE2_ENABLE
	SET_BIT(GICR_REG,GICR_INT2_BIT);
    2b3a:	ab e5       	ldi	r26, 0x5B	; 91
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	eb e5       	ldi	r30, 0x5B	; 91
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	80 62       	ori	r24, 0x20	; 32
    2b46:	8c 93       	st	X, r24
#if EXTI_u8Line1_Mode == EXTI_FALLING_EDGE
	CLR_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
#elif EXTI_u8Line1_Mode == EXTI_RISING_EDGE
	SET_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
    2b48:	a4 e5       	ldi	r26, 0x54	; 84
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e4 e5       	ldi	r30, 0x54	; 84
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	84 60       	ori	r24, 0x04	; 4
    2b54:	8c 93       	st	X, r24
#endif
#endif
}
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <EXTI_voidEnable>:

void EXTI_voidEnable(u8 Copy_u8SenseMode, u8 Copy_u8Line) {
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	2a 97       	sbiw	r28, 0x0a	; 10
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Line) {
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	3a 87       	std	Y+10, r19	; 0x0a
    2b7c:	29 87       	std	Y+9, r18	; 0x09
    2b7e:	89 85       	ldd	r24, Y+9	; 0x09
    2b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	91 05       	cpc	r25, r1
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <EXTI_voidEnable+0x2e>
    2b88:	6e c0       	rjmp	.+220    	; 0x2c66 <EXTI_voidEnable+0x10a>
    2b8a:	29 85       	ldd	r18, Y+9	; 0x09
    2b8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b8e:	22 30       	cpi	r18, 0x02	; 2
    2b90:	31 05       	cpc	r19, r1
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <EXTI_voidEnable+0x3a>
    2b94:	cb c0       	rjmp	.+406    	; 0x2d2c <EXTI_voidEnable+0x1d0>
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <EXTI_voidEnable+0x44>
    2b9e:	eb c0       	rjmp	.+470    	; 0x2d76 <EXTI_voidEnable+0x21a>

	case EXTI_LINE0:
		SET_BIT(GICR_REG, GICR_INT0_BIT);
    2ba0:	ab e5       	ldi	r26, 0x5B	; 91
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	eb e5       	ldi	r30, 0x5B	; 91
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 64       	ori	r24, 0x40	; 64
    2bac:	8c 93       	st	X, r24
		switch (Copy_u8SenseMode) {
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	38 87       	std	Y+8, r19	; 0x08
    2bb6:	2f 83       	std	Y+7, r18	; 0x07
    2bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bba:	98 85       	ldd	r25, Y+8	; 0x08
    2bbc:	81 30       	cpi	r24, 0x01	; 1
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <EXTI_voidEnable+0x68>
    2bc2:	42 c0       	rjmp	.+132    	; 0x2c48 <EXTI_voidEnable+0xec>
    2bc4:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc6:	38 85       	ldd	r19, Y+8	; 0x08
    2bc8:	22 30       	cpi	r18, 0x02	; 2
    2bca:	31 05       	cpc	r19, r1
    2bcc:	2c f4       	brge	.+10     	; 0x2bd8 <EXTI_voidEnable+0x7c>
    2bce:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd0:	98 85       	ldd	r25, Y+8	; 0x08
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	51 f1       	breq	.+84     	; 0x2c2a <EXTI_voidEnable+0xce>
    2bd6:	cf c0       	rjmp	.+414    	; 0x2d76 <EXTI_voidEnable+0x21a>
    2bd8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bda:	38 85       	ldd	r19, Y+8	; 0x08
    2bdc:	22 30       	cpi	r18, 0x02	; 2
    2bde:	31 05       	cpc	r19, r1
    2be0:	31 f0       	breq	.+12     	; 0x2bee <EXTI_voidEnable+0x92>
    2be2:	8f 81       	ldd	r24, Y+7	; 0x07
    2be4:	98 85       	ldd	r25, Y+8	; 0x08
    2be6:	83 30       	cpi	r24, 0x03	; 3
    2be8:	91 05       	cpc	r25, r1
    2bea:	81 f0       	breq	.+32     	; 0x2c0c <EXTI_voidEnable+0xb0>
    2bec:	c4 c0       	rjmp	.+392    	; 0x2d76 <EXTI_voidEnable+0x21a>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2bee:	a5 e5       	ldi	r26, 0x55	; 85
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e5 e5       	ldi	r30, 0x55	; 85
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8e 7f       	andi	r24, 0xFE	; 254
    2bfa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2bfc:	a5 e5       	ldi	r26, 0x55	; 85
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e5 e5       	ldi	r30, 0x55	; 85
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	8d 7f       	andi	r24, 0xFD	; 253
    2c08:	8c 93       	st	X, r24
    2c0a:	b5 c0       	rjmp	.+362    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2c0c:	a5 e5       	ldi	r26, 0x55	; 85
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e5 e5       	ldi	r30, 0x55	; 85
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	81 60       	ori	r24, 0x01	; 1
    2c18:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2c1a:	a5 e5       	ldi	r26, 0x55	; 85
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e5 e5       	ldi	r30, 0x55	; 85
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	8d 7f       	andi	r24, 0xFD	; 253
    2c26:	8c 93       	st	X, r24
    2c28:	a6 c0       	rjmp	.+332    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2c2a:	a5 e5       	ldi	r26, 0x55	; 85
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e5 e5       	ldi	r30, 0x55	; 85
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	8e 7f       	andi	r24, 0xFE	; 254
    2c36:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2c38:	a5 e5       	ldi	r26, 0x55	; 85
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e5 e5       	ldi	r30, 0x55	; 85
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	82 60       	ori	r24, 0x02	; 2
    2c44:	8c 93       	st	X, r24
    2c46:	97 c0       	rjmp	.+302    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_RISING_EDGE:
			CLR_BIT(MCUCR_REG, MCUCR_ISC00_BIT);
    2c48:	a5 e5       	ldi	r26, 0x55	; 85
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	e5 e5       	ldi	r30, 0x55	; 85
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	8e 7f       	andi	r24, 0xFE	; 254
    2c54:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC01_BIT);
    2c56:	a5 e5       	ldi	r26, 0x55	; 85
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e5 e5       	ldi	r30, 0x55	; 85
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	82 60       	ori	r24, 0x02	; 2
    2c62:	8c 93       	st	X, r24
    2c64:	88 c0       	rjmp	.+272    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		}
		break;

	case EXTI_LINE1:
		SET_BIT(GICR_REG, GICR_INT1_BIT);
    2c66:	ab e5       	ldi	r26, 0x5B	; 91
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	eb e5       	ldi	r30, 0x5B	; 91
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 68       	ori	r24, 0x80	; 128
    2c72:	8c 93       	st	X, r24
		switch (Copy_u8SenseMode) {
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	3e 83       	std	Y+6, r19	; 0x06
    2c7c:	2d 83       	std	Y+5, r18	; 0x05
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	9e 81       	ldd	r25, Y+6	; 0x06
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	91 05       	cpc	r25, r1
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <EXTI_voidEnable+0x12e>
    2c88:	42 c0       	rjmp	.+132    	; 0x2d0e <EXTI_voidEnable+0x1b2>
    2c8a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c8c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c8e:	22 30       	cpi	r18, 0x02	; 2
    2c90:	31 05       	cpc	r19, r1
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <EXTI_voidEnable+0x142>
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	51 f1       	breq	.+84     	; 0x2cf0 <EXTI_voidEnable+0x194>
    2c9c:	6c c0       	rjmp	.+216    	; 0x2d76 <EXTI_voidEnable+0x21a>
    2c9e:	2d 81       	ldd	r18, Y+5	; 0x05
    2ca0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ca2:	22 30       	cpi	r18, 0x02	; 2
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	31 f0       	breq	.+12     	; 0x2cb4 <EXTI_voidEnable+0x158>
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	83 30       	cpi	r24, 0x03	; 3
    2cae:	91 05       	cpc	r25, r1
    2cb0:	81 f0       	breq	.+32     	; 0x2cd2 <EXTI_voidEnable+0x176>
    2cb2:	61 c0       	rjmp	.+194    	; 0x2d76 <EXTI_voidEnable+0x21a>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2cb4:	a5 e5       	ldi	r26, 0x55	; 85
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e5 e5       	ldi	r30, 0x55	; 85
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8b 7f       	andi	r24, 0xFB	; 251
    2cc0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2cc2:	a5 e5       	ldi	r26, 0x55	; 85
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e5 e5       	ldi	r30, 0x55	; 85
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	87 7f       	andi	r24, 0xF7	; 247
    2cce:	8c 93       	st	X, r24
    2cd0:	52 c0       	rjmp	.+164    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2cd2:	a5 e5       	ldi	r26, 0x55	; 85
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e5 e5       	ldi	r30, 0x55	; 85
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	84 60       	ori	r24, 0x04	; 4
    2cde:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2ce0:	a5 e5       	ldi	r26, 0x55	; 85
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e5 e5       	ldi	r30, 0x55	; 85
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	87 7f       	andi	r24, 0xF7	; 247
    2cec:	8c 93       	st	X, r24
    2cee:	43 c0       	rjmp	.+134    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2cf0:	a5 e5       	ldi	r26, 0x55	; 85
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e5 e5       	ldi	r30, 0x55	; 85
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8b 7f       	andi	r24, 0xFB	; 251
    2cfc:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2cfe:	a5 e5       	ldi	r26, 0x55	; 85
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e5 e5       	ldi	r30, 0x55	; 85
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	88 60       	ori	r24, 0x08	; 8
    2d0a:	8c 93       	st	X, r24
    2d0c:	34 c0       	rjmp	.+104    	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_RISING_EDGE:
			CLR_BIT(MCUCR_REG, MCUCR_ISC10_BIT);
    2d0e:	a5 e5       	ldi	r26, 0x55	; 85
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e5 e5       	ldi	r30, 0x55	; 85
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8b 7f       	andi	r24, 0xFB	; 251
    2d1a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC11_BIT);
    2d1c:	a5 e5       	ldi	r26, 0x55	; 85
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e5 e5       	ldi	r30, 0x55	; 85
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	88 60       	ori	r24, 0x08	; 8
    2d28:	8c 93       	st	X, r24
    2d2a:	25 c0       	rjmp	.+74     	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		}
		break;

	case EXTI_LINE2:
		SET_BIT(GICR_REG, GICR_INT2_BIT);
    2d2c:	ab e5       	ldi	r26, 0x5B	; 91
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	eb e5       	ldi	r30, 0x5B	; 91
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	80 62       	ori	r24, 0x20	; 32
    2d38:	8c 93       	st	X, r24
		switch (Copy_u8SenseMode) {
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	3c 83       	std	Y+4, r19	; 0x04
    2d42:	2b 83       	std	Y+3, r18	; 0x03
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	31 f0       	breq	.+12     	; 0x2d58 <EXTI_voidEnable+0x1fc>
    2d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d50:	21 30       	cpi	r18, 0x01	; 1
    2d52:	31 05       	cpc	r19, r1
    2d54:	49 f0       	breq	.+18     	; 0x2d68 <EXTI_voidEnable+0x20c>
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <EXTI_voidEnable+0x21a>
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2_BIT);
    2d58:	a4 e5       	ldi	r26, 0x54	; 84
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e4 e5       	ldi	r30, 0x54	; 84
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	8b 7f       	andi	r24, 0xFB	; 251
    2d64:	8c 93       	st	X, r24
    2d66:	07 c0       	rjmp	.+14     	; 0x2d76 <EXTI_voidEnable+0x21a>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2_BIT);
    2d68:	a4 e5       	ldi	r26, 0x54	; 84
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e4 e5       	ldi	r30, 0x54	; 84
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	84 60       	ori	r24, 0x04	; 4
    2d74:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    2d76:	2a 96       	adiw	r28, 0x0a	; 10
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <EXTI_voidDisable>:


void EXTI_voidDisable(u8 Copy_u8Line) {
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <EXTI_voidDisable+0x6>
    2d8e:	0f 92       	push	r0
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Line) {
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	3b 83       	std	Y+3, r19	; 0x03
    2d9e:	2a 83       	std	Y+2, r18	; 0x02
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	91 05       	cpc	r25, r1
    2da8:	89 f0       	breq	.+34     	; 0x2dcc <EXTI_voidDisable+0x44>
    2daa:	2a 81       	ldd	r18, Y+2	; 0x02
    2dac:	3b 81       	ldd	r19, Y+3	; 0x03
    2dae:	22 30       	cpi	r18, 0x02	; 2
    2db0:	31 05       	cpc	r19, r1
    2db2:	a1 f0       	breq	.+40     	; 0x2ddc <EXTI_voidDisable+0x54>
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	b9 f4       	brne	.+46     	; 0x2dea <EXTI_voidDisable+0x62>
	case EXTI_LINE0:
		CLR_BIT(GICR_REG, GICR_INT0_BIT);
    2dbc:	ab e5       	ldi	r26, 0x5B	; 91
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	eb e5       	ldi	r30, 0x5B	; 91
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	8f 7b       	andi	r24, 0xBF	; 191
    2dc8:	8c 93       	st	X, r24
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <EXTI_voidDisable+0x62>
		break;
	case EXTI_LINE1:
		CLR_BIT(GICR_REG, GICR_INT1_BIT);
    2dcc:	ab e5       	ldi	r26, 0x5B	; 91
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	eb e5       	ldi	r30, 0x5B	; 91
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8f 77       	andi	r24, 0x7F	; 127
    2dd8:	8c 93       	st	X, r24
    2dda:	07 c0       	rjmp	.+14     	; 0x2dea <EXTI_voidDisable+0x62>
		break;
	case EXTI_LINE2:
		CLR_BIT(GICR_REG, GICR_INT2_BIT);
    2ddc:	ab e5       	ldi	r26, 0x5B	; 91
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	eb e5       	ldi	r30, 0x5B	; 91
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 7d       	andi	r24, 0xDF	; 223
    2de8:	8c 93       	st	X, r24
		break;
	}
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <EXTI_voidClearFlag>:


void EXTI_voidClearFlag(u8 Copy_u8Line) {
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <EXTI_voidClearFlag+0x6>
    2dfc:	0f 92       	push	r0
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Line) {
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	3b 83       	std	Y+3, r19	; 0x03
    2e0c:	2a 83       	std	Y+2, r18	; 0x02
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	81 30       	cpi	r24, 0x01	; 1
    2e14:	91 05       	cpc	r25, r1
    2e16:	89 f0       	breq	.+34     	; 0x2e3a <EXTI_voidClearFlag+0x44>
    2e18:	2a 81       	ldd	r18, Y+2	; 0x02
    2e1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e1c:	22 30       	cpi	r18, 0x02	; 2
    2e1e:	31 05       	cpc	r19, r1
    2e20:	a1 f0       	breq	.+40     	; 0x2e4a <EXTI_voidClearFlag+0x54>
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	9b 81       	ldd	r25, Y+3	; 0x03
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	b9 f4       	brne	.+46     	; 0x2e58 <EXTI_voidClearFlag+0x62>
	case EXTI_LINE0:
		SET_BIT(GIFR_REG, GIFR_INTF0_BIT);
    2e2a:	aa e5       	ldi	r26, 0x5A	; 90
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	ea e5       	ldi	r30, 0x5A	; 90
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	80 64       	ori	r24, 0x40	; 64
    2e36:	8c 93       	st	X, r24
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE1:
		SET_BIT(GIFR_REG, GIFR_INTF1_BIT);
    2e3a:	aa e5       	ldi	r26, 0x5A	; 90
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	ea e5       	ldi	r30, 0x5A	; 90
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	80 68       	ori	r24, 0x80	; 128
    2e46:	8c 93       	st	X, r24
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE2:
		SET_BIT(GICR_REG, GICR_INT2_BIT);
    2e4a:	ab e5       	ldi	r26, 0x5B	; 91
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	eb e5       	ldi	r30, 0x5B	; 91
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	80 62       	ori	r24, 0x20	; 32
    2e56:	8c 93       	st	X, r24
		break;
	}
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <EXTI_voidCallBack>:

void EXTI_voidCallBack(void (*Copy_pvoidCallBack)(void), u8 Copy_u8EXTILine) {
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <EXTI_voidCallBack+0x6>
    2e6a:	0f 92       	push	r0
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	6b 83       	std	Y+3, r22	; 0x03

	if (Copy_pvoidCallBack != NULL) {
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	61 f0       	breq	.+24     	; 0x2e96 <EXTI_voidCallBack+0x32>
		EXTI_CallBack[Copy_u8EXTILine] = Copy_pvoidCallBack;
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e2 55       	subi	r30, 0x52	; 82
    2e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
	}
}
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <__vector_1>:

void __vector_1(void) {
    2ea2:	1f 92       	push	r1
    2ea4:	0f 92       	push	r0
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	0f 92       	push	r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	2f 93       	push	r18
    2eae:	3f 93       	push	r19
    2eb0:	4f 93       	push	r20
    2eb2:	5f 93       	push	r21
    2eb4:	6f 93       	push	r22
    2eb6:	7f 93       	push	r23
    2eb8:	8f 93       	push	r24
    2eba:	9f 93       	push	r25
    2ebc:	af 93       	push	r26
    2ebe:	bf 93       	push	r27
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_CallBack[0] != NULL) {
    2ecc:	80 91 ae 01 	lds	r24, 0x01AE
    2ed0:	90 91 af 01 	lds	r25, 0x01AF
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	41 f0       	breq	.+16     	; 0x2ee8 <__vector_1+0x46>
		EXTI_CallBack[0]();
    2ed8:	e0 91 ae 01 	lds	r30, 0x01AE
    2edc:	f0 91 af 01 	lds	r31, 0x01AF
    2ee0:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE0);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <EXTI_voidClearFlag>
	}
}
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	ff 91       	pop	r31
    2eee:	ef 91       	pop	r30
    2ef0:	bf 91       	pop	r27
    2ef2:	af 91       	pop	r26
    2ef4:	9f 91       	pop	r25
    2ef6:	8f 91       	pop	r24
    2ef8:	7f 91       	pop	r23
    2efa:	6f 91       	pop	r22
    2efc:	5f 91       	pop	r21
    2efe:	4f 91       	pop	r20
    2f00:	3f 91       	pop	r19
    2f02:	2f 91       	pop	r18
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	0f 90       	pop	r0
    2f0a:	1f 90       	pop	r1
    2f0c:	18 95       	reti

00002f0e <__vector_2>:

void __vector_2(void) {
    2f0e:	1f 92       	push	r1
    2f10:	0f 92       	push	r0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	0f 92       	push	r0
    2f16:	11 24       	eor	r1, r1
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	4f 93       	push	r20
    2f1e:	5f 93       	push	r21
    2f20:	6f 93       	push	r22
    2f22:	7f 93       	push	r23
    2f24:	8f 93       	push	r24
    2f26:	9f 93       	push	r25
    2f28:	af 93       	push	r26
    2f2a:	bf 93       	push	r27
    2f2c:	ef 93       	push	r30
    2f2e:	ff 93       	push	r31
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_CallBack[1] != NULL) {
    2f38:	80 91 b0 01 	lds	r24, 0x01B0
    2f3c:	90 91 b1 01 	lds	r25, 0x01B1
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	41 f0       	breq	.+16     	; 0x2f54 <__vector_2+0x46>
		EXTI_CallBack[1]();
    2f44:	e0 91 b0 01 	lds	r30, 0x01B0
    2f48:	f0 91 b1 01 	lds	r31, 0x01B1
    2f4c:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE1);
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <EXTI_voidClearFlag>
	}
}
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	ff 91       	pop	r31
    2f5a:	ef 91       	pop	r30
    2f5c:	bf 91       	pop	r27
    2f5e:	af 91       	pop	r26
    2f60:	9f 91       	pop	r25
    2f62:	8f 91       	pop	r24
    2f64:	7f 91       	pop	r23
    2f66:	6f 91       	pop	r22
    2f68:	5f 91       	pop	r21
    2f6a:	4f 91       	pop	r20
    2f6c:	3f 91       	pop	r19
    2f6e:	2f 91       	pop	r18
    2f70:	0f 90       	pop	r0
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	0f 90       	pop	r0
    2f76:	1f 90       	pop	r1
    2f78:	18 95       	reti

00002f7a <__vector_3>:

void __vector_3(void) {
    2f7a:	1f 92       	push	r1
    2f7c:	0f 92       	push	r0
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	0f 92       	push	r0
    2f82:	11 24       	eor	r1, r1
    2f84:	2f 93       	push	r18
    2f86:	3f 93       	push	r19
    2f88:	4f 93       	push	r20
    2f8a:	5f 93       	push	r21
    2f8c:	6f 93       	push	r22
    2f8e:	7f 93       	push	r23
    2f90:	8f 93       	push	r24
    2f92:	9f 93       	push	r25
    2f94:	af 93       	push	r26
    2f96:	bf 93       	push	r27
    2f98:	ef 93       	push	r30
    2f9a:	ff 93       	push	r31
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_CallBack[2] != NULL) {
    2fa4:	80 91 b2 01 	lds	r24, 0x01B2
    2fa8:	90 91 b3 01 	lds	r25, 0x01B3
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	41 f0       	breq	.+16     	; 0x2fc0 <__vector_3+0x46>
		EXTI_CallBack[2]();
    2fb0:	e0 91 b2 01 	lds	r30, 0x01B2
    2fb4:	f0 91 b3 01 	lds	r31, 0x01B3
    2fb8:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE2);
    2fba:	82 e0       	ldi	r24, 0x02	; 2
    2fbc:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <EXTI_voidClearFlag>

	}
}
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	ff 91       	pop	r31
    2fc6:	ef 91       	pop	r30
    2fc8:	bf 91       	pop	r27
    2fca:	af 91       	pop	r26
    2fcc:	9f 91       	pop	r25
    2fce:	8f 91       	pop	r24
    2fd0:	7f 91       	pop	r23
    2fd2:	6f 91       	pop	r22
    2fd4:	5f 91       	pop	r21
    2fd6:	4f 91       	pop	r20
    2fd8:	3f 91       	pop	r19
    2fda:	2f 91       	pop	r18
    2fdc:	0f 90       	pop	r0
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	0f 90       	pop	r0
    2fe2:	1f 90       	pop	r1
    2fe4:	18 95       	reti

00002fe6 <DIO_enumSetPortDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


DIO_ErrorStatus DIO_enumSetPortDirection( u8 Copy_u8Port , u8 Copy_u8Direction ){
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <DIO_enumSetPortDirection+0x6>
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <DIO_enumSetPortDirection+0x8>
    2fee:	0f 92       	push	r0
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	8a 83       	std	Y+2, r24	; 0x02
    2ff6:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01

	switch( Copy_u8Port ){
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	3d 83       	std	Y+5, r19	; 0x05
    3004:	2c 83       	std	Y+4, r18	; 0x04
    3006:	8c 81       	ldd	r24, Y+4	; 0x04
    3008:	9d 81       	ldd	r25, Y+5	; 0x05
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	91 05       	cpc	r25, r1
    300e:	d1 f0       	breq	.+52     	; 0x3044 <DIO_enumSetPortDirection+0x5e>
    3010:	2c 81       	ldd	r18, Y+4	; 0x04
    3012:	3d 81       	ldd	r19, Y+5	; 0x05
    3014:	22 30       	cpi	r18, 0x02	; 2
    3016:	31 05       	cpc	r19, r1
    3018:	2c f4       	brge	.+10     	; 0x3024 <DIO_enumSetPortDirection+0x3e>
    301a:	8c 81       	ldd	r24, Y+4	; 0x04
    301c:	9d 81       	ldd	r25, Y+5	; 0x05
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	61 f0       	breq	.+24     	; 0x303a <DIO_enumSetPortDirection+0x54>
    3022:	1f c0       	rjmp	.+62     	; 0x3062 <DIO_enumSetPortDirection+0x7c>
    3024:	2c 81       	ldd	r18, Y+4	; 0x04
    3026:	3d 81       	ldd	r19, Y+5	; 0x05
    3028:	22 30       	cpi	r18, 0x02	; 2
    302a:	31 05       	cpc	r19, r1
    302c:	81 f0       	breq	.+32     	; 0x304e <DIO_enumSetPortDirection+0x68>
    302e:	8c 81       	ldd	r24, Y+4	; 0x04
    3030:	9d 81       	ldd	r25, Y+5	; 0x05
    3032:	83 30       	cpi	r24, 0x03	; 3
    3034:	91 05       	cpc	r25, r1
    3036:	81 f0       	breq	.+32     	; 0x3058 <DIO_enumSetPortDirection+0x72>
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <DIO_enumSetPortDirection+0x7c>

	case DIO_PORTA: DDRA_REG = Copy_u8Direction   ;  break;
    303a:	ea e3       	ldi	r30, 0x3A	; 58
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	80 83       	st	Z, r24
    3042:	10 c0       	rjmp	.+32     	; 0x3064 <DIO_enumSetPortDirection+0x7e>
	case DIO_PORTB: DDRB_REG = Copy_u8Direction   ;  break;
    3044:	e7 e3       	ldi	r30, 0x37	; 55
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	80 83       	st	Z, r24
    304c:	0b c0       	rjmp	.+22     	; 0x3064 <DIO_enumSetPortDirection+0x7e>
	case DIO_PORTC: DDRC_REG = Copy_u8Direction   ;  break;
    304e:	e4 e3       	ldi	r30, 0x34	; 52
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	80 83       	st	Z, r24
    3056:	06 c0       	rjmp	.+12     	; 0x3064 <DIO_enumSetPortDirection+0x7e>
	case DIO_PORTD: DDRD_REG = Copy_u8Direction   ;  break;
    3058:	e1 e3       	ldi	r30, 0x31	; 49
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	80 83       	st	Z, r24
    3060:	01 c0       	rjmp	.+2      	; 0x3064 <DIO_enumSetPortDirection+0x7e>
	default       : LOC_enumState = DIO_NOK   ;  break;
    3062:	19 82       	std	Y+1, r1	; 0x01

	}

	return LOC_enumState ;
    3064:	89 81       	ldd	r24, Y+1	; 0x01

}
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue    ( u8 Copy_u8Port , u8 Copy_u8Value ){
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	00 d0       	rcall	.+0      	; 0x307c <DIO_enumSetPortValue+0x6>
    307c:	00 d0       	rcall	.+0      	; 0x307e <DIO_enumSetPortValue+0x8>
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	8a 83       	std	Y+2, r24	; 0x02
    3086:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	89 83       	std	Y+1, r24	; 0x01

	switch( Copy_u8Port ){
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	3d 83       	std	Y+5, r19	; 0x05
    3094:	2c 83       	std	Y+4, r18	; 0x04
    3096:	8c 81       	ldd	r24, Y+4	; 0x04
    3098:	9d 81       	ldd	r25, Y+5	; 0x05
    309a:	81 30       	cpi	r24, 0x01	; 1
    309c:	91 05       	cpc	r25, r1
    309e:	d1 f0       	breq	.+52     	; 0x30d4 <DIO_enumSetPortValue+0x5e>
    30a0:	2c 81       	ldd	r18, Y+4	; 0x04
    30a2:	3d 81       	ldd	r19, Y+5	; 0x05
    30a4:	22 30       	cpi	r18, 0x02	; 2
    30a6:	31 05       	cpc	r19, r1
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <DIO_enumSetPortValue+0x3e>
    30aa:	8c 81       	ldd	r24, Y+4	; 0x04
    30ac:	9d 81       	ldd	r25, Y+5	; 0x05
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	61 f0       	breq	.+24     	; 0x30ca <DIO_enumSetPortValue+0x54>
    30b2:	1f c0       	rjmp	.+62     	; 0x30f2 <DIO_enumSetPortValue+0x7c>
    30b4:	2c 81       	ldd	r18, Y+4	; 0x04
    30b6:	3d 81       	ldd	r19, Y+5	; 0x05
    30b8:	22 30       	cpi	r18, 0x02	; 2
    30ba:	31 05       	cpc	r19, r1
    30bc:	81 f0       	breq	.+32     	; 0x30de <DIO_enumSetPortValue+0x68>
    30be:	8c 81       	ldd	r24, Y+4	; 0x04
    30c0:	9d 81       	ldd	r25, Y+5	; 0x05
    30c2:	83 30       	cpi	r24, 0x03	; 3
    30c4:	91 05       	cpc	r25, r1
    30c6:	81 f0       	breq	.+32     	; 0x30e8 <DIO_enumSetPortValue+0x72>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <DIO_enumSetPortValue+0x7c>

	case DIO_PORTA: PORTA_REG = Copy_u8Value     ;  break;
    30ca:	eb e3       	ldi	r30, 0x3B	; 59
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	8b 81       	ldd	r24, Y+3	; 0x03
    30d0:	80 83       	st	Z, r24
    30d2:	10 c0       	rjmp	.+32     	; 0x30f4 <DIO_enumSetPortValue+0x7e>
	case DIO_PORTB: PORTB_REG = Copy_u8Value     ;  break;
    30d4:	e8 e3       	ldi	r30, 0x38	; 56
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	80 83       	st	Z, r24
    30dc:	0b c0       	rjmp	.+22     	; 0x30f4 <DIO_enumSetPortValue+0x7e>
	case DIO_PORTC: PORTC_REG = Copy_u8Value     ;  break;
    30de:	e5 e3       	ldi	r30, 0x35	; 53
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	80 83       	st	Z, r24
    30e6:	06 c0       	rjmp	.+12     	; 0x30f4 <DIO_enumSetPortValue+0x7e>
	case DIO_PORTD: PORTD_REG = Copy_u8Value     ;  break;
    30e8:	e2 e3       	ldi	r30, 0x32	; 50
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	80 83       	st	Z, r24
    30f0:	01 c0       	rjmp	.+2      	; 0x30f4 <DIO_enumSetPortValue+0x7e>
	default       : LOC_enumState = DIO_NOK  ;  break;
    30f2:	19 82       	std	Y+1, r1	; 0x01

	}

	return LOC_enumState ;
    30f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <DIO_enumSetPinDirection>:

DIO_ErrorStatus DIO_enumSetPinDirection  ( u8 Copy_u8Port , u8 Copy_u8PinNumber , u8 Copy_u8Direction ){
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	00 d0       	rcall	.+0      	; 0x310c <DIO_enumSetPinDirection+0x6>
    310c:	00 d0       	rcall	.+0      	; 0x310e <DIO_enumSetPinDirection+0x8>
    310e:	00 d0       	rcall	.+0      	; 0x3110 <DIO_enumSetPinDirection+0xa>
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	8a 83       	std	Y+2, r24	; 0x02
    3116:	6b 83       	std	Y+3, r22	; 0x03
    3118:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	89 83       	std	Y+1, r24	; 0x01

	if( ( Copy_u8PinNumber >= DIO_PIN0 ) && ( Copy_u8PinNumber <= DIO_PIN7 ) ){
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	88 30       	cpi	r24, 0x08	; 8
    3122:	08 f0       	brcs	.+2      	; 0x3126 <DIO_enumSetPinDirection+0x20>
    3124:	e8 c0       	rjmp	.+464    	; 0x32f6 <DIO_enumSetPinDirection+0x1f0>

		switch( Copy_u8Port ){
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	3e 83       	std	Y+6, r19	; 0x06
    312e:	2d 83       	std	Y+5, r18	; 0x05
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	81 30       	cpi	r24, 0x01	; 1
    3136:	91 05       	cpc	r25, r1
    3138:	09 f4       	brne	.+2      	; 0x313c <DIO_enumSetPinDirection+0x36>
    313a:	48 c0       	rjmp	.+144    	; 0x31cc <DIO_enumSetPinDirection+0xc6>
    313c:	2d 81       	ldd	r18, Y+5	; 0x05
    313e:	3e 81       	ldd	r19, Y+6	; 0x06
    3140:	22 30       	cpi	r18, 0x02	; 2
    3142:	31 05       	cpc	r19, r1
    3144:	2c f4       	brge	.+10     	; 0x3150 <DIO_enumSetPinDirection+0x4a>
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	71 f0       	breq	.+28     	; 0x316a <DIO_enumSetPinDirection+0x64>
    314e:	d1 c0       	rjmp	.+418    	; 0x32f2 <DIO_enumSetPinDirection+0x1ec>
    3150:	2d 81       	ldd	r18, Y+5	; 0x05
    3152:	3e 81       	ldd	r19, Y+6	; 0x06
    3154:	22 30       	cpi	r18, 0x02	; 2
    3156:	31 05       	cpc	r19, r1
    3158:	09 f4       	brne	.+2      	; 0x315c <DIO_enumSetPinDirection+0x56>
    315a:	69 c0       	rjmp	.+210    	; 0x322e <DIO_enumSetPinDirection+0x128>
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	83 30       	cpi	r24, 0x03	; 3
    3162:	91 05       	cpc	r25, r1
    3164:	09 f4       	brne	.+2      	; 0x3168 <DIO_enumSetPinDirection+0x62>
    3166:	94 c0       	rjmp	.+296    	; 0x3290 <DIO_enumSetPinDirection+0x18a>
    3168:	c4 c0       	rjmp	.+392    	; 0x32f2 <DIO_enumSetPinDirection+0x1ec>

		case DIO_PORTA:

			if      ( Copy_u8Direction == DIO_OUTPUT ){ SET_BIT( DDRA_REG , Copy_u8PinNumber ); }
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	a1 f4       	brne	.+40     	; 0x3198 <DIO_enumSetPinDirection+0x92>
    3170:	aa e3       	ldi	r26, 0x3A	; 58
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	ea e3       	ldi	r30, 0x3A	; 58
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	48 2f       	mov	r20, r24
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	02 2e       	mov	r0, r18
    3188:	02 c0       	rjmp	.+4      	; 0x318e <DIO_enumSetPinDirection+0x88>
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	0a 94       	dec	r0
    3190:	e2 f7       	brpl	.-8      	; 0x318a <DIO_enumSetPinDirection+0x84>
    3192:	84 2b       	or	r24, r20
    3194:	8c 93       	st	X, r24
    3196:	b0 c0       	rjmp	.+352    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else if ( Copy_u8Direction == DIO_INPUT  ){ CLR_BIT( DDRA_REG , Copy_u8PinNumber ); }
    3198:	8c 81       	ldd	r24, Y+4	; 0x04
    319a:	88 23       	and	r24, r24
    319c:	a9 f4       	brne	.+42     	; 0x31c8 <DIO_enumSetPinDirection+0xc2>
    319e:	aa e3       	ldi	r26, 0x3A	; 58
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	ea e3       	ldi	r30, 0x3A	; 58
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	48 2f       	mov	r20, r24
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	02 2e       	mov	r0, r18
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <DIO_enumSetPinDirection+0xb6>
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	0a 94       	dec	r0
    31be:	e2 f7       	brpl	.-8      	; 0x31b8 <DIO_enumSetPinDirection+0xb2>
    31c0:	80 95       	com	r24
    31c2:	84 23       	and	r24, r20
    31c4:	8c 93       	st	X, r24
    31c6:	98 c0       	rjmp	.+304    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else{ LOC_enumState = DIO_NOK ; }
    31c8:	19 82       	std	Y+1, r1	; 0x01
    31ca:	96 c0       	rjmp	.+300    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			break;

		case DIO_PORTB:

			if      ( Copy_u8Direction == DIO_OUTPUT ){ SET_BIT( DDRB_REG , Copy_u8PinNumber ); }
    31cc:	8c 81       	ldd	r24, Y+4	; 0x04
    31ce:	81 30       	cpi	r24, 0x01	; 1
    31d0:	a1 f4       	brne	.+40     	; 0x31fa <DIO_enumSetPinDirection+0xf4>
    31d2:	a7 e3       	ldi	r26, 0x37	; 55
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e7 e3       	ldi	r30, 0x37	; 55
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	48 2f       	mov	r20, r24
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	02 2e       	mov	r0, r18
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <DIO_enumSetPinDirection+0xea>
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	0a 94       	dec	r0
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <DIO_enumSetPinDirection+0xe6>
    31f4:	84 2b       	or	r24, r20
    31f6:	8c 93       	st	X, r24
    31f8:	7f c0       	rjmp	.+254    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else if ( Copy_u8Direction == DIO_INPUT  ){ CLR_BIT( DDRB_REG , Copy_u8PinNumber ); }
    31fa:	8c 81       	ldd	r24, Y+4	; 0x04
    31fc:	88 23       	and	r24, r24
    31fe:	a9 f4       	brne	.+42     	; 0x322a <DIO_enumSetPinDirection+0x124>
    3200:	a7 e3       	ldi	r26, 0x37	; 55
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e7 e3       	ldi	r30, 0x37	; 55
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	48 2f       	mov	r20, r24
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	28 2f       	mov	r18, r24
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	02 2e       	mov	r0, r18
    3218:	02 c0       	rjmp	.+4      	; 0x321e <DIO_enumSetPinDirection+0x118>
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	0a 94       	dec	r0
    3220:	e2 f7       	brpl	.-8      	; 0x321a <DIO_enumSetPinDirection+0x114>
    3222:	80 95       	com	r24
    3224:	84 23       	and	r24, r20
    3226:	8c 93       	st	X, r24
    3228:	67 c0       	rjmp	.+206    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else{ LOC_enumState = DIO_NOK ; }
    322a:	19 82       	std	Y+1, r1	; 0x01
    322c:	65 c0       	rjmp	.+202    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			break;
		case DIO_PORTC:

			if      ( Copy_u8Direction == DIO_OUTPUT ){ SET_BIT( DDRC_REG , Copy_u8PinNumber ); }
    322e:	8c 81       	ldd	r24, Y+4	; 0x04
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	a1 f4       	brne	.+40     	; 0x325c <DIO_enumSetPinDirection+0x156>
    3234:	a4 e3       	ldi	r26, 0x34	; 52
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e4 e3       	ldi	r30, 0x34	; 52
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	48 2f       	mov	r20, r24
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	02 2e       	mov	r0, r18
    324c:	02 c0       	rjmp	.+4      	; 0x3252 <DIO_enumSetPinDirection+0x14c>
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	0a 94       	dec	r0
    3254:	e2 f7       	brpl	.-8      	; 0x324e <DIO_enumSetPinDirection+0x148>
    3256:	84 2b       	or	r24, r20
    3258:	8c 93       	st	X, r24
    325a:	4e c0       	rjmp	.+156    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else if ( Copy_u8Direction == DIO_INPUT  ){ CLR_BIT( DDRC_REG , Copy_u8PinNumber ); }
    325c:	8c 81       	ldd	r24, Y+4	; 0x04
    325e:	88 23       	and	r24, r24
    3260:	a9 f4       	brne	.+42     	; 0x328c <DIO_enumSetPinDirection+0x186>
    3262:	a4 e3       	ldi	r26, 0x34	; 52
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e4 e3       	ldi	r30, 0x34	; 52
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	48 2f       	mov	r20, r24
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	28 2f       	mov	r18, r24
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	02 2e       	mov	r0, r18
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <DIO_enumSetPinDirection+0x17a>
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	0a 94       	dec	r0
    3282:	e2 f7       	brpl	.-8      	; 0x327c <DIO_enumSetPinDirection+0x176>
    3284:	80 95       	com	r24
    3286:	84 23       	and	r24, r20
    3288:	8c 93       	st	X, r24
    328a:	36 c0       	rjmp	.+108    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else{ LOC_enumState = DIO_NOK ; }
    328c:	19 82       	std	Y+1, r1	; 0x01
    328e:	34 c0       	rjmp	.+104    	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			break;
		case DIO_PORTD:

			if      ( Copy_u8Direction == DIO_OUTPUT ){ SET_BIT( DDRD_REG , Copy_u8PinNumber ); }
    3290:	8c 81       	ldd	r24, Y+4	; 0x04
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	a1 f4       	brne	.+40     	; 0x32be <DIO_enumSetPinDirection+0x1b8>
    3296:	a1 e3       	ldi	r26, 0x31	; 49
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e1 e3       	ldi	r30, 0x31	; 49
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	48 2f       	mov	r20, r24
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	02 2e       	mov	r0, r18
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <DIO_enumSetPinDirection+0x1ae>
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	0a 94       	dec	r0
    32b6:	e2 f7       	brpl	.-8      	; 0x32b0 <DIO_enumSetPinDirection+0x1aa>
    32b8:	84 2b       	or	r24, r20
    32ba:	8c 93       	st	X, r24
    32bc:	1d c0       	rjmp	.+58     	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else if ( Copy_u8Direction == DIO_INPUT  ){ CLR_BIT( DDRD_REG , Copy_u8PinNumber ); }
    32be:	8c 81       	ldd	r24, Y+4	; 0x04
    32c0:	88 23       	and	r24, r24
    32c2:	a9 f4       	brne	.+42     	; 0x32ee <DIO_enumSetPinDirection+0x1e8>
    32c4:	a1 e3       	ldi	r26, 0x31	; 49
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e1 e3       	ldi	r30, 0x31	; 49
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	48 2f       	mov	r20, r24
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	02 2e       	mov	r0, r18
    32dc:	02 c0       	rjmp	.+4      	; 0x32e2 <DIO_enumSetPinDirection+0x1dc>
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	0a 94       	dec	r0
    32e4:	e2 f7       	brpl	.-8      	; 0x32de <DIO_enumSetPinDirection+0x1d8>
    32e6:	80 95       	com	r24
    32e8:	84 23       	and	r24, r20
    32ea:	8c 93       	st	X, r24
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			else{ LOC_enumState = DIO_NOK ; }
    32ee:	19 82       	std	Y+1, r1	; 0x01
    32f0:	03 c0       	rjmp	.+6      	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

			break;

		default      : LOC_enumState = DIO_NOK ; break;
    32f2:	19 82       	std	Y+1, r1	; 0x01
    32f4:	01 c0       	rjmp	.+2      	; 0x32f8 <DIO_enumSetPinDirection+0x1f2>

		}

	}else{ LOC_enumState = DIO_NOK ; }
    32f6:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState ;
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fa:	26 96       	adiw	r28, 0x06	; 6
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <DIO_enumSetPinValue>:
DIO_ErrorStatus DIO_enumSetPinValue      ( u8 Copy_u8Port , u8 Copy_u8PinNumber , u8 Copy_u8Value     ){
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	00 d0       	rcall	.+0      	; 0x3312 <DIO_enumSetPinValue+0x6>
    3312:	00 d0       	rcall	.+0      	; 0x3314 <DIO_enumSetPinValue+0x8>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <DIO_enumSetPinValue+0xa>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	8a 83       	std	Y+2, r24	; 0x02
    331c:	6b 83       	std	Y+3, r22	; 0x03
    331e:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	89 83       	std	Y+1, r24	; 0x01

	if( ( Copy_u8PinNumber >= DIO_PIN0 ) && ( Copy_u8PinNumber <= DIO_PIN7 ) ){
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	88 30       	cpi	r24, 0x08	; 8
    3328:	08 f0       	brcs	.+2      	; 0x332c <DIO_enumSetPinValue+0x20>
    332a:	e6 c0       	rjmp	.+460    	; 0x34f8 <DIO_enumSetPinValue+0x1ec>

		switch( Copy_u8Port ){
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	3e 83       	std	Y+6, r19	; 0x06
    3334:	2d 83       	std	Y+5, r18	; 0x05
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	91 05       	cpc	r25, r1
    333e:	09 f4       	brne	.+2      	; 0x3342 <DIO_enumSetPinValue+0x36>
    3340:	48 c0       	rjmp	.+144    	; 0x33d2 <DIO_enumSetPinValue+0xc6>
    3342:	2d 81       	ldd	r18, Y+5	; 0x05
    3344:	3e 81       	ldd	r19, Y+6	; 0x06
    3346:	22 30       	cpi	r18, 0x02	; 2
    3348:	31 05       	cpc	r19, r1
    334a:	2c f4       	brge	.+10     	; 0x3356 <DIO_enumSetPinValue+0x4a>
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	71 f0       	breq	.+28     	; 0x3370 <DIO_enumSetPinValue+0x64>
    3354:	d2 c0       	rjmp	.+420    	; 0x34fa <DIO_enumSetPinValue+0x1ee>
    3356:	2d 81       	ldd	r18, Y+5	; 0x05
    3358:	3e 81       	ldd	r19, Y+6	; 0x06
    335a:	22 30       	cpi	r18, 0x02	; 2
    335c:	31 05       	cpc	r19, r1
    335e:	09 f4       	brne	.+2      	; 0x3362 <DIO_enumSetPinValue+0x56>
    3360:	69 c0       	rjmp	.+210    	; 0x3434 <DIO_enumSetPinValue+0x128>
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	83 30       	cpi	r24, 0x03	; 3
    3368:	91 05       	cpc	r25, r1
    336a:	09 f4       	brne	.+2      	; 0x336e <DIO_enumSetPinValue+0x62>
    336c:	94 c0       	rjmp	.+296    	; 0x3496 <DIO_enumSetPinValue+0x18a>
    336e:	c5 c0       	rjmp	.+394    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

		case DIO_PORTA:

			if      ( Copy_u8Value == DIO_HIGH ){ SET_BIT( PORTA_REG , Copy_u8PinNumber ); }
    3370:	8c 81       	ldd	r24, Y+4	; 0x04
    3372:	81 30       	cpi	r24, 0x01	; 1
    3374:	a1 f4       	brne	.+40     	; 0x339e <DIO_enumSetPinValue+0x92>
    3376:	ab e3       	ldi	r26, 0x3B	; 59
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	eb e3       	ldi	r30, 0x3B	; 59
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	48 2f       	mov	r20, r24
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	02 2e       	mov	r0, r18
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <DIO_enumSetPinValue+0x88>
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	0a 94       	dec	r0
    3396:	e2 f7       	brpl	.-8      	; 0x3390 <DIO_enumSetPinValue+0x84>
    3398:	84 2b       	or	r24, r20
    339a:	8c 93       	st	X, r24
    339c:	ae c0       	rjmp	.+348    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else if ( Copy_u8Value == DIO_LOW   ){ CLR_BIT( PORTA_REG , Copy_u8PinNumber ); }
    339e:	8c 81       	ldd	r24, Y+4	; 0x04
    33a0:	88 23       	and	r24, r24
    33a2:	a9 f4       	brne	.+42     	; 0x33ce <DIO_enumSetPinValue+0xc2>
    33a4:	ab e3       	ldi	r26, 0x3B	; 59
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	eb e3       	ldi	r30, 0x3B	; 59
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	48 2f       	mov	r20, r24
    33b0:	8b 81       	ldd	r24, Y+3	; 0x03
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	02 2e       	mov	r0, r18
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <DIO_enumSetPinValue+0xb6>
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	0a 94       	dec	r0
    33c4:	e2 f7       	brpl	.-8      	; 0x33be <DIO_enumSetPinValue+0xb2>
    33c6:	80 95       	com	r24
    33c8:	84 23       	and	r24, r20
    33ca:	8c 93       	st	X, r24
    33cc:	96 c0       	rjmp	.+300    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else{ LOC_enumState = DIO_NOK ; }
    33ce:	19 82       	std	Y+1, r1	; 0x01
    33d0:	94 c0       	rjmp	.+296    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			break;

		case DIO_PORTB:

			if      ( Copy_u8Value == DIO_HIGH ){ SET_BIT( PORTB_REG , Copy_u8PinNumber ); }
    33d2:	8c 81       	ldd	r24, Y+4	; 0x04
    33d4:	81 30       	cpi	r24, 0x01	; 1
    33d6:	a1 f4       	brne	.+40     	; 0x3400 <DIO_enumSetPinValue+0xf4>
    33d8:	a8 e3       	ldi	r26, 0x38	; 56
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e8 e3       	ldi	r30, 0x38	; 56
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	48 2f       	mov	r20, r24
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	02 2e       	mov	r0, r18
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <DIO_enumSetPinValue+0xea>
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	0a 94       	dec	r0
    33f8:	e2 f7       	brpl	.-8      	; 0x33f2 <DIO_enumSetPinValue+0xe6>
    33fa:	84 2b       	or	r24, r20
    33fc:	8c 93       	st	X, r24
    33fe:	7d c0       	rjmp	.+250    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else if ( Copy_u8Value == DIO_LOW  ){ CLR_BIT( PORTB_REG , Copy_u8PinNumber ); }
    3400:	8c 81       	ldd	r24, Y+4	; 0x04
    3402:	88 23       	and	r24, r24
    3404:	a9 f4       	brne	.+42     	; 0x3430 <DIO_enumSetPinValue+0x124>
    3406:	a8 e3       	ldi	r26, 0x38	; 56
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e8 e3       	ldi	r30, 0x38	; 56
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	48 2f       	mov	r20, r24
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	28 2f       	mov	r18, r24
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	02 2e       	mov	r0, r18
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <DIO_enumSetPinValue+0x118>
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	0a 94       	dec	r0
    3426:	e2 f7       	brpl	.-8      	; 0x3420 <DIO_enumSetPinValue+0x114>
    3428:	80 95       	com	r24
    342a:	84 23       	and	r24, r20
    342c:	8c 93       	st	X, r24
    342e:	65 c0       	rjmp	.+202    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else{ LOC_enumState = DIO_NOK ; }
    3430:	19 82       	std	Y+1, r1	; 0x01
    3432:	63 c0       	rjmp	.+198    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			break;
		case DIO_PORTC:

			if      ( Copy_u8Value == DIO_HIGH ){ SET_BIT( PORTC_REG , Copy_u8PinNumber ); }
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	a1 f4       	brne	.+40     	; 0x3462 <DIO_enumSetPinValue+0x156>
    343a:	a5 e3       	ldi	r26, 0x35	; 53
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e5 e3       	ldi	r30, 0x35	; 53
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	48 2f       	mov	r20, r24
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	02 2e       	mov	r0, r18
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <DIO_enumSetPinValue+0x14c>
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	0a 94       	dec	r0
    345a:	e2 f7       	brpl	.-8      	; 0x3454 <DIO_enumSetPinValue+0x148>
    345c:	84 2b       	or	r24, r20
    345e:	8c 93       	st	X, r24
    3460:	4c c0       	rjmp	.+152    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else if ( Copy_u8Value == DIO_LOW  ){ CLR_BIT( PORTC_REG , Copy_u8PinNumber ); }
    3462:	8c 81       	ldd	r24, Y+4	; 0x04
    3464:	88 23       	and	r24, r24
    3466:	a9 f4       	brne	.+42     	; 0x3492 <DIO_enumSetPinValue+0x186>
    3468:	a5 e3       	ldi	r26, 0x35	; 53
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	e5 e3       	ldi	r30, 0x35	; 53
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	48 2f       	mov	r20, r24
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	28 2f       	mov	r18, r24
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	02 2e       	mov	r0, r18
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <DIO_enumSetPinValue+0x17a>
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	0a 94       	dec	r0
    3488:	e2 f7       	brpl	.-8      	; 0x3482 <DIO_enumSetPinValue+0x176>
    348a:	80 95       	com	r24
    348c:	84 23       	and	r24, r20
    348e:	8c 93       	st	X, r24
    3490:	34 c0       	rjmp	.+104    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else{ LOC_enumState = DIO_NOK ; }
    3492:	19 82       	std	Y+1, r1	; 0x01
    3494:	32 c0       	rjmp	.+100    	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			break;
		case DIO_PORTD:

			if      ( Copy_u8Value == DIO_HIGH ){ SET_BIT( PORTD_REG , Copy_u8PinNumber ); }
    3496:	8c 81       	ldd	r24, Y+4	; 0x04
    3498:	81 30       	cpi	r24, 0x01	; 1
    349a:	a1 f4       	brne	.+40     	; 0x34c4 <DIO_enumSetPinValue+0x1b8>
    349c:	a2 e3       	ldi	r26, 0x32	; 50
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e2 e3       	ldi	r30, 0x32	; 50
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	48 2f       	mov	r20, r24
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	02 2e       	mov	r0, r18
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <DIO_enumSetPinValue+0x1ae>
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	0a 94       	dec	r0
    34bc:	e2 f7       	brpl	.-8      	; 0x34b6 <DIO_enumSetPinValue+0x1aa>
    34be:	84 2b       	or	r24, r20
    34c0:	8c 93       	st	X, r24
    34c2:	1b c0       	rjmp	.+54     	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else if ( Copy_u8Value == DIO_LOW  ){ CLR_BIT( PORTD_REG , Copy_u8PinNumber ); }
    34c4:	8c 81       	ldd	r24, Y+4	; 0x04
    34c6:	88 23       	and	r24, r24
    34c8:	a9 f4       	brne	.+42     	; 0x34f4 <DIO_enumSetPinValue+0x1e8>
    34ca:	a2 e3       	ldi	r26, 0x32	; 50
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e2 e3       	ldi	r30, 0x32	; 50
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	48 2f       	mov	r20, r24
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	02 2e       	mov	r0, r18
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <DIO_enumSetPinValue+0x1dc>
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	0a 94       	dec	r0
    34ea:	e2 f7       	brpl	.-8      	; 0x34e4 <DIO_enumSetPinValue+0x1d8>
    34ec:	80 95       	com	r24
    34ee:	84 23       	and	r24, r20
    34f0:	8c 93       	st	X, r24
    34f2:	03 c0       	rjmp	.+6      	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			else{ LOC_enumState = DIO_NOK ; }
    34f4:	19 82       	std	Y+1, r1	; 0x01
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <DIO_enumSetPinValue+0x1ee>

			break;

		}

	}else{ LOC_enumState = DIO_NOK ; }
    34f8:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState ;
    34fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    34fc:	26 96       	adiw	r28, 0x06	; 6
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <DIO_enumGetPortValue>:

DIO_ErrorStatus DIO_enumGetPortValue     ( u8 Copy_u8Port , u8 * Copy_u8ptrData ){
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <DIO_enumGetPortValue+0x6>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <DIO_enumGetPortValue+0x8>
    3516:	00 d0       	rcall	.+0      	; 0x3518 <DIO_enumGetPortValue+0xa>
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	8a 83       	std	Y+2, r24	; 0x02
    351e:	7c 83       	std	Y+4, r23	; 0x04
    3520:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	89 83       	std	Y+1, r24	; 0x01

	switch( Copy_u8Port ){
    3526:	8a 81       	ldd	r24, Y+2	; 0x02
    3528:	28 2f       	mov	r18, r24
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	3e 83       	std	Y+6, r19	; 0x06
    352e:	2d 83       	std	Y+5, r18	; 0x05
    3530:	8d 81       	ldd	r24, Y+5	; 0x05
    3532:	9e 81       	ldd	r25, Y+6	; 0x06
    3534:	81 30       	cpi	r24, 0x01	; 1
    3536:	91 05       	cpc	r25, r1
    3538:	e1 f0       	breq	.+56     	; 0x3572 <DIO_enumGetPortValue+0x64>
    353a:	2d 81       	ldd	r18, Y+5	; 0x05
    353c:	3e 81       	ldd	r19, Y+6	; 0x06
    353e:	22 30       	cpi	r18, 0x02	; 2
    3540:	31 05       	cpc	r19, r1
    3542:	2c f4       	brge	.+10     	; 0x354e <DIO_enumGetPortValue+0x40>
    3544:	8d 81       	ldd	r24, Y+5	; 0x05
    3546:	9e 81       	ldd	r25, Y+6	; 0x06
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	61 f0       	breq	.+24     	; 0x3564 <DIO_enumGetPortValue+0x56>
    354c:	27 c0       	rjmp	.+78     	; 0x359c <DIO_enumGetPortValue+0x8e>
    354e:	2d 81       	ldd	r18, Y+5	; 0x05
    3550:	3e 81       	ldd	r19, Y+6	; 0x06
    3552:	22 30       	cpi	r18, 0x02	; 2
    3554:	31 05       	cpc	r19, r1
    3556:	a1 f0       	breq	.+40     	; 0x3580 <DIO_enumGetPortValue+0x72>
    3558:	8d 81       	ldd	r24, Y+5	; 0x05
    355a:	9e 81       	ldd	r25, Y+6	; 0x06
    355c:	83 30       	cpi	r24, 0x03	; 3
    355e:	91 05       	cpc	r25, r1
    3560:	b1 f0       	breq	.+44     	; 0x358e <DIO_enumGetPortValue+0x80>
    3562:	1c c0       	rjmp	.+56     	; 0x359c <DIO_enumGetPortValue+0x8e>

	case DIO_PORTA : *Copy_u8ptrData = PINA_REG ; break;
    3564:	e9 e3       	ldi	r30, 0x39	; 57
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	eb 81       	ldd	r30, Y+3	; 0x03
    356c:	fc 81       	ldd	r31, Y+4	; 0x04
    356e:	80 83       	st	Z, r24
    3570:	16 c0       	rjmp	.+44     	; 0x359e <DIO_enumGetPortValue+0x90>
	case DIO_PORTB : *Copy_u8ptrData = PINB_REG ; break;
    3572:	e6 e3       	ldi	r30, 0x36	; 54
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	eb 81       	ldd	r30, Y+3	; 0x03
    357a:	fc 81       	ldd	r31, Y+4	; 0x04
    357c:	80 83       	st	Z, r24
    357e:	0f c0       	rjmp	.+30     	; 0x359e <DIO_enumGetPortValue+0x90>
	case DIO_PORTC : *Copy_u8ptrData = PINC_REG ; break;
    3580:	e3 e3       	ldi	r30, 0x33	; 51
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	eb 81       	ldd	r30, Y+3	; 0x03
    3588:	fc 81       	ldd	r31, Y+4	; 0x04
    358a:	80 83       	st	Z, r24
    358c:	08 c0       	rjmp	.+16     	; 0x359e <DIO_enumGetPortValue+0x90>
	case DIO_PORTD : *Copy_u8ptrData = PIND_REG ; break;
    358e:	e0 e3       	ldi	r30, 0x30	; 48
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	eb 81       	ldd	r30, Y+3	; 0x03
    3596:	fc 81       	ldd	r31, Y+4	; 0x04
    3598:	80 83       	st	Z, r24
    359a:	01 c0       	rjmp	.+2      	; 0x359e <DIO_enumGetPortValue+0x90>
	default        : LOC_enumState = DIO_NOK    ; break;
    359c:	19 82       	std	Y+1, r1	; 0x01

	}

	return LOC_enumState ;
    359e:	89 81       	ldd	r24, Y+1	; 0x01

}
    35a0:	26 96       	adiw	r28, 0x06	; 6
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <DIO_enumGetPinValue>:
DIO_ErrorStatus DIO_enumGetPinValue      ( u8 Copy_u8Port , u8 Copy_u8PinNumber , u8 * Copy_u8ptrData ){
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	27 97       	sbiw	r28, 0x07	; 7
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	8a 83       	std	Y+2, r24	; 0x02
    35c8:	6b 83       	std	Y+3, r22	; 0x03
    35ca:	5d 83       	std	Y+5, r21	; 0x05
    35cc:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	89 83       	std	Y+1, r24	; 0x01

	if( ( Copy_u8PinNumber >= DIO_PIN0 ) && ( Copy_u8PinNumber <= DIO_PIN7 ) ){
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	88 30       	cpi	r24, 0x08	; 8
    35d6:	08 f0       	brcs	.+2      	; 0x35da <DIO_enumGetPinValue+0x28>
    35d8:	73 c0       	rjmp	.+230    	; 0x36c0 <DIO_enumGetPinValue+0x10e>

		switch( Copy_u8Port ){
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	3f 83       	std	Y+7, r19	; 0x07
    35e2:	2e 83       	std	Y+6, r18	; 0x06
    35e4:	4e 81       	ldd	r20, Y+6	; 0x06
    35e6:	5f 81       	ldd	r21, Y+7	; 0x07
    35e8:	41 30       	cpi	r20, 0x01	; 1
    35ea:	51 05       	cpc	r21, r1
    35ec:	59 f1       	breq	.+86     	; 0x3644 <DIO_enumGetPinValue+0x92>
    35ee:	8e 81       	ldd	r24, Y+6	; 0x06
    35f0:	9f 81       	ldd	r25, Y+7	; 0x07
    35f2:	82 30       	cpi	r24, 0x02	; 2
    35f4:	91 05       	cpc	r25, r1
    35f6:	34 f4       	brge	.+12     	; 0x3604 <DIO_enumGetPinValue+0x52>
    35f8:	2e 81       	ldd	r18, Y+6	; 0x06
    35fa:	3f 81       	ldd	r19, Y+7	; 0x07
    35fc:	21 15       	cp	r18, r1
    35fe:	31 05       	cpc	r19, r1
    3600:	69 f0       	breq	.+26     	; 0x361c <DIO_enumGetPinValue+0x6a>
    3602:	5c c0       	rjmp	.+184    	; 0x36bc <DIO_enumGetPinValue+0x10a>
    3604:	4e 81       	ldd	r20, Y+6	; 0x06
    3606:	5f 81       	ldd	r21, Y+7	; 0x07
    3608:	42 30       	cpi	r20, 0x02	; 2
    360a:	51 05       	cpc	r21, r1
    360c:	79 f1       	breq	.+94     	; 0x366c <DIO_enumGetPinValue+0xba>
    360e:	8e 81       	ldd	r24, Y+6	; 0x06
    3610:	9f 81       	ldd	r25, Y+7	; 0x07
    3612:	83 30       	cpi	r24, 0x03	; 3
    3614:	91 05       	cpc	r25, r1
    3616:	09 f4       	brne	.+2      	; 0x361a <DIO_enumGetPinValue+0x68>
    3618:	3d c0       	rjmp	.+122    	; 0x3694 <DIO_enumGetPinValue+0xe2>
    361a:	50 c0       	rjmp	.+160    	; 0x36bc <DIO_enumGetPinValue+0x10a>

		case DIO_PORTA : *Copy_u8ptrData = GET_BIT( PINA_REG , Copy_u8PinNumber ) ; break;
    361c:	e9 e3       	ldi	r30, 0x39	; 57
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	88 2f       	mov	r24, r24
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a9 01       	movw	r20, r18
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <DIO_enumGetPinValue+0x82>
    3630:	55 95       	asr	r21
    3632:	47 95       	ror	r20
    3634:	8a 95       	dec	r24
    3636:	e2 f7       	brpl	.-8      	; 0x3630 <DIO_enumGetPinValue+0x7e>
    3638:	ca 01       	movw	r24, r20
    363a:	81 70       	andi	r24, 0x01	; 1
    363c:	ec 81       	ldd	r30, Y+4	; 0x04
    363e:	fd 81       	ldd	r31, Y+5	; 0x05
    3640:	80 83       	st	Z, r24
    3642:	3f c0       	rjmp	.+126    	; 0x36c2 <DIO_enumGetPinValue+0x110>
		case DIO_PORTB : *Copy_u8ptrData = GET_BIT( PINB_REG , Copy_u8PinNumber ) ; break;
    3644:	e6 e3       	ldi	r30, 0x36	; 54
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	88 2f       	mov	r24, r24
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a9 01       	movw	r20, r18
    3656:	02 c0       	rjmp	.+4      	; 0x365c <DIO_enumGetPinValue+0xaa>
    3658:	55 95       	asr	r21
    365a:	47 95       	ror	r20
    365c:	8a 95       	dec	r24
    365e:	e2 f7       	brpl	.-8      	; 0x3658 <DIO_enumGetPinValue+0xa6>
    3660:	ca 01       	movw	r24, r20
    3662:	81 70       	andi	r24, 0x01	; 1
    3664:	ec 81       	ldd	r30, Y+4	; 0x04
    3666:	fd 81       	ldd	r31, Y+5	; 0x05
    3668:	80 83       	st	Z, r24
    366a:	2b c0       	rjmp	.+86     	; 0x36c2 <DIO_enumGetPinValue+0x110>
		case DIO_PORTC : *Copy_u8ptrData = GET_BIT( PINC_REG , Copy_u8PinNumber ) ; break;
    366c:	e3 e3       	ldi	r30, 0x33	; 51
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	8b 81       	ldd	r24, Y+3	; 0x03
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	a9 01       	movw	r20, r18
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <DIO_enumGetPinValue+0xd2>
    3680:	55 95       	asr	r21
    3682:	47 95       	ror	r20
    3684:	8a 95       	dec	r24
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <DIO_enumGetPinValue+0xce>
    3688:	ca 01       	movw	r24, r20
    368a:	81 70       	andi	r24, 0x01	; 1
    368c:	ec 81       	ldd	r30, Y+4	; 0x04
    368e:	fd 81       	ldd	r31, Y+5	; 0x05
    3690:	80 83       	st	Z, r24
    3692:	17 c0       	rjmp	.+46     	; 0x36c2 <DIO_enumGetPinValue+0x110>
		case DIO_PORTD : *Copy_u8ptrData = GET_BIT( PIND_REG , Copy_u8PinNumber ) ; break;
    3694:	e0 e3       	ldi	r30, 0x30	; 48
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	80 81       	ld	r24, Z
    369a:	28 2f       	mov	r18, r24
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	8b 81       	ldd	r24, Y+3	; 0x03
    36a0:	88 2f       	mov	r24, r24
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a9 01       	movw	r20, r18
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <DIO_enumGetPinValue+0xfa>
    36a8:	55 95       	asr	r21
    36aa:	47 95       	ror	r20
    36ac:	8a 95       	dec	r24
    36ae:	e2 f7       	brpl	.-8      	; 0x36a8 <DIO_enumGetPinValue+0xf6>
    36b0:	ca 01       	movw	r24, r20
    36b2:	81 70       	andi	r24, 0x01	; 1
    36b4:	ec 81       	ldd	r30, Y+4	; 0x04
    36b6:	fd 81       	ldd	r31, Y+5	; 0x05
    36b8:	80 83       	st	Z, r24
    36ba:	03 c0       	rjmp	.+6      	; 0x36c2 <DIO_enumGetPinValue+0x110>
		default        : LOC_enumState = DIO_NOK    ; break;
    36bc:	19 82       	std	Y+1, r1	; 0x01
    36be:	01 c0       	rjmp	.+2      	; 0x36c2 <DIO_enumGetPinValue+0x110>

		}

	}
	else{ LOC_enumState = DIO_NOK    ; }
    36c0:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState ;
    36c2:	89 81       	ldd	r24, Y+1	; 0x01

}
    36c4:	27 96       	adiw	r28, 0x07	; 7
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"


void KPD_voidInit     (void){
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62

	DIO_enumSetPinDirection( KPD_PORT , KPD_R0 , DIO_INPUT );
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	64 e0       	ldi	r22, 0x04	; 4
    36e2:	40 e0       	ldi	r20, 0x00	; 0
    36e4:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_R1 , DIO_INPUT );
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	65 e0       	ldi	r22, 0x05	; 5
    36ec:	40 e0       	ldi	r20, 0x00	; 0
    36ee:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_R2 , DIO_INPUT );
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	66 e0       	ldi	r22, 0x06	; 6
    36f6:	40 e0       	ldi	r20, 0x00	; 0
    36f8:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_R3 , DIO_INPUT );
    36fc:	82 e0       	ldi	r24, 0x02	; 2
    36fe:	67 e0       	ldi	r22, 0x07	; 7
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue    ( KPD_PORT , KPD_R0 , DIO_HIGH );
    3706:	82 e0       	ldi	r24, 0x02	; 2
    3708:	64 e0       	ldi	r22, 0x04	; 4
    370a:	41 e0       	ldi	r20, 0x01	; 1
    370c:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_R1 , DIO_HIGH );
    3710:	82 e0       	ldi	r24, 0x02	; 2
    3712:	65 e0       	ldi	r22, 0x05	; 5
    3714:	41 e0       	ldi	r20, 0x01	; 1
    3716:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_R2 , DIO_HIGH );
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	66 e0       	ldi	r22, 0x06	; 6
    371e:	41 e0       	ldi	r20, 0x01	; 1
    3720:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_R3 , DIO_HIGH );
    3724:	82 e0       	ldi	r24, 0x02	; 2
    3726:	67 e0       	ldi	r22, 0x07	; 7
    3728:	41 e0       	ldi	r20, 0x01	; 1
    372a:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>

	DIO_enumSetPinDirection( KPD_PORT , KPD_C0 , DIO_OUTPUT );
    372e:	82 e0       	ldi	r24, 0x02	; 2
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	41 e0       	ldi	r20, 0x01	; 1
    3734:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C1 , DIO_OUTPUT );
    3738:	82 e0       	ldi	r24, 0x02	; 2
    373a:	61 e0       	ldi	r22, 0x01	; 1
    373c:	41 e0       	ldi	r20, 0x01	; 1
    373e:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C2 , DIO_OUTPUT );
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	62 e0       	ldi	r22, 0x02	; 2
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C3 , DIO_OUTPUT );
    374c:	82 e0       	ldi	r24, 0x02	; 2
    374e:	63 e0       	ldi	r22, 0x03	; 3
    3750:	41 e0       	ldi	r20, 0x01	; 1
    3752:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue    ( KPD_PORT , KPD_C0 , DIO_HIGH );
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C1 , DIO_HIGH );
    3760:	82 e0       	ldi	r24, 0x02	; 2
    3762:	61 e0       	ldi	r22, 0x01	; 1
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C2 , DIO_HIGH );
    376a:	82 e0       	ldi	r24, 0x02	; 2
    376c:	62 e0       	ldi	r22, 0x02	; 2
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C3 , DIO_HIGH );
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	63 e0       	ldi	r22, 0x03	; 3
    3778:	41 e0       	ldi	r20, 0x01	; 1
    377a:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>

}
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <KPD_u8GetPressed>:


u8   KPD_u8GetPressed (void){
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	62 97       	sbiw	r28, 0x12	; 18
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61

	u8 LOC_u8ReturnData = 0 ;
    3798:	19 8a       	std	Y+17, r1	; 0x11
	u8 LOC_u8ColIterator    ;
	u8 LOC_u8RowIterator    ;
	u8 LOC_u8GetPressed     ;

	for( LOC_u8ColIterator = 0 + KPD_COL_INIT ; LOC_u8ColIterator < KPD_COL_END + 1 ; LOC_u8ColIterator++ ){
    379a:	18 8a       	std	Y+16, r1	; 0x10
    379c:	d4 c0       	rjmp	.+424    	; 0x3946 <KPD_u8GetPressed+0x1c2>

		DIO_enumSetPinValue( KPD_PORT , LOC_u8ColIterator , DIO_LOW );
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	68 89       	ldd	r22, Y+16	; 0x10
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>

		for( LOC_u8RowIterator = 0 + KPD_ROW_INIT ; LOC_u8RowIterator < KPD_ROW_END + 1 ; LOC_u8RowIterator++ ){
    37a8:	84 e0       	ldi	r24, 0x04	; 4
    37aa:	8f 87       	std	Y+15, r24	; 0x0f
    37ac:	c0 c0       	rjmp	.+384    	; 0x392e <KPD_u8GetPressed+0x1aa>

			DIO_enumGetPinValue( KPD_PORT , LOC_u8RowIterator , &LOC_u8GetPressed );
    37ae:	9e 01       	movw	r18, r28
    37b0:	2e 5e       	subi	r18, 0xEE	; 238
    37b2:	3f 4f       	sbci	r19, 0xFF	; 255
    37b4:	82 e0       	ldi	r24, 0x02	; 2
    37b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    37b8:	a9 01       	movw	r20, r18
    37ba:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <DIO_enumGetPinValue>
			if( LOC_u8GetPressed == 0 ){
    37be:	8a 89       	ldd	r24, Y+18	; 0x12
    37c0:	88 23       	and	r24, r24
    37c2:	09 f0       	breq	.+2      	; 0x37c6 <KPD_u8GetPressed+0x42>
    37c4:	b1 c0       	rjmp	.+354    	; 0x3928 <KPD_u8GetPressed+0x1a4>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a8 e4       	ldi	r26, 0x48	; 72
    37cc:	b2 e4       	ldi	r27, 0x42	; 66
    37ce:	8b 87       	std	Y+11, r24	; 0x0b
    37d0:	9c 87       	std	Y+12, r25	; 0x0c
    37d2:	ad 87       	std	Y+13, r26	; 0x0d
    37d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	98 87       	std	Y+8, r25	; 0x08
    37f2:	a9 87       	std	Y+9, r26	; 0x09
    37f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <KPD_u8GetPressed+0x94>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <KPD_u8GetPressed+0x112>
	else if (__tmp > 65535)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <KPD_u8GetPressed+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <KPD_u8GetPressed+0xf4>
    385a:	88 ec       	ldi	r24, 0xC8	; 200
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <KPD_u8GetPressed+0xe2>
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <KPD_u8GetPressed+0xd6>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <KPD_u8GetPressed+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6f 81       	ldd	r22, Y+7	; 0x07
    3884:	78 85       	ldd	r23, Y+8	; 0x08
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <KPD_u8GetPressed+0x11e>
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(50);

				DIO_enumGetPinValue( KPD_PORT , LOC_u8RowIterator , &LOC_u8GetPressed );
    38aa:	9e 01       	movw	r18, r28
    38ac:	2e 5e       	subi	r18, 0xEE	; 238
    38ae:	3f 4f       	sbci	r19, 0xFF	; 255
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    38b4:	a9 01       	movw	r20, r18
    38b6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <DIO_enumGetPinValue>
				if( LOC_u8GetPressed == 0 ){
    38ba:	8a 89       	ldd	r24, Y+18	; 0x12
    38bc:	88 23       	and	r24, r24
    38be:	f9 f4       	brne	.+62     	; 0x38fe <KPD_u8GetPressed+0x17a>

					LOC_u8ReturnData = KPD_u8Buttons[ LOC_u8RowIterator - KPD_ROW_INIT ][ LOC_u8ColIterator - KPD_COL_INIT ];
    38c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c2:	88 2f       	mov	r24, r24
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	ac 01       	movw	r20, r24
    38c8:	44 50       	subi	r20, 0x04	; 4
    38ca:	50 40       	sbci	r21, 0x00	; 0
    38cc:	88 89       	ldd	r24, Y+16	; 0x10
    38ce:	28 2f       	mov	r18, r24
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	ca 01       	movw	r24, r20
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	82 0f       	add	r24, r18
    38de:	93 1f       	adc	r25, r19
    38e0:	fc 01       	movw	r30, r24
    38e2:	e2 56       	subi	r30, 0x62	; 98
    38e4:	fe 4f       	sbci	r31, 0xFE	; 254
    38e6:	80 81       	ld	r24, Z
    38e8:	89 8b       	std	Y+17, r24	; 0x11
					DIO_enumSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
    38ea:	83 e0       	ldi	r24, 0x03	; 3
    38ec:	63 e0       	ldi	r22, 0x03	; 3
    38ee:	41 e0       	ldi	r20, 0x01	; 1
    38f0:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
					DIO_enumSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	63 e0       	ldi	r22, 0x03	; 3
    38f8:	41 e0       	ldi	r20, 0x01	; 1
    38fa:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
				}

				DIO_enumGetPinValue( KPD_PORT , LOC_u8RowIterator , &LOC_u8GetPressed );
    38fe:	9e 01       	movw	r18, r28
    3900:	2e 5e       	subi	r18, 0xEE	; 238
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	82 e0       	ldi	r24, 0x02	; 2
    3906:	6f 85       	ldd	r22, Y+15	; 0x0f
    3908:	a9 01       	movw	r20, r18
    390a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <DIO_enumGetPinValue>
    390e:	08 c0       	rjmp	.+16     	; 0x3920 <KPD_u8GetPressed+0x19c>
				while( LOC_u8GetPressed == 0 ){

					DIO_enumGetPinValue( KPD_PORT , LOC_u8RowIterator , &LOC_u8GetPressed );
    3910:	9e 01       	movw	r18, r28
    3912:	2e 5e       	subi	r18, 0xEE	; 238
    3914:	3f 4f       	sbci	r19, 0xFF	; 255
    3916:	82 e0       	ldi	r24, 0x02	; 2
    3918:	6f 85       	ldd	r22, Y+15	; 0x0f
    391a:	a9 01       	movw	r20, r18
    391c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <DIO_enumGetPinValue>
					DIO_enumSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
					DIO_enumSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
				}

				DIO_enumGetPinValue( KPD_PORT , LOC_u8RowIterator , &LOC_u8GetPressed );
				while( LOC_u8GetPressed == 0 ){
    3920:	8a 89       	ldd	r24, Y+18	; 0x12
    3922:	88 23       	and	r24, r24
    3924:	a9 f3       	breq	.-22     	; 0x3910 <KPD_u8GetPressed+0x18c>
    3926:	07 c0       	rjmp	.+14     	; 0x3936 <KPD_u8GetPressed+0x1b2>

	for( LOC_u8ColIterator = 0 + KPD_COL_INIT ; LOC_u8ColIterator < KPD_COL_END + 1 ; LOC_u8ColIterator++ ){

		DIO_enumSetPinValue( KPD_PORT , LOC_u8ColIterator , DIO_LOW );

		for( LOC_u8RowIterator = 0 + KPD_ROW_INIT ; LOC_u8RowIterator < KPD_ROW_END + 1 ; LOC_u8RowIterator++ ){
    3928:	8f 85       	ldd	r24, Y+15	; 0x0f
    392a:	8f 5f       	subi	r24, 0xFF	; 255
    392c:	8f 87       	std	Y+15, r24	; 0x0f
    392e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3930:	88 30       	cpi	r24, 0x08	; 8
    3932:	08 f4       	brcc	.+2      	; 0x3936 <KPD_u8GetPressed+0x1b2>
    3934:	3c cf       	rjmp	.-392    	; 0x37ae <KPD_u8GetPressed+0x2a>

			}

		}

		DIO_enumSetPinValue( KPD_PORT , LOC_u8ColIterator , DIO_HIGH );
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	68 89       	ldd	r22, Y+16	; 0x10
    393a:	41 e0       	ldi	r20, 0x01	; 1
    393c:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	u8 LOC_u8ReturnData = 0 ;
	u8 LOC_u8ColIterator    ;
	u8 LOC_u8RowIterator    ;
	u8 LOC_u8GetPressed     ;

	for( LOC_u8ColIterator = 0 + KPD_COL_INIT ; LOC_u8ColIterator < KPD_COL_END + 1 ; LOC_u8ColIterator++ ){
    3940:	88 89       	ldd	r24, Y+16	; 0x10
    3942:	8f 5f       	subi	r24, 0xFF	; 255
    3944:	88 8b       	std	Y+16, r24	; 0x10
    3946:	88 89       	ldd	r24, Y+16	; 0x10
    3948:	84 30       	cpi	r24, 0x04	; 4
    394a:	08 f4       	brcc	.+2      	; 0x394e <KPD_u8GetPressed+0x1ca>
    394c:	28 cf       	rjmp	.-432    	; 0x379e <KPD_u8GetPressed+0x1a>

		DIO_enumSetPinValue( KPD_PORT , LOC_u8ColIterator , DIO_HIGH );

	}

	return LOC_u8ReturnData ;
    394e:	89 89       	ldd	r24, Y+17	; 0x11

}
    3950:	62 96       	adiw	r28, 0x12	; 18
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include "CLCD_config.h"


void CLCD_voidInit ( void ){
    3962:	0f 93       	push	r16
    3964:	1f 93       	push	r17
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	c6 54       	subi	r28, 0x46	; 70
    3970:	d0 40       	sbci	r29, 0x00	; 0
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61

	DIO_enumSetPortDirection ( CLCD_DATA_PORT    , 255        );
    397c:	83 e0       	ldi	r24, 0x03	; 3
    397e:	6f ef       	ldi	r22, 0xFF	; 255
    3980:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <DIO_enumSetPortDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_OUTPUT  );
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	41 e0       	ldi	r20, 0x01	; 1
    398a:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_OUTPUT  );
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	61 e0       	ldi	r22, 0x01	; 1
    3992:	41 e0       	ldi	r20, 0x01	; 1
    3994:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_OUTPUT  );
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	62 e0       	ldi	r22, 0x02	; 2
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
    39a2:	fe 01       	movw	r30, r28
    39a4:	ed 5b       	subi	r30, 0xBD	; 189
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	a8 e4       	ldi	r26, 0x48	; 72
    39ae:	b2 e4       	ldi	r27, 0x42	; 66
    39b0:	80 83       	st	Z, r24
    39b2:	91 83       	std	Z+1, r25	; 0x01
    39b4:	a2 83       	std	Z+2, r26	; 0x02
    39b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b8:	8e 01       	movw	r16, r28
    39ba:	01 5c       	subi	r16, 0xC1	; 193
    39bc:	1f 4f       	sbci	r17, 0xFF	; 255
    39be:	fe 01       	movw	r30, r28
    39c0:	ed 5b       	subi	r30, 0xBD	; 189
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	60 81       	ld	r22, Z
    39c6:	71 81       	ldd	r23, Z+1	; 0x01
    39c8:	82 81       	ldd	r24, Z+2	; 0x02
    39ca:	93 81       	ldd	r25, Z+3	; 0x03
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	4a ef       	ldi	r20, 0xFA	; 250
    39d2:	54 e4       	ldi	r21, 0x44	; 68
    39d4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	f8 01       	movw	r30, r16
    39de:	80 83       	st	Z, r24
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	a2 83       	std	Z+2, r26	; 0x02
    39e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39e6:	fe 01       	movw	r30, r28
    39e8:	ff 96       	adiw	r30, 0x3f	; 63
    39ea:	60 81       	ld	r22, Z
    39ec:	71 81       	ldd	r23, Z+1	; 0x01
    39ee:	82 81       	ldd	r24, Z+2	; 0x02
    39f0:	93 81       	ldd	r25, Z+3	; 0x03
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e8       	ldi	r20, 0x80	; 128
    39f8:	5f e3       	ldi	r21, 0x3F	; 63
    39fa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    39fe:	88 23       	and	r24, r24
    3a00:	2c f4       	brge	.+10     	; 0x3a0c <CLCD_voidInit+0xaa>
		__ticks = 1;
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	9e af       	std	Y+62, r25	; 0x3e
    3a08:	8d af       	std	Y+61, r24	; 0x3d
    3a0a:	46 c0       	rjmp	.+140    	; 0x3a98 <CLCD_voidInit+0x136>
	else if (__tmp > 65535)
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	ff 96       	adiw	r30, 0x3f	; 63
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	82 81       	ldd	r24, Z+2	; 0x02
    3a16:	93 81       	ldd	r25, Z+3	; 0x03
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	3f ef       	ldi	r19, 0xFF	; 255
    3a1c:	4f e7       	ldi	r20, 0x7F	; 127
    3a1e:	57 e4       	ldi	r21, 0x47	; 71
    3a20:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3a24:	18 16       	cp	r1, r24
    3a26:	64 f5       	brge	.+88     	; 0x3a80 <CLCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a28:	fe 01       	movw	r30, r28
    3a2a:	ed 5b       	subi	r30, 0xBD	; 189
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	60 81       	ld	r22, Z
    3a30:	71 81       	ldd	r23, Z+1	; 0x01
    3a32:	82 81       	ldd	r24, Z+2	; 0x02
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9e af       	std	Y+62, r25	; 0x3e
    3a54:	8d af       	std	Y+61, r24	; 0x3d
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <CLCD_voidInit+0x114>
    3a58:	88 ec       	ldi	r24, 0xC8	; 200
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9c af       	std	Y+60, r25	; 0x3c
    3a5e:	8b af       	std	Y+59, r24	; 0x3b
    3a60:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a62:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <CLCD_voidInit+0x102>
    3a68:	9c af       	std	Y+60, r25	; 0x3c
    3a6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9e af       	std	Y+62, r25	; 0x3e
    3a74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a78:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <CLCD_voidInit+0xf6>
    3a7e:	16 c0       	rjmp	.+44     	; 0x3aac <CLCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	fe 01       	movw	r30, r28
    3a82:	ff 96       	adiw	r30, 0x3f	; 63
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9e af       	std	Y+62, r25	; 0x3e
    3a96:	8d af       	std	Y+61, r24	; 0x3d
    3a98:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a9c:	9a af       	std	Y+58, r25	; 0x3a
    3a9e:	89 af       	std	Y+57, r24	; 0x39
    3aa0:	89 ad       	ldd	r24, Y+57	; 0x39
    3aa2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <CLCD_voidInit+0x142>
    3aa8:	9a af       	std	Y+58, r25	; 0x3a
    3aaa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);

	//Funtion set
	CLCD_voidSendCommend( 0b00111100 );
    3aac:	8c e3       	ldi	r24, 0x3C	; 60
    3aae:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	a0 e8       	ldi	r26, 0x80	; 128
    3ab8:	bf e3       	ldi	r27, 0x3F	; 63
    3aba:	8d ab       	std	Y+53, r24	; 0x35
    3abc:	9e ab       	std	Y+54, r25	; 0x36
    3abe:	af ab       	std	Y+55, r26	; 0x37
    3ac0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ac4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ac6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ac8:	98 ad       	ldd	r25, Y+56	; 0x38
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	4a ef       	ldi	r20, 0xFA	; 250
    3ad0:	54 e4       	ldi	r21, 0x44	; 68
    3ad2:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	89 ab       	std	Y+49, r24	; 0x31
    3adc:	9a ab       	std	Y+50, r25	; 0x32
    3ade:	ab ab       	std	Y+51, r26	; 0x33
    3ae0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ae2:	69 a9       	ldd	r22, Y+49	; 0x31
    3ae4:	7a a9       	ldd	r23, Y+50	; 0x32
    3ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    3ae8:	9c a9       	ldd	r25, Y+52	; 0x34
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e8       	ldi	r20, 0x80	; 128
    3af0:	5f e3       	ldi	r21, 0x3F	; 63
    3af2:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    3af6:	88 23       	and	r24, r24
    3af8:	2c f4       	brge	.+10     	; 0x3b04 <CLCD_voidInit+0x1a2>
		__ticks = 1;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	98 ab       	std	Y+48, r25	; 0x30
    3b00:	8f a7       	std	Y+47, r24	; 0x2f
    3b02:	3f c0       	rjmp	.+126    	; 0x3b82 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    3b04:	69 a9       	ldd	r22, Y+49	; 0x31
    3b06:	7a a9       	ldd	r23, Y+50	; 0x32
    3b08:	8b a9       	ldd	r24, Y+51	; 0x33
    3b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	3f ef       	ldi	r19, 0xFF	; 255
    3b10:	4f e7       	ldi	r20, 0x7F	; 127
    3b12:	57 e4       	ldi	r21, 0x47	; 71
    3b14:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3b18:	18 16       	cp	r1, r24
    3b1a:	4c f5       	brge	.+82     	; 0x3b6e <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b1e:	7e a9       	ldd	r23, Y+54	; 0x36
    3b20:	8f a9       	ldd	r24, Y+55	; 0x37
    3b22:	98 ad       	ldd	r25, Y+56	; 0x38
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e2       	ldi	r20, 0x20	; 32
    3b2a:	51 e4       	ldi	r21, 0x41	; 65
    3b2c:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	98 ab       	std	Y+48, r25	; 0x30
    3b42:	8f a7       	std	Y+47, r24	; 0x2f
    3b44:	0f c0       	rjmp	.+30     	; 0x3b64 <CLCD_voidInit+0x202>
    3b46:	88 ec       	ldi	r24, 0xC8	; 200
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	9e a7       	std	Y+46, r25	; 0x2e
    3b4c:	8d a7       	std	Y+45, r24	; 0x2d
    3b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b50:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <CLCD_voidInit+0x1f0>
    3b56:	9e a7       	std	Y+46, r25	; 0x2e
    3b58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	98 ab       	std	Y+48, r25	; 0x30
    3b62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b66:	98 a9       	ldd	r25, Y+48	; 0x30
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	69 f7       	brne	.-38     	; 0x3b46 <CLCD_voidInit+0x1e4>
    3b6c:	14 c0       	rjmp	.+40     	; 0x3b96 <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6e:	69 a9       	ldd	r22, Y+49	; 0x31
    3b70:	7a a9       	ldd	r23, Y+50	; 0x32
    3b72:	8b a9       	ldd	r24, Y+51	; 0x33
    3b74:	9c a9       	ldd	r25, Y+52	; 0x34
    3b76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	98 ab       	std	Y+48, r25	; 0x30
    3b80:	8f a7       	std	Y+47, r24	; 0x2f
    3b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b84:	98 a9       	ldd	r25, Y+48	; 0x30
    3b86:	9c a7       	std	Y+44, r25	; 0x2c
    3b88:	8b a7       	std	Y+43, r24	; 0x2b
    3b8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <CLCD_voidInit+0x22c>
    3b92:	9c a7       	std	Y+44, r25	; 0x2c
    3b94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//Display ON OFF
	CLCD_voidSendCommend( 0b00001100 );
    3b96:	8c e0       	ldi	r24, 0x0C	; 12
    3b98:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	a0 e8       	ldi	r26, 0x80	; 128
    3ba2:	bf e3       	ldi	r27, 0x3F	; 63
    3ba4:	8f a3       	std	Y+39, r24	; 0x27
    3ba6:	98 a7       	std	Y+40, r25	; 0x28
    3ba8:	a9 a7       	std	Y+41, r26	; 0x29
    3baa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bac:	6f a1       	ldd	r22, Y+39	; 0x27
    3bae:	78 a5       	ldd	r23, Y+40	; 0x28
    3bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    3bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	4a ef       	ldi	r20, 0xFA	; 250
    3bba:	54 e4       	ldi	r21, 0x44	; 68
    3bbc:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8b a3       	std	Y+35, r24	; 0x23
    3bc6:	9c a3       	std	Y+36, r25	; 0x24
    3bc8:	ad a3       	std	Y+37, r26	; 0x25
    3bca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    3bce:	7c a1       	ldd	r23, Y+36	; 0x24
    3bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e8       	ldi	r20, 0x80	; 128
    3bda:	5f e3       	ldi	r21, 0x3F	; 63
    3bdc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    3be0:	88 23       	and	r24, r24
    3be2:	2c f4       	brge	.+10     	; 0x3bee <CLCD_voidInit+0x28c>
		__ticks = 1;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	9a a3       	std	Y+34, r25	; 0x22
    3bea:	89 a3       	std	Y+33, r24	; 0x21
    3bec:	3f c0       	rjmp	.+126    	; 0x3c6c <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    3bee:	6b a1       	ldd	r22, Y+35	; 0x23
    3bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    3bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    3bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	3f ef       	ldi	r19, 0xFF	; 255
    3bfa:	4f e7       	ldi	r20, 0x7F	; 127
    3bfc:	57 e4       	ldi	r21, 0x47	; 71
    3bfe:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3c02:	18 16       	cp	r1, r24
    3c04:	4c f5       	brge	.+82     	; 0x3c58 <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c06:	6f a1       	ldd	r22, Y+39	; 0x27
    3c08:	78 a5       	ldd	r23, Y+40	; 0x28
    3c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e2       	ldi	r20, 0x20	; 32
    3c14:	51 e4       	ldi	r21, 0x41	; 65
    3c16:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9a a3       	std	Y+34, r25	; 0x22
    3c2c:	89 a3       	std	Y+33, r24	; 0x21
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <CLCD_voidInit+0x2ec>
    3c30:	88 ec       	ldi	r24, 0xC8	; 200
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	98 a3       	std	Y+32, r25	; 0x20
    3c36:	8f 8f       	std	Y+31, r24	; 0x1f
    3c38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c3a:	98 a1       	ldd	r25, Y+32	; 0x20
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <CLCD_voidInit+0x2da>
    3c40:	98 a3       	std	Y+32, r25	; 0x20
    3c42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c44:	89 a1       	ldd	r24, Y+33	; 0x21
    3c46:	9a a1       	ldd	r25, Y+34	; 0x22
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	9a a3       	std	Y+34, r25	; 0x22
    3c4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c50:	9a a1       	ldd	r25, Y+34	; 0x22
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	69 f7       	brne	.-38     	; 0x3c30 <CLCD_voidInit+0x2ce>
    3c56:	14 c0       	rjmp	.+40     	; 0x3c80 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c58:	6b a1       	ldd	r22, Y+35	; 0x23
    3c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c60:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	9a a3       	std	Y+34, r25	; 0x22
    3c6a:	89 a3       	std	Y+33, r24	; 0x21
    3c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c70:	9e 8f       	std	Y+30, r25	; 0x1e
    3c72:	8d 8f       	std	Y+29, r24	; 0x1d
    3c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <CLCD_voidInit+0x316>
    3c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Clear
	CLCD_voidSendCommend( 0b00000001 );
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	a0 e0       	ldi	r26, 0x00	; 0
    3c8c:	b0 e4       	ldi	r27, 0x40	; 64
    3c8e:	89 8f       	std	Y+25, r24	; 0x19
    3c90:	9a 8f       	std	Y+26, r25	; 0x1a
    3c92:	ab 8f       	std	Y+27, r26	; 0x1b
    3c94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c96:	69 8d       	ldd	r22, Y+25	; 0x19
    3c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	4a ef       	ldi	r20, 0xFA	; 250
    3ca4:	54 e4       	ldi	r21, 0x44	; 68
    3ca6:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8d 8b       	std	Y+21, r24	; 0x15
    3cb0:	9e 8b       	std	Y+22, r25	; 0x16
    3cb2:	af 8b       	std	Y+23, r26	; 0x17
    3cb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cba:	8f 89       	ldd	r24, Y+23	; 0x17
    3cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	40 e8       	ldi	r20, 0x80	; 128
    3cc4:	5f e3       	ldi	r21, 0x3F	; 63
    3cc6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    3cca:	88 23       	and	r24, r24
    3ccc:	2c f4       	brge	.+10     	; 0x3cd8 <CLCD_voidInit+0x376>
		__ticks = 1;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	9c 8b       	std	Y+20, r25	; 0x14
    3cd4:	8b 8b       	std	Y+19, r24	; 0x13
    3cd6:	3f c0       	rjmp	.+126    	; 0x3d56 <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cda:	7e 89       	ldd	r23, Y+22	; 0x16
    3cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cde:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	3f ef       	ldi	r19, 0xFF	; 255
    3ce4:	4f e7       	ldi	r20, 0x7F	; 127
    3ce6:	57 e4       	ldi	r21, 0x47	; 71
    3ce8:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3cec:	18 16       	cp	r1, r24
    3cee:	4c f5       	brge	.+82     	; 0x3d42 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e2       	ldi	r20, 0x20	; 32
    3cfe:	51 e4       	ldi	r21, 0x41	; 65
    3d00:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	9c 8b       	std	Y+20, r25	; 0x14
    3d16:	8b 8b       	std	Y+19, r24	; 0x13
    3d18:	0f c0       	rjmp	.+30     	; 0x3d38 <CLCD_voidInit+0x3d6>
    3d1a:	88 ec       	ldi	r24, 0xC8	; 200
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9a 8b       	std	Y+18, r25	; 0x12
    3d20:	89 8b       	std	Y+17, r24	; 0x11
    3d22:	89 89       	ldd	r24, Y+17	; 0x11
    3d24:	9a 89       	ldd	r25, Y+18	; 0x12
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <CLCD_voidInit+0x3c4>
    3d2a:	9a 8b       	std	Y+18, r25	; 0x12
    3d2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d30:	9c 89       	ldd	r25, Y+20	; 0x14
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	9c 8b       	std	Y+20, r25	; 0x14
    3d36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d38:	8b 89       	ldd	r24, Y+19	; 0x13
    3d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	69 f7       	brne	.-38     	; 0x3d1a <CLCD_voidInit+0x3b8>
    3d40:	14 c0       	rjmp	.+40     	; 0x3d6a <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d42:	6d 89       	ldd	r22, Y+21	; 0x15
    3d44:	7e 89       	ldd	r23, Y+22	; 0x16
    3d46:	8f 89       	ldd	r24, Y+23	; 0x17
    3d48:	98 8d       	ldd	r25, Y+24	; 0x18
    3d4a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	9c 8b       	std	Y+20, r25	; 0x14
    3d54:	8b 8b       	std	Y+19, r24	; 0x13
    3d56:	8b 89       	ldd	r24, Y+19	; 0x13
    3d58:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5a:	98 8b       	std	Y+16, r25	; 0x10
    3d5c:	8f 87       	std	Y+15, r24	; 0x0f
    3d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d60:	98 89       	ldd	r25, Y+16	; 0x10
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	f1 f7       	brne	.-4      	; 0x3d62 <CLCD_voidInit+0x400>
    3d66:	98 8b       	std	Y+16, r25	; 0x10
    3d68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//Entry Mode
	CLCD_voidSendCommend( 0b00000110 );
    3d6a:	86 e0       	ldi	r24, 0x06	; 6
    3d6c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	a0 e8       	ldi	r26, 0x80	; 128
    3d76:	bf e3       	ldi	r27, 0x3F	; 63
    3d78:	8b 87       	std	Y+11, r24	; 0x0b
    3d7a:	9c 87       	std	Y+12, r25	; 0x0c
    3d7c:	ad 87       	std	Y+13, r26	; 0x0d
    3d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	4a ef       	ldi	r20, 0xFA	; 250
    3d8e:	54 e4       	ldi	r21, 0x44	; 68
    3d90:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	8f 83       	std	Y+7, r24	; 0x07
    3d9a:	98 87       	std	Y+8, r25	; 0x08
    3d9c:	a9 87       	std	Y+9, r26	; 0x09
    3d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3da0:	6f 81       	ldd	r22, Y+7	; 0x07
    3da2:	78 85       	ldd	r23, Y+8	; 0x08
    3da4:	89 85       	ldd	r24, Y+9	; 0x09
    3da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e8       	ldi	r20, 0x80	; 128
    3dae:	5f e3       	ldi	r21, 0x3F	; 63
    3db0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    3db4:	88 23       	and	r24, r24
    3db6:	2c f4       	brge	.+10     	; 0x3dc2 <CLCD_voidInit+0x460>
		__ticks = 1;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	9e 83       	std	Y+6, r25	; 0x06
    3dbe:	8d 83       	std	Y+5, r24	; 0x05
    3dc0:	3f c0       	rjmp	.+126    	; 0x3e40 <CLCD_voidInit+0x4de>
	else if (__tmp > 65535)
    3dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc4:	78 85       	ldd	r23, Y+8	; 0x08
    3dc6:	89 85       	ldd	r24, Y+9	; 0x09
    3dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	3f ef       	ldi	r19, 0xFF	; 255
    3dce:	4f e7       	ldi	r20, 0x7F	; 127
    3dd0:	57 e4       	ldi	r21, 0x47	; 71
    3dd2:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3dd6:	18 16       	cp	r1, r24
    3dd8:	4c f5       	brge	.+82     	; 0x3e2c <CLCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e2       	ldi	r20, 0x20	; 32
    3de8:	51 e4       	ldi	r21, 0x41	; 65
    3dea:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	9e 83       	std	Y+6, r25	; 0x06
    3e00:	8d 83       	std	Y+5, r24	; 0x05
    3e02:	0f c0       	rjmp	.+30     	; 0x3e22 <CLCD_voidInit+0x4c0>
    3e04:	88 ec       	ldi	r24, 0xC8	; 200
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	9c 83       	std	Y+4, r25	; 0x04
    3e0a:	8b 83       	std	Y+3, r24	; 0x03
    3e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <CLCD_voidInit+0x4ae>
    3e14:	9c 83       	std	Y+4, r25	; 0x04
    3e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e18:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e1c:	01 97       	sbiw	r24, 0x01	; 1
    3e1e:	9e 83       	std	Y+6, r25	; 0x06
    3e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e22:	8d 81       	ldd	r24, Y+5	; 0x05
    3e24:	9e 81       	ldd	r25, Y+6	; 0x06
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	69 f7       	brne	.-38     	; 0x3e04 <CLCD_voidInit+0x4a2>
    3e2a:	14 c0       	rjmp	.+40     	; 0x3e54 <CLCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e2e:	78 85       	ldd	r23, Y+8	; 0x08
    3e30:	89 85       	ldd	r24, Y+9	; 0x09
    3e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e34:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	9e 81       	ldd	r25, Y+6	; 0x06
    3e44:	9a 83       	std	Y+2, r25	; 0x02
    3e46:	89 83       	std	Y+1, r24	; 0x01
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <CLCD_voidInit+0x4ea>
    3e50:	9a 83       	std	Y+2, r25	; 0x02
    3e52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3e54:	ca 5b       	subi	r28, 0xBA	; 186
    3e56:	df 4f       	sbci	r29, 0xFF	; 255
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	1f 91       	pop	r17
    3e68:	0f 91       	pop	r16
    3e6a:	08 95       	ret

00003e6c <CLCD_voidSendData>:



void CLCD_voidSendData    ( u8 Copy_u8Data    ){
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	6d 97       	sbiw	r28, 0x1d	; 29
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_enumSetPortValue( CLCD_DATA_PORT    , Copy_u8Data        );
    3e82:	83 e0       	ldi	r24, 0x03	; 3
    3e84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3e86:	0e 94 3b 18 	call	0x3076	; 0x3076 <DIO_enumSetPortValue>
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_RS , DIO_HIGH );
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	41 e0       	ldi	r20, 0x01	; 1
    3e90:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_RW , DIO_LOW  );
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	61 e0       	ldi	r22, 0x01	; 1
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	/* Enable Pulse ===> Falling Edge */
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_EN , DIO_HIGH );
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	62 e0       	ldi	r22, 0x02	; 2
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	a0 e8       	ldi	r26, 0x80	; 128
    3eae:	bf e3       	ldi	r27, 0x3F	; 63
    3eb0:	89 8f       	std	Y+25, r24	; 0x19
    3eb2:	9a 8f       	std	Y+26, r25	; 0x1a
    3eb4:	ab 8f       	std	Y+27, r26	; 0x1b
    3eb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    3eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	4a ef       	ldi	r20, 0xFA	; 250
    3ec6:	54 e4       	ldi	r21, 0x44	; 68
    3ec8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	8d 8b       	std	Y+21, r24	; 0x15
    3ed2:	9e 8b       	std	Y+22, r25	; 0x16
    3ed4:	af 8b       	std	Y+23, r26	; 0x17
    3ed6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eda:	7e 89       	ldd	r23, Y+22	; 0x16
    3edc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ede:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 e8       	ldi	r20, 0x80	; 128
    3ee6:	5f e3       	ldi	r21, 0x3F	; 63
    3ee8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    3eec:	88 23       	and	r24, r24
    3eee:	2c f4       	brge	.+10     	; 0x3efa <CLCD_voidSendData+0x8e>
		__ticks = 1;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9c 8b       	std	Y+20, r25	; 0x14
    3ef6:	8b 8b       	std	Y+19, r24	; 0x13
    3ef8:	3f c0       	rjmp	.+126    	; 0x3f78 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    3efa:	6d 89       	ldd	r22, Y+21	; 0x15
    3efc:	7e 89       	ldd	r23, Y+22	; 0x16
    3efe:	8f 89       	ldd	r24, Y+23	; 0x17
    3f00:	98 8d       	ldd	r25, Y+24	; 0x18
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	3f ef       	ldi	r19, 0xFF	; 255
    3f06:	4f e7       	ldi	r20, 0x7F	; 127
    3f08:	57 e4       	ldi	r21, 0x47	; 71
    3f0a:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3f0e:	18 16       	cp	r1, r24
    3f10:	4c f5       	brge	.+82     	; 0x3f64 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f12:	69 8d       	ldd	r22, Y+25	; 0x19
    3f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e2       	ldi	r20, 0x20	; 32
    3f20:	51 e4       	ldi	r21, 0x41	; 65
    3f22:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	9c 8b       	std	Y+20, r25	; 0x14
    3f38:	8b 8b       	std	Y+19, r24	; 0x13
    3f3a:	0f c0       	rjmp	.+30     	; 0x3f5a <CLCD_voidSendData+0xee>
    3f3c:	88 ec       	ldi	r24, 0xC8	; 200
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	9a 8b       	std	Y+18, r25	; 0x12
    3f42:	89 8b       	std	Y+17, r24	; 0x11
    3f44:	89 89       	ldd	r24, Y+17	; 0x11
    3f46:	9a 89       	ldd	r25, Y+18	; 0x12
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	f1 f7       	brne	.-4      	; 0x3f48 <CLCD_voidSendData+0xdc>
    3f4c:	9a 8b       	std	Y+18, r25	; 0x12
    3f4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f50:	8b 89       	ldd	r24, Y+19	; 0x13
    3f52:	9c 89       	ldd	r25, Y+20	; 0x14
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	9c 8b       	std	Y+20, r25	; 0x14
    3f58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	69 f7       	brne	.-38     	; 0x3f3c <CLCD_voidSendData+0xd0>
    3f62:	14 c0       	rjmp	.+40     	; 0x3f8c <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	6d 89       	ldd	r22, Y+21	; 0x15
    3f66:	7e 89       	ldd	r23, Y+22	; 0x16
    3f68:	8f 89       	ldd	r24, Y+23	; 0x17
    3f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f6c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	9c 8b       	std	Y+20, r25	; 0x14
    3f76:	8b 8b       	std	Y+19, r24	; 0x13
    3f78:	8b 89       	ldd	r24, Y+19	; 0x13
    3f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f7c:	98 8b       	std	Y+16, r25	; 0x10
    3f7e:	8f 87       	std	Y+15, r24	; 0x0f
    3f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f82:	98 89       	ldd	r25, Y+16	; 0x10
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	f1 f7       	brne	.-4      	; 0x3f84 <CLCD_voidSendData+0x118>
    3f88:	98 8b       	std	Y+16, r25	; 0x10
    3f8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_EN , DIO_LOW  );
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	62 e0       	ldi	r22, 0x02	; 2
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	a0 e8       	ldi	r26, 0x80	; 128
    3f9c:	bf e3       	ldi	r27, 0x3F	; 63
    3f9e:	8b 87       	std	Y+11, r24	; 0x0b
    3fa0:	9c 87       	std	Y+12, r25	; 0x0c
    3fa2:	ad 87       	std	Y+13, r26	; 0x0d
    3fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	4a ef       	ldi	r20, 0xFA	; 250
    3fb4:	54 e4       	ldi	r21, 0x44	; 68
    3fb6:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	8f 83       	std	Y+7, r24	; 0x07
    3fc0:	98 87       	std	Y+8, r25	; 0x08
    3fc2:	a9 87       	std	Y+9, r26	; 0x09
    3fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc8:	78 85       	ldd	r23, Y+8	; 0x08
    3fca:	89 85       	ldd	r24, Y+9	; 0x09
    3fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    3fda:	88 23       	and	r24, r24
    3fdc:	2c f4       	brge	.+10     	; 0x3fe8 <CLCD_voidSendData+0x17c>
		__ticks = 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9e 83       	std	Y+6, r25	; 0x06
    3fe4:	8d 83       	std	Y+5, r24	; 0x05
    3fe6:	3f c0       	rjmp	.+126    	; 0x4066 <CLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    3fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fea:	78 85       	ldd	r23, Y+8	; 0x08
    3fec:	89 85       	ldd	r24, Y+9	; 0x09
    3fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	3f ef       	ldi	r19, 0xFF	; 255
    3ff4:	4f e7       	ldi	r20, 0x7F	; 127
    3ff6:	57 e4       	ldi	r21, 0x47	; 71
    3ff8:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    3ffc:	18 16       	cp	r1, r24
    3ffe:	4c f5       	brge	.+82     	; 0x4052 <CLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4000:	6b 85       	ldd	r22, Y+11	; 0x0b
    4002:	7c 85       	ldd	r23, Y+12	; 0x0c
    4004:	8d 85       	ldd	r24, Y+13	; 0x0d
    4006:	9e 85       	ldd	r25, Y+14	; 0x0e
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	40 e2       	ldi	r20, 0x20	; 32
    400e:	51 e4       	ldi	r21, 0x41	; 65
    4010:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	8d 83       	std	Y+5, r24	; 0x05
    4028:	0f c0       	rjmp	.+30     	; 0x4048 <CLCD_voidSendData+0x1dc>
    402a:	88 ec       	ldi	r24, 0xC8	; 200
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	9c 83       	std	Y+4, r25	; 0x04
    4030:	8b 83       	std	Y+3, r24	; 0x03
    4032:	8b 81       	ldd	r24, Y+3	; 0x03
    4034:	9c 81       	ldd	r25, Y+4	; 0x04
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	f1 f7       	brne	.-4      	; 0x4036 <CLCD_voidSendData+0x1ca>
    403a:	9c 83       	std	Y+4, r25	; 0x04
    403c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    403e:	8d 81       	ldd	r24, Y+5	; 0x05
    4040:	9e 81       	ldd	r25, Y+6	; 0x06
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4048:	8d 81       	ldd	r24, Y+5	; 0x05
    404a:	9e 81       	ldd	r25, Y+6	; 0x06
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	69 f7       	brne	.-38     	; 0x402a <CLCD_voidSendData+0x1be>
    4050:	14 c0       	rjmp	.+40     	; 0x407a <CLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4052:	6f 81       	ldd	r22, Y+7	; 0x07
    4054:	78 85       	ldd	r23, Y+8	; 0x08
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	9e 83       	std	Y+6, r25	; 0x06
    4064:	8d 83       	std	Y+5, r24	; 0x05
    4066:	8d 81       	ldd	r24, Y+5	; 0x05
    4068:	9e 81       	ldd	r25, Y+6	; 0x06
    406a:	9a 83       	std	Y+2, r25	; 0x02
    406c:	89 83       	std	Y+1, r24	; 0x01
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	9a 81       	ldd	r25, Y+2	; 0x02
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	f1 f7       	brne	.-4      	; 0x4072 <CLCD_voidSendData+0x206>
    4076:	9a 83       	std	Y+2, r25	; 0x02
    4078:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    407a:	6d 96       	adiw	r28, 0x1d	; 29
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	f8 94       	cli
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	cd bf       	out	0x3d, r28	; 61
    4086:	cf 91       	pop	r28
    4088:	df 91       	pop	r29
    408a:	08 95       	ret

0000408c <CLCD_voidSendFloatData>:
void CLCD_voidSendFloatData    ( f32 Copy_u8Data    ){
    408c:	df 93       	push	r29
    408e:	cf 93       	push	r28
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    4094:	a0 97       	sbiw	r28, 0x20	; 32
    4096:	0f b6       	in	r0, 0x3f	; 63
    4098:	f8 94       	cli
    409a:	de bf       	out	0x3e, r29	; 62
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	cd bf       	out	0x3d, r28	; 61
    40a0:	6d 8f       	std	Y+29, r22	; 0x1d
    40a2:	7e 8f       	std	Y+30, r23	; 0x1e
    40a4:	8f 8f       	std	Y+31, r24	; 0x1f
    40a6:	98 a3       	std	Y+32, r25	; 0x20
	DIO_enumSetPortValue( CLCD_DATA_PORT    , Copy_u8Data        );
    40a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    40aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    40ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40ae:	98 a1       	ldd	r25, Y+32	; 0x20
    40b0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	98 2f       	mov	r25, r24
    40ba:	83 e0       	ldi	r24, 0x03	; 3
    40bc:	69 2f       	mov	r22, r25
    40be:	0e 94 3b 18 	call	0x3076	; 0x3076 <DIO_enumSetPortValue>
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_RS , DIO_HIGH );
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	41 e0       	ldi	r20, 0x01	; 1
    40c8:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_RW , DIO_LOW  );
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	61 e0       	ldi	r22, 0x01	; 1
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	/* Enable Pulse ===> Falling Edge */
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_EN , DIO_HIGH );
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	62 e0       	ldi	r22, 0x02	; 2
    40da:	41 e0       	ldi	r20, 0x01	; 1
    40dc:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	a0 e8       	ldi	r26, 0x80	; 128
    40e6:	bf e3       	ldi	r27, 0x3F	; 63
    40e8:	89 8f       	std	Y+25, r24	; 0x19
    40ea:	9a 8f       	std	Y+26, r25	; 0x1a
    40ec:	ab 8f       	std	Y+27, r26	; 0x1b
    40ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f0:	69 8d       	ldd	r22, Y+25	; 0x19
    40f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	4a ef       	ldi	r20, 0xFA	; 250
    40fe:	54 e4       	ldi	r21, 0x44	; 68
    4100:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	8d 8b       	std	Y+21, r24	; 0x15
    410a:	9e 8b       	std	Y+22, r25	; 0x16
    410c:	af 8b       	std	Y+23, r26	; 0x17
    410e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4110:	6d 89       	ldd	r22, Y+21	; 0x15
    4112:	7e 89       	ldd	r23, Y+22	; 0x16
    4114:	8f 89       	ldd	r24, Y+23	; 0x17
    4116:	98 8d       	ldd	r25, Y+24	; 0x18
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	40 e8       	ldi	r20, 0x80	; 128
    411e:	5f e3       	ldi	r21, 0x3F	; 63
    4120:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    4124:	88 23       	and	r24, r24
    4126:	2c f4       	brge	.+10     	; 0x4132 <CLCD_voidSendFloatData+0xa6>
		__ticks = 1;
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	9c 8b       	std	Y+20, r25	; 0x14
    412e:	8b 8b       	std	Y+19, r24	; 0x13
    4130:	3f c0       	rjmp	.+126    	; 0x41b0 <CLCD_voidSendFloatData+0x124>
	else if (__tmp > 65535)
    4132:	6d 89       	ldd	r22, Y+21	; 0x15
    4134:	7e 89       	ldd	r23, Y+22	; 0x16
    4136:	8f 89       	ldd	r24, Y+23	; 0x17
    4138:	98 8d       	ldd	r25, Y+24	; 0x18
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	3f ef       	ldi	r19, 0xFF	; 255
    413e:	4f e7       	ldi	r20, 0x7F	; 127
    4140:	57 e4       	ldi	r21, 0x47	; 71
    4142:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    4146:	18 16       	cp	r1, r24
    4148:	4c f5       	brge	.+82     	; 0x419c <CLCD_voidSendFloatData+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414a:	69 8d       	ldd	r22, Y+25	; 0x19
    414c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    414e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	40 e2       	ldi	r20, 0x20	; 32
    4158:	51 e4       	ldi	r21, 0x41	; 65
    415a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	bc 01       	movw	r22, r24
    4164:	cd 01       	movw	r24, r26
    4166:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	9c 8b       	std	Y+20, r25	; 0x14
    4170:	8b 8b       	std	Y+19, r24	; 0x13
    4172:	0f c0       	rjmp	.+30     	; 0x4192 <CLCD_voidSendFloatData+0x106>
    4174:	88 ec       	ldi	r24, 0xC8	; 200
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	9a 8b       	std	Y+18, r25	; 0x12
    417a:	89 8b       	std	Y+17, r24	; 0x11
    417c:	89 89       	ldd	r24, Y+17	; 0x11
    417e:	9a 89       	ldd	r25, Y+18	; 0x12
    4180:	01 97       	sbiw	r24, 0x01	; 1
    4182:	f1 f7       	brne	.-4      	; 0x4180 <CLCD_voidSendFloatData+0xf4>
    4184:	9a 8b       	std	Y+18, r25	; 0x12
    4186:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4188:	8b 89       	ldd	r24, Y+19	; 0x13
    418a:	9c 89       	ldd	r25, Y+20	; 0x14
    418c:	01 97       	sbiw	r24, 0x01	; 1
    418e:	9c 8b       	std	Y+20, r25	; 0x14
    4190:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4192:	8b 89       	ldd	r24, Y+19	; 0x13
    4194:	9c 89       	ldd	r25, Y+20	; 0x14
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	69 f7       	brne	.-38     	; 0x4174 <CLCD_voidSendFloatData+0xe8>
    419a:	14 c0       	rjmp	.+40     	; 0x41c4 <CLCD_voidSendFloatData+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419c:	6d 89       	ldd	r22, Y+21	; 0x15
    419e:	7e 89       	ldd	r23, Y+22	; 0x16
    41a0:	8f 89       	ldd	r24, Y+23	; 0x17
    41a2:	98 8d       	ldd	r25, Y+24	; 0x18
    41a4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	9c 8b       	std	Y+20, r25	; 0x14
    41ae:	8b 8b       	std	Y+19, r24	; 0x13
    41b0:	8b 89       	ldd	r24, Y+19	; 0x13
    41b2:	9c 89       	ldd	r25, Y+20	; 0x14
    41b4:	98 8b       	std	Y+16, r25	; 0x10
    41b6:	8f 87       	std	Y+15, r24	; 0x0f
    41b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ba:	98 89       	ldd	r25, Y+16	; 0x10
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <CLCD_voidSendFloatData+0x130>
    41c0:	98 8b       	std	Y+16, r25	; 0x10
    41c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_EN , DIO_LOW  );
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	62 e0       	ldi	r22, 0x02	; 2
    41c8:	40 e0       	ldi	r20, 0x00	; 0
    41ca:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	a0 e8       	ldi	r26, 0x80	; 128
    41d4:	bf e3       	ldi	r27, 0x3F	; 63
    41d6:	8b 87       	std	Y+11, r24	; 0x0b
    41d8:	9c 87       	std	Y+12, r25	; 0x0c
    41da:	ad 87       	std	Y+13, r26	; 0x0d
    41dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41de:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	4a ef       	ldi	r20, 0xFA	; 250
    41ec:	54 e4       	ldi	r21, 0x44	; 68
    41ee:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	8f 83       	std	Y+7, r24	; 0x07
    41f8:	98 87       	std	Y+8, r25	; 0x08
    41fa:	a9 87       	std	Y+9, r26	; 0x09
    41fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4200:	78 85       	ldd	r23, Y+8	; 0x08
    4202:	89 85       	ldd	r24, Y+9	; 0x09
    4204:	9a 85       	ldd	r25, Y+10	; 0x0a
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e8       	ldi	r20, 0x80	; 128
    420c:	5f e3       	ldi	r21, 0x3F	; 63
    420e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    4212:	88 23       	and	r24, r24
    4214:	2c f4       	brge	.+10     	; 0x4220 <CLCD_voidSendFloatData+0x194>
		__ticks = 1;
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
    421e:	3f c0       	rjmp	.+126    	; 0x429e <CLCD_voidSendFloatData+0x212>
	else if (__tmp > 65535)
    4220:	6f 81       	ldd	r22, Y+7	; 0x07
    4222:	78 85       	ldd	r23, Y+8	; 0x08
    4224:	89 85       	ldd	r24, Y+9	; 0x09
    4226:	9a 85       	ldd	r25, Y+10	; 0x0a
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	3f ef       	ldi	r19, 0xFF	; 255
    422c:	4f e7       	ldi	r20, 0x7F	; 127
    422e:	57 e4       	ldi	r21, 0x47	; 71
    4230:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    4234:	18 16       	cp	r1, r24
    4236:	4c f5       	brge	.+82     	; 0x428a <CLCD_voidSendFloatData+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4238:	6b 85       	ldd	r22, Y+11	; 0x0b
    423a:	7c 85       	ldd	r23, Y+12	; 0x0c
    423c:	8d 85       	ldd	r24, Y+13	; 0x0d
    423e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	40 e2       	ldi	r20, 0x20	; 32
    4246:	51 e4       	ldi	r21, 0x41	; 65
    4248:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	bc 01       	movw	r22, r24
    4252:	cd 01       	movw	r24, r26
    4254:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	9e 83       	std	Y+6, r25	; 0x06
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	0f c0       	rjmp	.+30     	; 0x4280 <CLCD_voidSendFloatData+0x1f4>
    4262:	88 ec       	ldi	r24, 0xC8	; 200
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9c 83       	std	Y+4, r25	; 0x04
    4268:	8b 83       	std	Y+3, r24	; 0x03
    426a:	8b 81       	ldd	r24, Y+3	; 0x03
    426c:	9c 81       	ldd	r25, Y+4	; 0x04
    426e:	01 97       	sbiw	r24, 0x01	; 1
    4270:	f1 f7       	brne	.-4      	; 0x426e <CLCD_voidSendFloatData+0x1e2>
    4272:	9c 83       	std	Y+4, r25	; 0x04
    4274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4276:	8d 81       	ldd	r24, Y+5	; 0x05
    4278:	9e 81       	ldd	r25, Y+6	; 0x06
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	9e 83       	std	Y+6, r25	; 0x06
    427e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4280:	8d 81       	ldd	r24, Y+5	; 0x05
    4282:	9e 81       	ldd	r25, Y+6	; 0x06
    4284:	00 97       	sbiw	r24, 0x00	; 0
    4286:	69 f7       	brne	.-38     	; 0x4262 <CLCD_voidSendFloatData+0x1d6>
    4288:	14 c0       	rjmp	.+40     	; 0x42b2 <CLCD_voidSendFloatData+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    428a:	6f 81       	ldd	r22, Y+7	; 0x07
    428c:	78 85       	ldd	r23, Y+8	; 0x08
    428e:	89 85       	ldd	r24, Y+9	; 0x09
    4290:	9a 85       	ldd	r25, Y+10	; 0x0a
    4292:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	9e 83       	std	Y+6, r25	; 0x06
    429c:	8d 83       	std	Y+5, r24	; 0x05
    429e:	8d 81       	ldd	r24, Y+5	; 0x05
    42a0:	9e 81       	ldd	r25, Y+6	; 0x06
    42a2:	9a 83       	std	Y+2, r25	; 0x02
    42a4:	89 83       	std	Y+1, r24	; 0x01
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	9a 81       	ldd	r25, Y+2	; 0x02
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	f1 f7       	brne	.-4      	; 0x42aa <CLCD_voidSendFloatData+0x21e>
    42ae:	9a 83       	std	Y+2, r25	; 0x02
    42b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    42b2:	a0 96       	adiw	r28, 0x20	; 32
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <CLCD_voidSendCommend>:
void CLCD_voidSendCommend ( u8 Copy_u8Commend ){
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
    42cc:	6d 97       	sbiw	r28, 0x1d	; 29
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_enumSetPortValue( CLCD_DATA_PORT    , Copy_u8Commend     );
    42da:	83 e0       	ldi	r24, 0x03	; 3
    42dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    42de:	0e 94 3b 18 	call	0x3076	; 0x3076 <DIO_enumSetPortValue>
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_RS , DIO_LOW  );
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	60 e0       	ldi	r22, 0x00	; 0
    42e6:	40 e0       	ldi	r20, 0x00	; 0
    42e8:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_RW , DIO_LOW  );
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	61 e0       	ldi	r22, 0x01	; 1
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
	/* Enable Pulse ===> Falling Edge */
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_EN , DIO_HIGH );
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	62 e0       	ldi	r22, 0x02	; 2
    42fa:	41 e0       	ldi	r20, 0x01	; 1
    42fc:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	a0 e8       	ldi	r26, 0x80	; 128
    4306:	bf e3       	ldi	r27, 0x3F	; 63
    4308:	89 8f       	std	Y+25, r24	; 0x19
    430a:	9a 8f       	std	Y+26, r25	; 0x1a
    430c:	ab 8f       	std	Y+27, r26	; 0x1b
    430e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4310:	69 8d       	ldd	r22, Y+25	; 0x19
    4312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	4a ef       	ldi	r20, 0xFA	; 250
    431e:	54 e4       	ldi	r21, 0x44	; 68
    4320:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	8d 8b       	std	Y+21, r24	; 0x15
    432a:	9e 8b       	std	Y+22, r25	; 0x16
    432c:	af 8b       	std	Y+23, r26	; 0x17
    432e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4330:	6d 89       	ldd	r22, Y+21	; 0x15
    4332:	7e 89       	ldd	r23, Y+22	; 0x16
    4334:	8f 89       	ldd	r24, Y+23	; 0x17
    4336:	98 8d       	ldd	r25, Y+24	; 0x18
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e8       	ldi	r20, 0x80	; 128
    433e:	5f e3       	ldi	r21, 0x3F	; 63
    4340:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    4344:	88 23       	and	r24, r24
    4346:	2c f4       	brge	.+10     	; 0x4352 <CLCD_voidSendCommend+0x8e>
		__ticks = 1;
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	9c 8b       	std	Y+20, r25	; 0x14
    434e:	8b 8b       	std	Y+19, r24	; 0x13
    4350:	3f c0       	rjmp	.+126    	; 0x43d0 <CLCD_voidSendCommend+0x10c>
	else if (__tmp > 65535)
    4352:	6d 89       	ldd	r22, Y+21	; 0x15
    4354:	7e 89       	ldd	r23, Y+22	; 0x16
    4356:	8f 89       	ldd	r24, Y+23	; 0x17
    4358:	98 8d       	ldd	r25, Y+24	; 0x18
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	3f ef       	ldi	r19, 0xFF	; 255
    435e:	4f e7       	ldi	r20, 0x7F	; 127
    4360:	57 e4       	ldi	r21, 0x47	; 71
    4362:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    4366:	18 16       	cp	r1, r24
    4368:	4c f5       	brge	.+82     	; 0x43bc <CLCD_voidSendCommend+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436a:	69 8d       	ldd	r22, Y+25	; 0x19
    436c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    436e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	40 e2       	ldi	r20, 0x20	; 32
    4378:	51 e4       	ldi	r21, 0x41	; 65
    437a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	bc 01       	movw	r22, r24
    4384:	cd 01       	movw	r24, r26
    4386:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	9c 8b       	std	Y+20, r25	; 0x14
    4390:	8b 8b       	std	Y+19, r24	; 0x13
    4392:	0f c0       	rjmp	.+30     	; 0x43b2 <CLCD_voidSendCommend+0xee>
    4394:	88 ec       	ldi	r24, 0xC8	; 200
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	9a 8b       	std	Y+18, r25	; 0x12
    439a:	89 8b       	std	Y+17, r24	; 0x11
    439c:	89 89       	ldd	r24, Y+17	; 0x11
    439e:	9a 89       	ldd	r25, Y+18	; 0x12
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <CLCD_voidSendCommend+0xdc>
    43a4:	9a 8b       	std	Y+18, r25	; 0x12
    43a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a8:	8b 89       	ldd	r24, Y+19	; 0x13
    43aa:	9c 89       	ldd	r25, Y+20	; 0x14
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	9c 8b       	std	Y+20, r25	; 0x14
    43b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b2:	8b 89       	ldd	r24, Y+19	; 0x13
    43b4:	9c 89       	ldd	r25, Y+20	; 0x14
    43b6:	00 97       	sbiw	r24, 0x00	; 0
    43b8:	69 f7       	brne	.-38     	; 0x4394 <CLCD_voidSendCommend+0xd0>
    43ba:	14 c0       	rjmp	.+40     	; 0x43e4 <CLCD_voidSendCommend+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43bc:	6d 89       	ldd	r22, Y+21	; 0x15
    43be:	7e 89       	ldd	r23, Y+22	; 0x16
    43c0:	8f 89       	ldd	r24, Y+23	; 0x17
    43c2:	98 8d       	ldd	r25, Y+24	; 0x18
    43c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	9c 8b       	std	Y+20, r25	; 0x14
    43ce:	8b 8b       	std	Y+19, r24	; 0x13
    43d0:	8b 89       	ldd	r24, Y+19	; 0x13
    43d2:	9c 89       	ldd	r25, Y+20	; 0x14
    43d4:	98 8b       	std	Y+16, r25	; 0x10
    43d6:	8f 87       	std	Y+15, r24	; 0x0f
    43d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43da:	98 89       	ldd	r25, Y+16	; 0x10
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	f1 f7       	brne	.-4      	; 0x43dc <CLCD_voidSendCommend+0x118>
    43e0:	98 8b       	std	Y+16, r25	; 0x10
    43e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue ( CLCD_CONTROL_PORT , CLCD_EN , DIO_LOW  );
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	62 e0       	ldi	r22, 0x02	; 2
    43e8:	40 e0       	ldi	r20, 0x00	; 0
    43ea:	0e 94 86 19 	call	0x330c	; 0x330c <DIO_enumSetPinValue>
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	a0 e8       	ldi	r26, 0x80	; 128
    43f4:	bf e3       	ldi	r27, 0x3F	; 63
    43f6:	8b 87       	std	Y+11, r24	; 0x0b
    43f8:	9c 87       	std	Y+12, r25	; 0x0c
    43fa:	ad 87       	std	Y+13, r26	; 0x0d
    43fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4400:	7c 85       	ldd	r23, Y+12	; 0x0c
    4402:	8d 85       	ldd	r24, Y+13	; 0x0d
    4404:	9e 85       	ldd	r25, Y+14	; 0x0e
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	4a ef       	ldi	r20, 0xFA	; 250
    440c:	54 e4       	ldi	r21, 0x44	; 68
    440e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	8f 83       	std	Y+7, r24	; 0x07
    4418:	98 87       	std	Y+8, r25	; 0x08
    441a:	a9 87       	std	Y+9, r26	; 0x09
    441c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    441e:	6f 81       	ldd	r22, Y+7	; 0x07
    4420:	78 85       	ldd	r23, Y+8	; 0x08
    4422:	89 85       	ldd	r24, Y+9	; 0x09
    4424:	9a 85       	ldd	r25, Y+10	; 0x0a
    4426:	20 e0       	ldi	r18, 0x00	; 0
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	40 e8       	ldi	r20, 0x80	; 128
    442c:	5f e3       	ldi	r21, 0x3F	; 63
    442e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    4432:	88 23       	and	r24, r24
    4434:	2c f4       	brge	.+10     	; 0x4440 <CLCD_voidSendCommend+0x17c>
		__ticks = 1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	9e 83       	std	Y+6, r25	; 0x06
    443c:	8d 83       	std	Y+5, r24	; 0x05
    443e:	3f c0       	rjmp	.+126    	; 0x44be <CLCD_voidSendCommend+0x1fa>
	else if (__tmp > 65535)
    4440:	6f 81       	ldd	r22, Y+7	; 0x07
    4442:	78 85       	ldd	r23, Y+8	; 0x08
    4444:	89 85       	ldd	r24, Y+9	; 0x09
    4446:	9a 85       	ldd	r25, Y+10	; 0x0a
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	3f ef       	ldi	r19, 0xFF	; 255
    444c:	4f e7       	ldi	r20, 0x7F	; 127
    444e:	57 e4       	ldi	r21, 0x47	; 71
    4450:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    4454:	18 16       	cp	r1, r24
    4456:	4c f5       	brge	.+82     	; 0x44aa <CLCD_voidSendCommend+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4458:	6b 85       	ldd	r22, Y+11	; 0x0b
    445a:	7c 85       	ldd	r23, Y+12	; 0x0c
    445c:	8d 85       	ldd	r24, Y+13	; 0x0d
    445e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e2       	ldi	r20, 0x20	; 32
    4466:	51 e4       	ldi	r21, 0x41	; 65
    4468:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	bc 01       	movw	r22, r24
    4472:	cd 01       	movw	r24, r26
    4474:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	9e 83       	std	Y+6, r25	; 0x06
    447e:	8d 83       	std	Y+5, r24	; 0x05
    4480:	0f c0       	rjmp	.+30     	; 0x44a0 <CLCD_voidSendCommend+0x1dc>
    4482:	88 ec       	ldi	r24, 0xC8	; 200
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	9c 83       	std	Y+4, r25	; 0x04
    4488:	8b 83       	std	Y+3, r24	; 0x03
    448a:	8b 81       	ldd	r24, Y+3	; 0x03
    448c:	9c 81       	ldd	r25, Y+4	; 0x04
    448e:	01 97       	sbiw	r24, 0x01	; 1
    4490:	f1 f7       	brne	.-4      	; 0x448e <CLCD_voidSendCommend+0x1ca>
    4492:	9c 83       	std	Y+4, r25	; 0x04
    4494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4496:	8d 81       	ldd	r24, Y+5	; 0x05
    4498:	9e 81       	ldd	r25, Y+6	; 0x06
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	9e 83       	std	Y+6, r25	; 0x06
    449e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a0:	8d 81       	ldd	r24, Y+5	; 0x05
    44a2:	9e 81       	ldd	r25, Y+6	; 0x06
    44a4:	00 97       	sbiw	r24, 0x00	; 0
    44a6:	69 f7       	brne	.-38     	; 0x4482 <CLCD_voidSendCommend+0x1be>
    44a8:	14 c0       	rjmp	.+40     	; 0x44d2 <CLCD_voidSendCommend+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44aa:	6f 81       	ldd	r22, Y+7	; 0x07
    44ac:	78 85       	ldd	r23, Y+8	; 0x08
    44ae:	89 85       	ldd	r24, Y+9	; 0x09
    44b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	9e 83       	std	Y+6, r25	; 0x06
    44bc:	8d 83       	std	Y+5, r24	; 0x05
    44be:	8d 81       	ldd	r24, Y+5	; 0x05
    44c0:	9e 81       	ldd	r25, Y+6	; 0x06
    44c2:	9a 83       	std	Y+2, r25	; 0x02
    44c4:	89 83       	std	Y+1, r24	; 0x01
    44c6:	89 81       	ldd	r24, Y+1	; 0x01
    44c8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <CLCD_voidSendCommend+0x206>
    44ce:	9a 83       	std	Y+2, r25	; 0x02
    44d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    44d2:	6d 96       	adiw	r28, 0x1d	; 29
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	cf 91       	pop	r28
    44e0:	df 91       	pop	r29
    44e2:	08 95       	ret

000044e4 <CLCD_voidSendString>:
void CLCD_voidSendString  ( u8 * Copy_u8ptrString ){
    44e4:	df 93       	push	r29
    44e6:	cf 93       	push	r28
    44e8:	00 d0       	rcall	.+0      	; 0x44ea <CLCD_voidSendString+0x6>
    44ea:	0f 92       	push	r0
    44ec:	cd b7       	in	r28, 0x3d	; 61
    44ee:	de b7       	in	r29, 0x3e	; 62
    44f0:	9b 83       	std	Y+3, r25	; 0x03
    44f2:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Iterator = 0 ;
    44f4:	19 82       	std	Y+1, r1	; 0x01
    44f6:	0e c0       	rjmp	.+28     	; 0x4514 <CLCD_voidSendString+0x30>

	while( Copy_u8ptrString[ LOC_u8Iterator ] != '\0' ){
		CLCD_voidSendData( Copy_u8ptrString[ LOC_u8Iterator ] );
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	28 2f       	mov	r18, r24
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4500:	9b 81       	ldd	r25, Y+3	; 0x03
    4502:	fc 01       	movw	r30, r24
    4504:	e2 0f       	add	r30, r18
    4506:	f3 1f       	adc	r31, r19
    4508:	80 81       	ld	r24, Z
    450a:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
		LOC_u8Iterator++ ;
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	8f 5f       	subi	r24, 0xFF	; 255
    4512:	89 83       	std	Y+1, r24	; 0x01
}
void CLCD_voidSendString  ( u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[ LOC_u8Iterator ] != '\0' ){
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	28 2f       	mov	r18, r24
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	8a 81       	ldd	r24, Y+2	; 0x02
    451c:	9b 81       	ldd	r25, Y+3	; 0x03
    451e:	fc 01       	movw	r30, r24
    4520:	e2 0f       	add	r30, r18
    4522:	f3 1f       	adc	r31, r19
    4524:	80 81       	ld	r24, Z
    4526:	88 23       	and	r24, r24
    4528:	39 f7       	brne	.-50     	; 0x44f8 <CLCD_voidSendString+0x14>
		CLCD_voidSendData( Copy_u8ptrString[ LOC_u8Iterator ] );
		LOC_u8Iterator++ ;
	}
}
    452a:	0f 90       	pop	r0
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0
    4530:	cf 91       	pop	r28
    4532:	df 91       	pop	r29
    4534:	08 95       	ret

00004536 <CLCD_voidSendNumber>:
void CLCD_voidSendNumber  ( u64 Copy_u64ptrNumber ){
    4536:	af 92       	push	r10
    4538:	bf 92       	push	r11
    453a:	cf 92       	push	r12
    453c:	df 92       	push	r13
    453e:	ef 92       	push	r14
    4540:	ff 92       	push	r15
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
    4546:	df 93       	push	r29
    4548:	cf 93       	push	r28
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	c6 56       	subi	r28, 0x66	; 102
    4550:	d0 40       	sbci	r29, 0x00	; 0
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	de bf       	out	0x3e, r29	; 62
    4558:	0f be       	out	0x3f, r0	; 63
    455a:	cd bf       	out	0x3d, r28	; 61
    455c:	29 87       	std	Y+9, r18	; 0x09
    455e:	3a 87       	std	Y+10, r19	; 0x0a
    4560:	4b 87       	std	Y+11, r20	; 0x0b
    4562:	5c 87       	std	Y+12, r21	; 0x0c
    4564:	6d 87       	std	Y+13, r22	; 0x0d
    4566:	7e 87       	std	Y+14, r23	; 0x0e
    4568:	8f 87       	std	Y+15, r24	; 0x0f
    456a:	98 8b       	std	Y+16, r25	; 0x10
	u64 Loc_u64Reversed = 1 ;
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	89 83       	std	Y+1, r24	; 0x01
    4570:	1a 82       	std	Y+2, r1	; 0x02
    4572:	1b 82       	std	Y+3, r1	; 0x03
    4574:	1c 82       	std	Y+4, r1	; 0x04
    4576:	1d 82       	std	Y+5, r1	; 0x05
    4578:	1e 82       	std	Y+6, r1	; 0x06
    457a:	1f 82       	std	Y+7, r1	; 0x07
    457c:	18 86       	std	Y+8, r1	; 0x08
	if(Copy_u64ptrNumber == 0 ) {CLCD_voidSendString('0');}
    457e:	89 85       	ldd	r24, Y+9	; 0x09
    4580:	9a 85       	ldd	r25, Y+10	; 0x0a
    4582:	89 2b       	or	r24, r25
    4584:	9b 85       	ldd	r25, Y+11	; 0x0b
    4586:	89 2b       	or	r24, r25
    4588:	9c 85       	ldd	r25, Y+12	; 0x0c
    458a:	89 2b       	or	r24, r25
    458c:	9d 85       	ldd	r25, Y+13	; 0x0d
    458e:	89 2b       	or	r24, r25
    4590:	9e 85       	ldd	r25, Y+14	; 0x0e
    4592:	89 2b       	or	r24, r25
    4594:	9f 85       	ldd	r25, Y+15	; 0x0f
    4596:	89 2b       	or	r24, r25
    4598:	98 89       	ldd	r25, Y+16	; 0x10
    459a:	89 2b       	or	r24, r25
    459c:	88 23       	and	r24, r24
    459e:	09 f0       	breq	.+2      	; 0x45a2 <CLCD_voidSendNumber+0x6c>
    45a0:	63 c3       	rjmp	.+1734   	; 0x4c68 <CLCD_voidSendNumber+0x732>
    45a2:	80 e3       	ldi	r24, 0x30	; 48
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    45aa:	ef c3       	rjmp	.+2014   	; 0x4d8a <CLCD_voidSendNumber+0x854>
	else{
		while( Copy_u64ptrNumber != 0){
			Loc_u64Reversed = (Loc_u64Reversed * 10 ) + (Copy_u64ptrNumber % 10);
    45ac:	29 81       	ldd	r18, Y+1	; 0x01
    45ae:	3a 81       	ldd	r19, Y+2	; 0x02
    45b0:	4b 81       	ldd	r20, Y+3	; 0x03
    45b2:	5c 81       	ldd	r21, Y+4	; 0x04
    45b4:	6d 81       	ldd	r22, Y+5	; 0x05
    45b6:	7e 81       	ldd	r23, Y+6	; 0x06
    45b8:	8f 81       	ldd	r24, Y+7	; 0x07
    45ba:	98 85       	ldd	r25, Y+8	; 0x08
    45bc:	a2 2e       	mov	r10, r18
    45be:	b3 2e       	mov	r11, r19
    45c0:	c4 2e       	mov	r12, r20
    45c2:	d5 2e       	mov	r13, r21
    45c4:	e6 2e       	mov	r14, r22
    45c6:	f7 2e       	mov	r15, r23
    45c8:	08 2f       	mov	r16, r24
    45ca:	19 2f       	mov	r17, r25
    45cc:	2a 2d       	mov	r18, r10
    45ce:	3b 2d       	mov	r19, r11
    45d0:	4c 2d       	mov	r20, r12
    45d2:	5d 2d       	mov	r21, r13
    45d4:	6e 2d       	mov	r22, r14
    45d6:	7f 2d       	mov	r23, r15
    45d8:	80 2f       	mov	r24, r16
    45da:	91 2f       	mov	r25, r17
    45dc:	01 e0       	ldi	r16, 0x01	; 1
    45de:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    45e2:	29 a3       	std	Y+33, r18	; 0x21
    45e4:	3a a3       	std	Y+34, r19	; 0x22
    45e6:	4b a3       	std	Y+35, r20	; 0x23
    45e8:	5c a3       	std	Y+36, r21	; 0x24
    45ea:	6d a3       	std	Y+37, r22	; 0x25
    45ec:	7e a3       	std	Y+38, r23	; 0x26
    45ee:	8f a3       	std	Y+39, r24	; 0x27
    45f0:	98 a7       	std	Y+40, r25	; 0x28
    45f2:	29 a1       	ldd	r18, Y+33	; 0x21
    45f4:	3a a1       	ldd	r19, Y+34	; 0x22
    45f6:	4b a1       	ldd	r20, Y+35	; 0x23
    45f8:	5c a1       	ldd	r21, Y+36	; 0x24
    45fa:	6d a1       	ldd	r22, Y+37	; 0x25
    45fc:	7e a1       	ldd	r23, Y+38	; 0x26
    45fe:	8f a1       	ldd	r24, Y+39	; 0x27
    4600:	98 a5       	ldd	r25, Y+40	; 0x28
    4602:	02 e0       	ldi	r16, 0x02	; 2
    4604:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    4608:	29 a7       	std	Y+41, r18	; 0x29
    460a:	3a a7       	std	Y+42, r19	; 0x2a
    460c:	4b a7       	std	Y+43, r20	; 0x2b
    460e:	5c a7       	std	Y+44, r21	; 0x2c
    4610:	6d a7       	std	Y+45, r22	; 0x2d
    4612:	7e a7       	std	Y+46, r23	; 0x2e
    4614:	8f a7       	std	Y+47, r24	; 0x2f
    4616:	98 ab       	std	Y+48, r25	; 0x30
    4618:	89 a1       	ldd	r24, Y+33	; 0x21
    461a:	99 a5       	ldd	r25, Y+41	; 0x29
    461c:	89 0f       	add	r24, r25
    461e:	89 ab       	std	Y+49, r24	; 0x31
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	89 af       	std	Y+57, r24	; 0x39
    4624:	99 a9       	ldd	r25, Y+49	; 0x31
    4626:	89 a1       	ldd	r24, Y+33	; 0x21
    4628:	98 17       	cp	r25, r24
    462a:	08 f0       	brcs	.+2      	; 0x462e <CLCD_voidSendNumber+0xf8>
    462c:	19 ae       	std	Y+57, r1	; 0x39
    462e:	9a a1       	ldd	r25, Y+34	; 0x22
    4630:	8a a5       	ldd	r24, Y+42	; 0x2a
    4632:	98 0f       	add	r25, r24
    4634:	9a ab       	std	Y+50, r25	; 0x32
    4636:	91 e0       	ldi	r25, 0x01	; 1
    4638:	9a af       	std	Y+58, r25	; 0x3a
    463a:	8a a9       	ldd	r24, Y+50	; 0x32
    463c:	9a a1       	ldd	r25, Y+34	; 0x22
    463e:	89 17       	cp	r24, r25
    4640:	08 f0       	brcs	.+2      	; 0x4644 <CLCD_voidSendNumber+0x10e>
    4642:	1a ae       	std	Y+58, r1	; 0x3a
    4644:	89 ad       	ldd	r24, Y+57	; 0x39
    4646:	9a a9       	ldd	r25, Y+50	; 0x32
    4648:	89 0f       	add	r24, r25
    464a:	8b af       	std	Y+59, r24	; 0x3b
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	8c af       	std	Y+60, r24	; 0x3c
    4650:	9b ad       	ldd	r25, Y+59	; 0x3b
    4652:	8a a9       	ldd	r24, Y+50	; 0x32
    4654:	98 17       	cp	r25, r24
    4656:	08 f0       	brcs	.+2      	; 0x465a <CLCD_voidSendNumber+0x124>
    4658:	1c ae       	std	Y+60, r1	; 0x3c
    465a:	9a ad       	ldd	r25, Y+58	; 0x3a
    465c:	8c ad       	ldd	r24, Y+60	; 0x3c
    465e:	98 2b       	or	r25, r24
    4660:	9a af       	std	Y+58, r25	; 0x3a
    4662:	9b ad       	ldd	r25, Y+59	; 0x3b
    4664:	9a ab       	std	Y+50, r25	; 0x32
    4666:	8b a1       	ldd	r24, Y+35	; 0x23
    4668:	9b a5       	ldd	r25, Y+43	; 0x2b
    466a:	89 0f       	add	r24, r25
    466c:	8b ab       	std	Y+51, r24	; 0x33
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	8d af       	std	Y+61, r24	; 0x3d
    4672:	9b a9       	ldd	r25, Y+51	; 0x33
    4674:	8b a1       	ldd	r24, Y+35	; 0x23
    4676:	98 17       	cp	r25, r24
    4678:	08 f0       	brcs	.+2      	; 0x467c <CLCD_voidSendNumber+0x146>
    467a:	1d ae       	std	Y+61, r1	; 0x3d
    467c:	9a ad       	ldd	r25, Y+58	; 0x3a
    467e:	8b a9       	ldd	r24, Y+51	; 0x33
    4680:	98 0f       	add	r25, r24
    4682:	9e af       	std	Y+62, r25	; 0x3e
    4684:	91 e0       	ldi	r25, 0x01	; 1
    4686:	9f af       	std	Y+63, r25	; 0x3f
    4688:	8e ad       	ldd	r24, Y+62	; 0x3e
    468a:	9b a9       	ldd	r25, Y+51	; 0x33
    468c:	89 17       	cp	r24, r25
    468e:	08 f0       	brcs	.+2      	; 0x4692 <CLCD_voidSendNumber+0x15c>
    4690:	1f ae       	std	Y+63, r1	; 0x3f
    4692:	8d ad       	ldd	r24, Y+61	; 0x3d
    4694:	9f ad       	ldd	r25, Y+63	; 0x3f
    4696:	89 2b       	or	r24, r25
    4698:	8d af       	std	Y+61, r24	; 0x3d
    469a:	8e ad       	ldd	r24, Y+62	; 0x3e
    469c:	8b ab       	std	Y+51, r24	; 0x33
    469e:	9c a1       	ldd	r25, Y+36	; 0x24
    46a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    46a2:	98 0f       	add	r25, r24
    46a4:	9c ab       	std	Y+52, r25	; 0x34
    46a6:	91 e0       	ldi	r25, 0x01	; 1
    46a8:	21 96       	adiw	r28, 0x01	; 1
    46aa:	9f af       	std	Y+63, r25	; 0x3f
    46ac:	21 97       	sbiw	r28, 0x01	; 1
    46ae:	8c a9       	ldd	r24, Y+52	; 0x34
    46b0:	9c a1       	ldd	r25, Y+36	; 0x24
    46b2:	89 17       	cp	r24, r25
    46b4:	18 f0       	brcs	.+6      	; 0x46bc <CLCD_voidSendNumber+0x186>
    46b6:	21 96       	adiw	r28, 0x01	; 1
    46b8:	1f ae       	std	Y+63, r1	; 0x3f
    46ba:	21 97       	sbiw	r28, 0x01	; 1
    46bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    46be:	9c a9       	ldd	r25, Y+52	; 0x34
    46c0:	89 0f       	add	r24, r25
    46c2:	22 96       	adiw	r28, 0x02	; 2
    46c4:	8f af       	std	Y+63, r24	; 0x3f
    46c6:	22 97       	sbiw	r28, 0x02	; 2
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	23 96       	adiw	r28, 0x03	; 3
    46cc:	8f af       	std	Y+63, r24	; 0x3f
    46ce:	23 97       	sbiw	r28, 0x03	; 3
    46d0:	22 96       	adiw	r28, 0x02	; 2
    46d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    46d4:	22 97       	sbiw	r28, 0x02	; 2
    46d6:	8c a9       	ldd	r24, Y+52	; 0x34
    46d8:	98 17       	cp	r25, r24
    46da:	18 f0       	brcs	.+6      	; 0x46e2 <CLCD_voidSendNumber+0x1ac>
    46dc:	23 96       	adiw	r28, 0x03	; 3
    46de:	1f ae       	std	Y+63, r1	; 0x3f
    46e0:	23 97       	sbiw	r28, 0x03	; 3
    46e2:	21 96       	adiw	r28, 0x01	; 1
    46e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    46e6:	21 97       	sbiw	r28, 0x01	; 1
    46e8:	23 96       	adiw	r28, 0x03	; 3
    46ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    46ec:	23 97       	sbiw	r28, 0x03	; 3
    46ee:	98 2b       	or	r25, r24
    46f0:	21 96       	adiw	r28, 0x01	; 1
    46f2:	9f af       	std	Y+63, r25	; 0x3f
    46f4:	21 97       	sbiw	r28, 0x01	; 1
    46f6:	22 96       	adiw	r28, 0x02	; 2
    46f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46fa:	22 97       	sbiw	r28, 0x02	; 2
    46fc:	9c ab       	std	Y+52, r25	; 0x34
    46fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4700:	9d a5       	ldd	r25, Y+45	; 0x2d
    4702:	89 0f       	add	r24, r25
    4704:	8d ab       	std	Y+53, r24	; 0x35
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	24 96       	adiw	r28, 0x04	; 4
    470a:	8f af       	std	Y+63, r24	; 0x3f
    470c:	24 97       	sbiw	r28, 0x04	; 4
    470e:	9d a9       	ldd	r25, Y+53	; 0x35
    4710:	8d a1       	ldd	r24, Y+37	; 0x25
    4712:	98 17       	cp	r25, r24
    4714:	18 f0       	brcs	.+6      	; 0x471c <CLCD_voidSendNumber+0x1e6>
    4716:	24 96       	adiw	r28, 0x04	; 4
    4718:	1f ae       	std	Y+63, r1	; 0x3f
    471a:	24 97       	sbiw	r28, 0x04	; 4
    471c:	21 96       	adiw	r28, 0x01	; 1
    471e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4720:	21 97       	sbiw	r28, 0x01	; 1
    4722:	8d a9       	ldd	r24, Y+53	; 0x35
    4724:	98 0f       	add	r25, r24
    4726:	25 96       	adiw	r28, 0x05	; 5
    4728:	9f af       	std	Y+63, r25	; 0x3f
    472a:	25 97       	sbiw	r28, 0x05	; 5
    472c:	91 e0       	ldi	r25, 0x01	; 1
    472e:	26 96       	adiw	r28, 0x06	; 6
    4730:	9f af       	std	Y+63, r25	; 0x3f
    4732:	26 97       	sbiw	r28, 0x06	; 6
    4734:	25 96       	adiw	r28, 0x05	; 5
    4736:	8f ad       	ldd	r24, Y+63	; 0x3f
    4738:	25 97       	sbiw	r28, 0x05	; 5
    473a:	9d a9       	ldd	r25, Y+53	; 0x35
    473c:	89 17       	cp	r24, r25
    473e:	18 f0       	brcs	.+6      	; 0x4746 <CLCD_voidSendNumber+0x210>
    4740:	26 96       	adiw	r28, 0x06	; 6
    4742:	1f ae       	std	Y+63, r1	; 0x3f
    4744:	26 97       	sbiw	r28, 0x06	; 6
    4746:	24 96       	adiw	r28, 0x04	; 4
    4748:	8f ad       	ldd	r24, Y+63	; 0x3f
    474a:	24 97       	sbiw	r28, 0x04	; 4
    474c:	26 96       	adiw	r28, 0x06	; 6
    474e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4750:	26 97       	sbiw	r28, 0x06	; 6
    4752:	89 2b       	or	r24, r25
    4754:	24 96       	adiw	r28, 0x04	; 4
    4756:	8f af       	std	Y+63, r24	; 0x3f
    4758:	24 97       	sbiw	r28, 0x04	; 4
    475a:	25 96       	adiw	r28, 0x05	; 5
    475c:	8f ad       	ldd	r24, Y+63	; 0x3f
    475e:	25 97       	sbiw	r28, 0x05	; 5
    4760:	8d ab       	std	Y+53, r24	; 0x35
    4762:	9e a1       	ldd	r25, Y+38	; 0x26
    4764:	8e a5       	ldd	r24, Y+46	; 0x2e
    4766:	98 0f       	add	r25, r24
    4768:	9e ab       	std	Y+54, r25	; 0x36
    476a:	91 e0       	ldi	r25, 0x01	; 1
    476c:	27 96       	adiw	r28, 0x07	; 7
    476e:	9f af       	std	Y+63, r25	; 0x3f
    4770:	27 97       	sbiw	r28, 0x07	; 7
    4772:	8e a9       	ldd	r24, Y+54	; 0x36
    4774:	9e a1       	ldd	r25, Y+38	; 0x26
    4776:	89 17       	cp	r24, r25
    4778:	18 f0       	brcs	.+6      	; 0x4780 <CLCD_voidSendNumber+0x24a>
    477a:	27 96       	adiw	r28, 0x07	; 7
    477c:	1f ae       	std	Y+63, r1	; 0x3f
    477e:	27 97       	sbiw	r28, 0x07	; 7
    4780:	24 96       	adiw	r28, 0x04	; 4
    4782:	8f ad       	ldd	r24, Y+63	; 0x3f
    4784:	24 97       	sbiw	r28, 0x04	; 4
    4786:	9e a9       	ldd	r25, Y+54	; 0x36
    4788:	89 0f       	add	r24, r25
    478a:	28 96       	adiw	r28, 0x08	; 8
    478c:	8f af       	std	Y+63, r24	; 0x3f
    478e:	28 97       	sbiw	r28, 0x08	; 8
    4790:	81 e0       	ldi	r24, 0x01	; 1
    4792:	29 96       	adiw	r28, 0x09	; 9
    4794:	8f af       	std	Y+63, r24	; 0x3f
    4796:	29 97       	sbiw	r28, 0x09	; 9
    4798:	28 96       	adiw	r28, 0x08	; 8
    479a:	9f ad       	ldd	r25, Y+63	; 0x3f
    479c:	28 97       	sbiw	r28, 0x08	; 8
    479e:	8e a9       	ldd	r24, Y+54	; 0x36
    47a0:	98 17       	cp	r25, r24
    47a2:	18 f0       	brcs	.+6      	; 0x47aa <CLCD_voidSendNumber+0x274>
    47a4:	29 96       	adiw	r28, 0x09	; 9
    47a6:	1f ae       	std	Y+63, r1	; 0x3f
    47a8:	29 97       	sbiw	r28, 0x09	; 9
    47aa:	27 96       	adiw	r28, 0x07	; 7
    47ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    47ae:	27 97       	sbiw	r28, 0x07	; 7
    47b0:	29 96       	adiw	r28, 0x09	; 9
    47b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    47b4:	29 97       	sbiw	r28, 0x09	; 9
    47b6:	98 2b       	or	r25, r24
    47b8:	27 96       	adiw	r28, 0x07	; 7
    47ba:	9f af       	std	Y+63, r25	; 0x3f
    47bc:	27 97       	sbiw	r28, 0x07	; 7
    47be:	28 96       	adiw	r28, 0x08	; 8
    47c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    47c2:	28 97       	sbiw	r28, 0x08	; 8
    47c4:	9e ab       	std	Y+54, r25	; 0x36
    47c6:	8f a1       	ldd	r24, Y+39	; 0x27
    47c8:	9f a5       	ldd	r25, Y+47	; 0x2f
    47ca:	89 0f       	add	r24, r25
    47cc:	8f ab       	std	Y+55, r24	; 0x37
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	2a 96       	adiw	r28, 0x0a	; 10
    47d2:	8f af       	std	Y+63, r24	; 0x3f
    47d4:	2a 97       	sbiw	r28, 0x0a	; 10
    47d6:	9f a9       	ldd	r25, Y+55	; 0x37
    47d8:	8f a1       	ldd	r24, Y+39	; 0x27
    47da:	98 17       	cp	r25, r24
    47dc:	18 f0       	brcs	.+6      	; 0x47e4 <CLCD_voidSendNumber+0x2ae>
    47de:	2a 96       	adiw	r28, 0x0a	; 10
    47e0:	1f ae       	std	Y+63, r1	; 0x3f
    47e2:	2a 97       	sbiw	r28, 0x0a	; 10
    47e4:	27 96       	adiw	r28, 0x07	; 7
    47e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    47e8:	27 97       	sbiw	r28, 0x07	; 7
    47ea:	8f a9       	ldd	r24, Y+55	; 0x37
    47ec:	98 0f       	add	r25, r24
    47ee:	2b 96       	adiw	r28, 0x0b	; 11
    47f0:	9f af       	std	Y+63, r25	; 0x3f
    47f2:	2b 97       	sbiw	r28, 0x0b	; 11
    47f4:	91 e0       	ldi	r25, 0x01	; 1
    47f6:	2c 96       	adiw	r28, 0x0c	; 12
    47f8:	9f af       	std	Y+63, r25	; 0x3f
    47fa:	2c 97       	sbiw	r28, 0x0c	; 12
    47fc:	2b 96       	adiw	r28, 0x0b	; 11
    47fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    4800:	2b 97       	sbiw	r28, 0x0b	; 11
    4802:	9f a9       	ldd	r25, Y+55	; 0x37
    4804:	89 17       	cp	r24, r25
    4806:	18 f0       	brcs	.+6      	; 0x480e <CLCD_voidSendNumber+0x2d8>
    4808:	2c 96       	adiw	r28, 0x0c	; 12
    480a:	1f ae       	std	Y+63, r1	; 0x3f
    480c:	2c 97       	sbiw	r28, 0x0c	; 12
    480e:	2a 96       	adiw	r28, 0x0a	; 10
    4810:	8f ad       	ldd	r24, Y+63	; 0x3f
    4812:	2a 97       	sbiw	r28, 0x0a	; 10
    4814:	2c 96       	adiw	r28, 0x0c	; 12
    4816:	9f ad       	ldd	r25, Y+63	; 0x3f
    4818:	2c 97       	sbiw	r28, 0x0c	; 12
    481a:	89 2b       	or	r24, r25
    481c:	2a 96       	adiw	r28, 0x0a	; 10
    481e:	8f af       	std	Y+63, r24	; 0x3f
    4820:	2a 97       	sbiw	r28, 0x0a	; 10
    4822:	2b 96       	adiw	r28, 0x0b	; 11
    4824:	8f ad       	ldd	r24, Y+63	; 0x3f
    4826:	2b 97       	sbiw	r28, 0x0b	; 11
    4828:	8f ab       	std	Y+55, r24	; 0x37
    482a:	98 a5       	ldd	r25, Y+40	; 0x28
    482c:	88 a9       	ldd	r24, Y+48	; 0x30
    482e:	98 0f       	add	r25, r24
    4830:	98 af       	std	Y+56, r25	; 0x38
    4832:	2a 96       	adiw	r28, 0x0a	; 10
    4834:	8f ad       	ldd	r24, Y+63	; 0x3f
    4836:	2a 97       	sbiw	r28, 0x0a	; 10
    4838:	98 ad       	ldd	r25, Y+56	; 0x38
    483a:	89 0f       	add	r24, r25
    483c:	88 af       	std	Y+56, r24	; 0x38
    483e:	89 a9       	ldd	r24, Y+49	; 0x31
    4840:	89 8f       	std	Y+25, r24	; 0x19
    4842:	9a a9       	ldd	r25, Y+50	; 0x32
    4844:	9a 8f       	std	Y+26, r25	; 0x1a
    4846:	8b a9       	ldd	r24, Y+51	; 0x33
    4848:	8b 8f       	std	Y+27, r24	; 0x1b
    484a:	9c a9       	ldd	r25, Y+52	; 0x34
    484c:	9c 8f       	std	Y+28, r25	; 0x1c
    484e:	8d a9       	ldd	r24, Y+53	; 0x35
    4850:	8d 8f       	std	Y+29, r24	; 0x1d
    4852:	9e a9       	ldd	r25, Y+54	; 0x36
    4854:	9e 8f       	std	Y+30, r25	; 0x1e
    4856:	8f a9       	ldd	r24, Y+55	; 0x37
    4858:	8f 8f       	std	Y+31, r24	; 0x1f
    485a:	98 ad       	ldd	r25, Y+56	; 0x38
    485c:	98 a3       	std	Y+32, r25	; 0x20
    485e:	a9 84       	ldd	r10, Y+9	; 0x09
    4860:	ba 84       	ldd	r11, Y+10	; 0x0a
    4862:	cb 84       	ldd	r12, Y+11	; 0x0b
    4864:	dc 84       	ldd	r13, Y+12	; 0x0c
    4866:	ed 84       	ldd	r14, Y+13	; 0x0d
    4868:	fe 84       	ldd	r15, Y+14	; 0x0e
    486a:	0f 85       	ldd	r16, Y+15	; 0x0f
    486c:	18 89       	ldd	r17, Y+16	; 0x10
    486e:	2a 2d       	mov	r18, r10
    4870:	3b 2d       	mov	r19, r11
    4872:	4c 2d       	mov	r20, r12
    4874:	5d 2d       	mov	r21, r13
    4876:	6e 2d       	mov	r22, r14
    4878:	7f 2d       	mov	r23, r15
    487a:	80 2f       	mov	r24, r16
    487c:	91 2f       	mov	r25, r17
    487e:	0f 2e       	mov	r0, r31
    4880:	fa e0       	ldi	r31, 0x0A	; 10
    4882:	af 2e       	mov	r10, r31
    4884:	f0 2d       	mov	r31, r0
    4886:	bb 24       	eor	r11, r11
    4888:	cc 24       	eor	r12, r12
    488a:	dd 24       	eor	r13, r13
    488c:	ee 24       	eor	r14, r14
    488e:	ff 24       	eor	r15, r15
    4890:	00 e0       	ldi	r16, 0x00	; 0
    4892:	10 e0       	ldi	r17, 0x00	; 0
    4894:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    4898:	a2 2e       	mov	r10, r18
    489a:	b3 2e       	mov	r11, r19
    489c:	c4 2e       	mov	r12, r20
    489e:	d5 2e       	mov	r13, r21
    48a0:	e6 2e       	mov	r14, r22
    48a2:	f7 2e       	mov	r15, r23
    48a4:	08 2f       	mov	r16, r24
    48a6:	19 2f       	mov	r17, r25
    48a8:	a9 8a       	std	Y+17, r10	; 0x11
    48aa:	ba 8a       	std	Y+18, r11	; 0x12
    48ac:	cb 8a       	std	Y+19, r12	; 0x13
    48ae:	dc 8a       	std	Y+20, r13	; 0x14
    48b0:	ed 8a       	std	Y+21, r14	; 0x15
    48b2:	fe 8a       	std	Y+22, r15	; 0x16
    48b4:	0f 8b       	std	Y+23, r16	; 0x17
    48b6:	18 8f       	std	Y+24, r17	; 0x18
    48b8:	89 8d       	ldd	r24, Y+25	; 0x19
    48ba:	99 89       	ldd	r25, Y+17	; 0x11
    48bc:	89 0f       	add	r24, r25
    48be:	2d 96       	adiw	r28, 0x0d	; 13
    48c0:	8f af       	std	Y+63, r24	; 0x3f
    48c2:	2d 97       	sbiw	r28, 0x0d	; 13
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	65 96       	adiw	r28, 0x15	; 21
    48c8:	8f af       	std	Y+63, r24	; 0x3f
    48ca:	65 97       	sbiw	r28, 0x15	; 21
    48cc:	2d 96       	adiw	r28, 0x0d	; 13
    48ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    48d0:	2d 97       	sbiw	r28, 0x0d	; 13
    48d2:	89 8d       	ldd	r24, Y+25	; 0x19
    48d4:	98 17       	cp	r25, r24
    48d6:	18 f0       	brcs	.+6      	; 0x48de <CLCD_voidSendNumber+0x3a8>
    48d8:	65 96       	adiw	r28, 0x15	; 21
    48da:	1f ae       	std	Y+63, r1	; 0x3f
    48dc:	65 97       	sbiw	r28, 0x15	; 21
    48de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    48e0:	8a 89       	ldd	r24, Y+18	; 0x12
    48e2:	98 0f       	add	r25, r24
    48e4:	2e 96       	adiw	r28, 0x0e	; 14
    48e6:	9f af       	std	Y+63, r25	; 0x3f
    48e8:	2e 97       	sbiw	r28, 0x0e	; 14
    48ea:	91 e0       	ldi	r25, 0x01	; 1
    48ec:	66 96       	adiw	r28, 0x16	; 22
    48ee:	9f af       	std	Y+63, r25	; 0x3f
    48f0:	66 97       	sbiw	r28, 0x16	; 22
    48f2:	2e 96       	adiw	r28, 0x0e	; 14
    48f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    48f6:	2e 97       	sbiw	r28, 0x0e	; 14
    48f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    48fa:	89 17       	cp	r24, r25
    48fc:	18 f0       	brcs	.+6      	; 0x4904 <CLCD_voidSendNumber+0x3ce>
    48fe:	66 96       	adiw	r28, 0x16	; 22
    4900:	1f ae       	std	Y+63, r1	; 0x3f
    4902:	66 97       	sbiw	r28, 0x16	; 22
    4904:	65 96       	adiw	r28, 0x15	; 21
    4906:	8f ad       	ldd	r24, Y+63	; 0x3f
    4908:	65 97       	sbiw	r28, 0x15	; 21
    490a:	2e 96       	adiw	r28, 0x0e	; 14
    490c:	9f ad       	ldd	r25, Y+63	; 0x3f
    490e:	2e 97       	sbiw	r28, 0x0e	; 14
    4910:	89 0f       	add	r24, r25
    4912:	67 96       	adiw	r28, 0x17	; 23
    4914:	8f af       	std	Y+63, r24	; 0x3f
    4916:	67 97       	sbiw	r28, 0x17	; 23
    4918:	81 e0       	ldi	r24, 0x01	; 1
    491a:	68 96       	adiw	r28, 0x18	; 24
    491c:	8f af       	std	Y+63, r24	; 0x3f
    491e:	68 97       	sbiw	r28, 0x18	; 24
    4920:	67 96       	adiw	r28, 0x17	; 23
    4922:	9f ad       	ldd	r25, Y+63	; 0x3f
    4924:	67 97       	sbiw	r28, 0x17	; 23
    4926:	2e 96       	adiw	r28, 0x0e	; 14
    4928:	8f ad       	ldd	r24, Y+63	; 0x3f
    492a:	2e 97       	sbiw	r28, 0x0e	; 14
    492c:	98 17       	cp	r25, r24
    492e:	18 f0       	brcs	.+6      	; 0x4936 <CLCD_voidSendNumber+0x400>
    4930:	68 96       	adiw	r28, 0x18	; 24
    4932:	1f ae       	std	Y+63, r1	; 0x3f
    4934:	68 97       	sbiw	r28, 0x18	; 24
    4936:	66 96       	adiw	r28, 0x16	; 22
    4938:	9f ad       	ldd	r25, Y+63	; 0x3f
    493a:	66 97       	sbiw	r28, 0x16	; 22
    493c:	68 96       	adiw	r28, 0x18	; 24
    493e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4940:	68 97       	sbiw	r28, 0x18	; 24
    4942:	98 2b       	or	r25, r24
    4944:	66 96       	adiw	r28, 0x16	; 22
    4946:	9f af       	std	Y+63, r25	; 0x3f
    4948:	66 97       	sbiw	r28, 0x16	; 22
    494a:	67 96       	adiw	r28, 0x17	; 23
    494c:	9f ad       	ldd	r25, Y+63	; 0x3f
    494e:	67 97       	sbiw	r28, 0x17	; 23
    4950:	2e 96       	adiw	r28, 0x0e	; 14
    4952:	9f af       	std	Y+63, r25	; 0x3f
    4954:	2e 97       	sbiw	r28, 0x0e	; 14
    4956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4958:	9b 89       	ldd	r25, Y+19	; 0x13
    495a:	89 0f       	add	r24, r25
    495c:	2f 96       	adiw	r28, 0x0f	; 15
    495e:	8f af       	std	Y+63, r24	; 0x3f
    4960:	2f 97       	sbiw	r28, 0x0f	; 15
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	69 96       	adiw	r28, 0x19	; 25
    4966:	8f af       	std	Y+63, r24	; 0x3f
    4968:	69 97       	sbiw	r28, 0x19	; 25
    496a:	2f 96       	adiw	r28, 0x0f	; 15
    496c:	9f ad       	ldd	r25, Y+63	; 0x3f
    496e:	2f 97       	sbiw	r28, 0x0f	; 15
    4970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4972:	98 17       	cp	r25, r24
    4974:	18 f0       	brcs	.+6      	; 0x497c <CLCD_voidSendNumber+0x446>
    4976:	69 96       	adiw	r28, 0x19	; 25
    4978:	1f ae       	std	Y+63, r1	; 0x3f
    497a:	69 97       	sbiw	r28, 0x19	; 25
    497c:	66 96       	adiw	r28, 0x16	; 22
    497e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4980:	66 97       	sbiw	r28, 0x16	; 22
    4982:	2f 96       	adiw	r28, 0x0f	; 15
    4984:	8f ad       	ldd	r24, Y+63	; 0x3f
    4986:	2f 97       	sbiw	r28, 0x0f	; 15
    4988:	98 0f       	add	r25, r24
    498a:	6a 96       	adiw	r28, 0x1a	; 26
    498c:	9f af       	std	Y+63, r25	; 0x3f
    498e:	6a 97       	sbiw	r28, 0x1a	; 26
    4990:	91 e0       	ldi	r25, 0x01	; 1
    4992:	6b 96       	adiw	r28, 0x1b	; 27
    4994:	9f af       	std	Y+63, r25	; 0x3f
    4996:	6b 97       	sbiw	r28, 0x1b	; 27
    4998:	6a 96       	adiw	r28, 0x1a	; 26
    499a:	8f ad       	ldd	r24, Y+63	; 0x3f
    499c:	6a 97       	sbiw	r28, 0x1a	; 26
    499e:	2f 96       	adiw	r28, 0x0f	; 15
    49a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49a2:	2f 97       	sbiw	r28, 0x0f	; 15
    49a4:	89 17       	cp	r24, r25
    49a6:	18 f0       	brcs	.+6      	; 0x49ae <CLCD_voidSendNumber+0x478>
    49a8:	6b 96       	adiw	r28, 0x1b	; 27
    49aa:	1f ae       	std	Y+63, r1	; 0x3f
    49ac:	6b 97       	sbiw	r28, 0x1b	; 27
    49ae:	69 96       	adiw	r28, 0x19	; 25
    49b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    49b2:	69 97       	sbiw	r28, 0x19	; 25
    49b4:	6b 96       	adiw	r28, 0x1b	; 27
    49b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    49b8:	6b 97       	sbiw	r28, 0x1b	; 27
    49ba:	89 2b       	or	r24, r25
    49bc:	69 96       	adiw	r28, 0x19	; 25
    49be:	8f af       	std	Y+63, r24	; 0x3f
    49c0:	69 97       	sbiw	r28, 0x19	; 25
    49c2:	6a 96       	adiw	r28, 0x1a	; 26
    49c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    49c6:	6a 97       	sbiw	r28, 0x1a	; 26
    49c8:	2f 96       	adiw	r28, 0x0f	; 15
    49ca:	8f af       	std	Y+63, r24	; 0x3f
    49cc:	2f 97       	sbiw	r28, 0x0f	; 15
    49ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49d0:	8c 89       	ldd	r24, Y+20	; 0x14
    49d2:	98 0f       	add	r25, r24
    49d4:	60 96       	adiw	r28, 0x10	; 16
    49d6:	9f af       	std	Y+63, r25	; 0x3f
    49d8:	60 97       	sbiw	r28, 0x10	; 16
    49da:	91 e0       	ldi	r25, 0x01	; 1
    49dc:	6c 96       	adiw	r28, 0x1c	; 28
    49de:	9f af       	std	Y+63, r25	; 0x3f
    49e0:	6c 97       	sbiw	r28, 0x1c	; 28
    49e2:	60 96       	adiw	r28, 0x10	; 16
    49e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    49e6:	60 97       	sbiw	r28, 0x10	; 16
    49e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49ea:	89 17       	cp	r24, r25
    49ec:	18 f0       	brcs	.+6      	; 0x49f4 <CLCD_voidSendNumber+0x4be>
    49ee:	6c 96       	adiw	r28, 0x1c	; 28
    49f0:	1f ae       	std	Y+63, r1	; 0x3f
    49f2:	6c 97       	sbiw	r28, 0x1c	; 28
    49f4:	69 96       	adiw	r28, 0x19	; 25
    49f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    49f8:	69 97       	sbiw	r28, 0x19	; 25
    49fa:	60 96       	adiw	r28, 0x10	; 16
    49fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    49fe:	60 97       	sbiw	r28, 0x10	; 16
    4a00:	89 0f       	add	r24, r25
    4a02:	6d 96       	adiw	r28, 0x1d	; 29
    4a04:	8f af       	std	Y+63, r24	; 0x3f
    4a06:	6d 97       	sbiw	r28, 0x1d	; 29
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	6e 96       	adiw	r28, 0x1e	; 30
    4a0c:	8f af       	std	Y+63, r24	; 0x3f
    4a0e:	6e 97       	sbiw	r28, 0x1e	; 30
    4a10:	6d 96       	adiw	r28, 0x1d	; 29
    4a12:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a14:	6d 97       	sbiw	r28, 0x1d	; 29
    4a16:	60 96       	adiw	r28, 0x10	; 16
    4a18:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a1a:	60 97       	sbiw	r28, 0x10	; 16
    4a1c:	98 17       	cp	r25, r24
    4a1e:	18 f0       	brcs	.+6      	; 0x4a26 <CLCD_voidSendNumber+0x4f0>
    4a20:	6e 96       	adiw	r28, 0x1e	; 30
    4a22:	1f ae       	std	Y+63, r1	; 0x3f
    4a24:	6e 97       	sbiw	r28, 0x1e	; 30
    4a26:	6c 96       	adiw	r28, 0x1c	; 28
    4a28:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a2a:	6c 97       	sbiw	r28, 0x1c	; 28
    4a2c:	6e 96       	adiw	r28, 0x1e	; 30
    4a2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a30:	6e 97       	sbiw	r28, 0x1e	; 30
    4a32:	98 2b       	or	r25, r24
    4a34:	6c 96       	adiw	r28, 0x1c	; 28
    4a36:	9f af       	std	Y+63, r25	; 0x3f
    4a38:	6c 97       	sbiw	r28, 0x1c	; 28
    4a3a:	6d 96       	adiw	r28, 0x1d	; 29
    4a3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a3e:	6d 97       	sbiw	r28, 0x1d	; 29
    4a40:	60 96       	adiw	r28, 0x10	; 16
    4a42:	9f af       	std	Y+63, r25	; 0x3f
    4a44:	60 97       	sbiw	r28, 0x10	; 16
    4a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a48:	9d 89       	ldd	r25, Y+21	; 0x15
    4a4a:	89 0f       	add	r24, r25
    4a4c:	61 96       	adiw	r28, 0x11	; 17
    4a4e:	8f af       	std	Y+63, r24	; 0x3f
    4a50:	61 97       	sbiw	r28, 0x11	; 17
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	6f 96       	adiw	r28, 0x1f	; 31
    4a56:	8f af       	std	Y+63, r24	; 0x3f
    4a58:	6f 97       	sbiw	r28, 0x1f	; 31
    4a5a:	61 96       	adiw	r28, 0x11	; 17
    4a5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a5e:	61 97       	sbiw	r28, 0x11	; 17
    4a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a62:	98 17       	cp	r25, r24
    4a64:	18 f0       	brcs	.+6      	; 0x4a6c <CLCD_voidSendNumber+0x536>
    4a66:	6f 96       	adiw	r28, 0x1f	; 31
    4a68:	1f ae       	std	Y+63, r1	; 0x3f
    4a6a:	6f 97       	sbiw	r28, 0x1f	; 31
    4a6c:	6c 96       	adiw	r28, 0x1c	; 28
    4a6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a70:	6c 97       	sbiw	r28, 0x1c	; 28
    4a72:	61 96       	adiw	r28, 0x11	; 17
    4a74:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a76:	61 97       	sbiw	r28, 0x11	; 17
    4a78:	98 0f       	add	r25, r24
    4a7a:	a0 96       	adiw	r28, 0x20	; 32
    4a7c:	9f af       	std	Y+63, r25	; 0x3f
    4a7e:	a0 97       	sbiw	r28, 0x20	; 32
    4a80:	91 e0       	ldi	r25, 0x01	; 1
    4a82:	a1 96       	adiw	r28, 0x21	; 33
    4a84:	9f af       	std	Y+63, r25	; 0x3f
    4a86:	a1 97       	sbiw	r28, 0x21	; 33
    4a88:	a0 96       	adiw	r28, 0x20	; 32
    4a8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a8c:	a0 97       	sbiw	r28, 0x20	; 32
    4a8e:	61 96       	adiw	r28, 0x11	; 17
    4a90:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a92:	61 97       	sbiw	r28, 0x11	; 17
    4a94:	89 17       	cp	r24, r25
    4a96:	18 f0       	brcs	.+6      	; 0x4a9e <CLCD_voidSendNumber+0x568>
    4a98:	a1 96       	adiw	r28, 0x21	; 33
    4a9a:	1f ae       	std	Y+63, r1	; 0x3f
    4a9c:	a1 97       	sbiw	r28, 0x21	; 33
    4a9e:	6f 96       	adiw	r28, 0x1f	; 31
    4aa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4aa2:	6f 97       	sbiw	r28, 0x1f	; 31
    4aa4:	a1 96       	adiw	r28, 0x21	; 33
    4aa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4aa8:	a1 97       	sbiw	r28, 0x21	; 33
    4aaa:	89 2b       	or	r24, r25
    4aac:	6f 96       	adiw	r28, 0x1f	; 31
    4aae:	8f af       	std	Y+63, r24	; 0x3f
    4ab0:	6f 97       	sbiw	r28, 0x1f	; 31
    4ab2:	a0 96       	adiw	r28, 0x20	; 32
    4ab4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ab6:	a0 97       	sbiw	r28, 0x20	; 32
    4ab8:	61 96       	adiw	r28, 0x11	; 17
    4aba:	8f af       	std	Y+63, r24	; 0x3f
    4abc:	61 97       	sbiw	r28, 0x11	; 17
    4abe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ac0:	8e 89       	ldd	r24, Y+22	; 0x16
    4ac2:	98 0f       	add	r25, r24
    4ac4:	62 96       	adiw	r28, 0x12	; 18
    4ac6:	9f af       	std	Y+63, r25	; 0x3f
    4ac8:	62 97       	sbiw	r28, 0x12	; 18
    4aca:	91 e0       	ldi	r25, 0x01	; 1
    4acc:	a2 96       	adiw	r28, 0x22	; 34
    4ace:	9f af       	std	Y+63, r25	; 0x3f
    4ad0:	a2 97       	sbiw	r28, 0x22	; 34
    4ad2:	62 96       	adiw	r28, 0x12	; 18
    4ad4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ad6:	62 97       	sbiw	r28, 0x12	; 18
    4ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ada:	89 17       	cp	r24, r25
    4adc:	18 f0       	brcs	.+6      	; 0x4ae4 <CLCD_voidSendNumber+0x5ae>
    4ade:	a2 96       	adiw	r28, 0x22	; 34
    4ae0:	1f ae       	std	Y+63, r1	; 0x3f
    4ae2:	a2 97       	sbiw	r28, 0x22	; 34
    4ae4:	6f 96       	adiw	r28, 0x1f	; 31
    4ae6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ae8:	6f 97       	sbiw	r28, 0x1f	; 31
    4aea:	62 96       	adiw	r28, 0x12	; 18
    4aec:	9f ad       	ldd	r25, Y+63	; 0x3f
    4aee:	62 97       	sbiw	r28, 0x12	; 18
    4af0:	89 0f       	add	r24, r25
    4af2:	a3 96       	adiw	r28, 0x23	; 35
    4af4:	8f af       	std	Y+63, r24	; 0x3f
    4af6:	a3 97       	sbiw	r28, 0x23	; 35
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	a4 96       	adiw	r28, 0x24	; 36
    4afc:	8f af       	std	Y+63, r24	; 0x3f
    4afe:	a4 97       	sbiw	r28, 0x24	; 36
    4b00:	a3 96       	adiw	r28, 0x23	; 35
    4b02:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b04:	a3 97       	sbiw	r28, 0x23	; 35
    4b06:	62 96       	adiw	r28, 0x12	; 18
    4b08:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b0a:	62 97       	sbiw	r28, 0x12	; 18
    4b0c:	98 17       	cp	r25, r24
    4b0e:	18 f0       	brcs	.+6      	; 0x4b16 <CLCD_voidSendNumber+0x5e0>
    4b10:	a4 96       	adiw	r28, 0x24	; 36
    4b12:	1f ae       	std	Y+63, r1	; 0x3f
    4b14:	a4 97       	sbiw	r28, 0x24	; 36
    4b16:	a2 96       	adiw	r28, 0x22	; 34
    4b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b1a:	a2 97       	sbiw	r28, 0x22	; 34
    4b1c:	a4 96       	adiw	r28, 0x24	; 36
    4b1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b20:	a4 97       	sbiw	r28, 0x24	; 36
    4b22:	98 2b       	or	r25, r24
    4b24:	a2 96       	adiw	r28, 0x22	; 34
    4b26:	9f af       	std	Y+63, r25	; 0x3f
    4b28:	a2 97       	sbiw	r28, 0x22	; 34
    4b2a:	a3 96       	adiw	r28, 0x23	; 35
    4b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b2e:	a3 97       	sbiw	r28, 0x23	; 35
    4b30:	62 96       	adiw	r28, 0x12	; 18
    4b32:	9f af       	std	Y+63, r25	; 0x3f
    4b34:	62 97       	sbiw	r28, 0x12	; 18
    4b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b38:	9f 89       	ldd	r25, Y+23	; 0x17
    4b3a:	89 0f       	add	r24, r25
    4b3c:	63 96       	adiw	r28, 0x13	; 19
    4b3e:	8f af       	std	Y+63, r24	; 0x3f
    4b40:	63 97       	sbiw	r28, 0x13	; 19
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	a5 96       	adiw	r28, 0x25	; 37
    4b46:	8f af       	std	Y+63, r24	; 0x3f
    4b48:	a5 97       	sbiw	r28, 0x25	; 37
    4b4a:	63 96       	adiw	r28, 0x13	; 19
    4b4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b4e:	63 97       	sbiw	r28, 0x13	; 19
    4b50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b52:	98 17       	cp	r25, r24
    4b54:	18 f0       	brcs	.+6      	; 0x4b5c <CLCD_voidSendNumber+0x626>
    4b56:	a5 96       	adiw	r28, 0x25	; 37
    4b58:	1f ae       	std	Y+63, r1	; 0x3f
    4b5a:	a5 97       	sbiw	r28, 0x25	; 37
    4b5c:	a2 96       	adiw	r28, 0x22	; 34
    4b5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b60:	a2 97       	sbiw	r28, 0x22	; 34
    4b62:	63 96       	adiw	r28, 0x13	; 19
    4b64:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b66:	63 97       	sbiw	r28, 0x13	; 19
    4b68:	98 0f       	add	r25, r24
    4b6a:	a6 96       	adiw	r28, 0x26	; 38
    4b6c:	9f af       	std	Y+63, r25	; 0x3f
    4b6e:	a6 97       	sbiw	r28, 0x26	; 38
    4b70:	91 e0       	ldi	r25, 0x01	; 1
    4b72:	a7 96       	adiw	r28, 0x27	; 39
    4b74:	9f af       	std	Y+63, r25	; 0x3f
    4b76:	a7 97       	sbiw	r28, 0x27	; 39
    4b78:	a6 96       	adiw	r28, 0x26	; 38
    4b7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b7c:	a6 97       	sbiw	r28, 0x26	; 38
    4b7e:	63 96       	adiw	r28, 0x13	; 19
    4b80:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b82:	63 97       	sbiw	r28, 0x13	; 19
    4b84:	89 17       	cp	r24, r25
    4b86:	18 f0       	brcs	.+6      	; 0x4b8e <CLCD_voidSendNumber+0x658>
    4b88:	a7 96       	adiw	r28, 0x27	; 39
    4b8a:	1f ae       	std	Y+63, r1	; 0x3f
    4b8c:	a7 97       	sbiw	r28, 0x27	; 39
    4b8e:	a5 96       	adiw	r28, 0x25	; 37
    4b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b92:	a5 97       	sbiw	r28, 0x25	; 37
    4b94:	a7 96       	adiw	r28, 0x27	; 39
    4b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b98:	a7 97       	sbiw	r28, 0x27	; 39
    4b9a:	89 2b       	or	r24, r25
    4b9c:	a5 96       	adiw	r28, 0x25	; 37
    4b9e:	8f af       	std	Y+63, r24	; 0x3f
    4ba0:	a5 97       	sbiw	r28, 0x25	; 37
    4ba2:	a6 96       	adiw	r28, 0x26	; 38
    4ba4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ba6:	a6 97       	sbiw	r28, 0x26	; 38
    4ba8:	63 96       	adiw	r28, 0x13	; 19
    4baa:	8f af       	std	Y+63, r24	; 0x3f
    4bac:	63 97       	sbiw	r28, 0x13	; 19
    4bae:	98 a1       	ldd	r25, Y+32	; 0x20
    4bb0:	88 8d       	ldd	r24, Y+24	; 0x18
    4bb2:	98 0f       	add	r25, r24
    4bb4:	64 96       	adiw	r28, 0x14	; 20
    4bb6:	9f af       	std	Y+63, r25	; 0x3f
    4bb8:	64 97       	sbiw	r28, 0x14	; 20
    4bba:	a5 96       	adiw	r28, 0x25	; 37
    4bbc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bbe:	a5 97       	sbiw	r28, 0x25	; 37
    4bc0:	64 96       	adiw	r28, 0x14	; 20
    4bc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bc4:	64 97       	sbiw	r28, 0x14	; 20
    4bc6:	89 0f       	add	r24, r25
    4bc8:	64 96       	adiw	r28, 0x14	; 20
    4bca:	8f af       	std	Y+63, r24	; 0x3f
    4bcc:	64 97       	sbiw	r28, 0x14	; 20
    4bce:	2d 96       	adiw	r28, 0x0d	; 13
    4bd0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bd2:	2d 97       	sbiw	r28, 0x0d	; 13
    4bd4:	89 83       	std	Y+1, r24	; 0x01
    4bd6:	2e 96       	adiw	r28, 0x0e	; 14
    4bd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bda:	2e 97       	sbiw	r28, 0x0e	; 14
    4bdc:	9a 83       	std	Y+2, r25	; 0x02
    4bde:	2f 96       	adiw	r28, 0x0f	; 15
    4be0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4be2:	2f 97       	sbiw	r28, 0x0f	; 15
    4be4:	8b 83       	std	Y+3, r24	; 0x03
    4be6:	60 96       	adiw	r28, 0x10	; 16
    4be8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bea:	60 97       	sbiw	r28, 0x10	; 16
    4bec:	9c 83       	std	Y+4, r25	; 0x04
    4bee:	61 96       	adiw	r28, 0x11	; 17
    4bf0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bf2:	61 97       	sbiw	r28, 0x11	; 17
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
    4bf6:	62 96       	adiw	r28, 0x12	; 18
    4bf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bfa:	62 97       	sbiw	r28, 0x12	; 18
    4bfc:	9e 83       	std	Y+6, r25	; 0x06
    4bfe:	63 96       	adiw	r28, 0x13	; 19
    4c00:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c02:	63 97       	sbiw	r28, 0x13	; 19
    4c04:	8f 83       	std	Y+7, r24	; 0x07
    4c06:	64 96       	adiw	r28, 0x14	; 20
    4c08:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c0a:	64 97       	sbiw	r28, 0x14	; 20
    4c0c:	98 87       	std	Y+8, r25	; 0x08
			Copy_u64ptrNumber /= 10 ;
    4c0e:	a9 84       	ldd	r10, Y+9	; 0x09
    4c10:	ba 84       	ldd	r11, Y+10	; 0x0a
    4c12:	cb 84       	ldd	r12, Y+11	; 0x0b
    4c14:	dc 84       	ldd	r13, Y+12	; 0x0c
    4c16:	ed 84       	ldd	r14, Y+13	; 0x0d
    4c18:	fe 84       	ldd	r15, Y+14	; 0x0e
    4c1a:	0f 85       	ldd	r16, Y+15	; 0x0f
    4c1c:	18 89       	ldd	r17, Y+16	; 0x10
    4c1e:	2a 2d       	mov	r18, r10
    4c20:	3b 2d       	mov	r19, r11
    4c22:	4c 2d       	mov	r20, r12
    4c24:	5d 2d       	mov	r21, r13
    4c26:	6e 2d       	mov	r22, r14
    4c28:	7f 2d       	mov	r23, r15
    4c2a:	80 2f       	mov	r24, r16
    4c2c:	91 2f       	mov	r25, r17
    4c2e:	0f 2e       	mov	r0, r31
    4c30:	fa e0       	ldi	r31, 0x0A	; 10
    4c32:	af 2e       	mov	r10, r31
    4c34:	f0 2d       	mov	r31, r0
    4c36:	bb 24       	eor	r11, r11
    4c38:	cc 24       	eor	r12, r12
    4c3a:	dd 24       	eor	r13, r13
    4c3c:	ee 24       	eor	r14, r14
    4c3e:	ff 24       	eor	r15, r15
    4c40:	00 e0       	ldi	r16, 0x00	; 0
    4c42:	10 e0       	ldi	r17, 0x00	; 0
    4c44:	0e 94 9c 01 	call	0x338	; 0x338 <__udivdi3>
    4c48:	a2 2e       	mov	r10, r18
    4c4a:	b3 2e       	mov	r11, r19
    4c4c:	c4 2e       	mov	r12, r20
    4c4e:	d5 2e       	mov	r13, r21
    4c50:	e6 2e       	mov	r14, r22
    4c52:	f7 2e       	mov	r15, r23
    4c54:	08 2f       	mov	r16, r24
    4c56:	19 2f       	mov	r17, r25
    4c58:	a9 86       	std	Y+9, r10	; 0x09
    4c5a:	ba 86       	std	Y+10, r11	; 0x0a
    4c5c:	cb 86       	std	Y+11, r12	; 0x0b
    4c5e:	dc 86       	std	Y+12, r13	; 0x0c
    4c60:	ed 86       	std	Y+13, r14	; 0x0d
    4c62:	fe 86       	std	Y+14, r15	; 0x0e
    4c64:	0f 87       	std	Y+15, r16	; 0x0f
    4c66:	18 8b       	std	Y+16, r17	; 0x10
}
void CLCD_voidSendNumber  ( u64 Copy_u64ptrNumber ){
	u64 Loc_u64Reversed = 1 ;
	if(Copy_u64ptrNumber == 0 ) {CLCD_voidSendString('0');}
	else{
		while( Copy_u64ptrNumber != 0){
    4c68:	89 85       	ldd	r24, Y+9	; 0x09
    4c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6c:	89 2b       	or	r24, r25
    4c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c70:	89 2b       	or	r24, r25
    4c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c74:	89 2b       	or	r24, r25
    4c76:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c78:	89 2b       	or	r24, r25
    4c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c7c:	89 2b       	or	r24, r25
    4c7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c80:	89 2b       	or	r24, r25
    4c82:	98 89       	ldd	r25, Y+16	; 0x10
    4c84:	89 2b       	or	r24, r25
    4c86:	88 23       	and	r24, r24
    4c88:	09 f0       	breq	.+2      	; 0x4c8c <CLCD_voidSendNumber+0x756>
    4c8a:	90 cc       	rjmp	.-1760   	; 0x45ac <CLCD_voidSendNumber+0x76>
    4c8c:	5e c0       	rjmp	.+188    	; 0x4d4a <CLCD_voidSendNumber+0x814>
			Loc_u64Reversed = (Loc_u64Reversed * 10 ) + (Copy_u64ptrNumber % 10);
			Copy_u64ptrNumber /= 10 ;
		}
		while( Loc_u64Reversed != 1){
			CLCD_voidSendData((Loc_u64Reversed % 10) + 48);
    4c8e:	a9 80       	ldd	r10, Y+1	; 0x01
    4c90:	ba 80       	ldd	r11, Y+2	; 0x02
    4c92:	cb 80       	ldd	r12, Y+3	; 0x03
    4c94:	dc 80       	ldd	r13, Y+4	; 0x04
    4c96:	ed 80       	ldd	r14, Y+5	; 0x05
    4c98:	fe 80       	ldd	r15, Y+6	; 0x06
    4c9a:	0f 81       	ldd	r16, Y+7	; 0x07
    4c9c:	18 85       	ldd	r17, Y+8	; 0x08
    4c9e:	2a 2d       	mov	r18, r10
    4ca0:	3b 2d       	mov	r19, r11
    4ca2:	4c 2d       	mov	r20, r12
    4ca4:	5d 2d       	mov	r21, r13
    4ca6:	6e 2d       	mov	r22, r14
    4ca8:	7f 2d       	mov	r23, r15
    4caa:	80 2f       	mov	r24, r16
    4cac:	91 2f       	mov	r25, r17
    4cae:	0f 2e       	mov	r0, r31
    4cb0:	fa e0       	ldi	r31, 0x0A	; 10
    4cb2:	af 2e       	mov	r10, r31
    4cb4:	f0 2d       	mov	r31, r0
    4cb6:	bb 24       	eor	r11, r11
    4cb8:	cc 24       	eor	r12, r12
    4cba:	dd 24       	eor	r13, r13
    4cbc:	ee 24       	eor	r14, r14
    4cbe:	ff 24       	eor	r15, r15
    4cc0:	00 e0       	ldi	r16, 0x00	; 0
    4cc2:	10 e0       	ldi	r17, 0x00	; 0
    4cc4:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    4cc8:	a2 2e       	mov	r10, r18
    4cca:	b3 2e       	mov	r11, r19
    4ccc:	c4 2e       	mov	r12, r20
    4cce:	d5 2e       	mov	r13, r21
    4cd0:	e6 2e       	mov	r14, r22
    4cd2:	f7 2e       	mov	r15, r23
    4cd4:	08 2f       	mov	r16, r24
    4cd6:	19 2f       	mov	r17, r25
    4cd8:	2a 2d       	mov	r18, r10
    4cda:	3b 2d       	mov	r19, r11
    4cdc:	4c 2d       	mov	r20, r12
    4cde:	5d 2d       	mov	r21, r13
    4ce0:	6e 2d       	mov	r22, r14
    4ce2:	7f 2d       	mov	r23, r15
    4ce4:	80 2f       	mov	r24, r16
    4ce6:	91 2f       	mov	r25, r17
    4ce8:	82 2f       	mov	r24, r18
    4cea:	80 5d       	subi	r24, 0xD0	; 208
    4cec:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
			Loc_u64Reversed /= 10;
    4cf0:	a9 80       	ldd	r10, Y+1	; 0x01
    4cf2:	ba 80       	ldd	r11, Y+2	; 0x02
    4cf4:	cb 80       	ldd	r12, Y+3	; 0x03
    4cf6:	dc 80       	ldd	r13, Y+4	; 0x04
    4cf8:	ed 80       	ldd	r14, Y+5	; 0x05
    4cfa:	fe 80       	ldd	r15, Y+6	; 0x06
    4cfc:	0f 81       	ldd	r16, Y+7	; 0x07
    4cfe:	18 85       	ldd	r17, Y+8	; 0x08
    4d00:	2a 2d       	mov	r18, r10
    4d02:	3b 2d       	mov	r19, r11
    4d04:	4c 2d       	mov	r20, r12
    4d06:	5d 2d       	mov	r21, r13
    4d08:	6e 2d       	mov	r22, r14
    4d0a:	7f 2d       	mov	r23, r15
    4d0c:	80 2f       	mov	r24, r16
    4d0e:	91 2f       	mov	r25, r17
    4d10:	0f 2e       	mov	r0, r31
    4d12:	fa e0       	ldi	r31, 0x0A	; 10
    4d14:	af 2e       	mov	r10, r31
    4d16:	f0 2d       	mov	r31, r0
    4d18:	bb 24       	eor	r11, r11
    4d1a:	cc 24       	eor	r12, r12
    4d1c:	dd 24       	eor	r13, r13
    4d1e:	ee 24       	eor	r14, r14
    4d20:	ff 24       	eor	r15, r15
    4d22:	00 e0       	ldi	r16, 0x00	; 0
    4d24:	10 e0       	ldi	r17, 0x00	; 0
    4d26:	0e 94 9c 01 	call	0x338	; 0x338 <__udivdi3>
    4d2a:	a2 2e       	mov	r10, r18
    4d2c:	b3 2e       	mov	r11, r19
    4d2e:	c4 2e       	mov	r12, r20
    4d30:	d5 2e       	mov	r13, r21
    4d32:	e6 2e       	mov	r14, r22
    4d34:	f7 2e       	mov	r15, r23
    4d36:	08 2f       	mov	r16, r24
    4d38:	19 2f       	mov	r17, r25
    4d3a:	a9 82       	std	Y+1, r10	; 0x01
    4d3c:	ba 82       	std	Y+2, r11	; 0x02
    4d3e:	cb 82       	std	Y+3, r12	; 0x03
    4d40:	dc 82       	std	Y+4, r13	; 0x04
    4d42:	ed 82       	std	Y+5, r14	; 0x05
    4d44:	fe 82       	std	Y+6, r15	; 0x06
    4d46:	0f 83       	std	Y+7, r16	; 0x07
    4d48:	18 87       	std	Y+8, r17	; 0x08
	else{
		while( Copy_u64ptrNumber != 0){
			Loc_u64Reversed = (Loc_u64Reversed * 10 ) + (Copy_u64ptrNumber % 10);
			Copy_u64ptrNumber /= 10 ;
		}
		while( Loc_u64Reversed != 1){
    4d4a:	89 81       	ldd	r24, Y+1	; 0x01
    4d4c:	81 30       	cpi	r24, 0x01	; 1
    4d4e:	09 f0       	breq	.+2      	; 0x4d52 <CLCD_voidSendNumber+0x81c>
    4d50:	9e cf       	rjmp	.-196    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d52:	8a 81       	ldd	r24, Y+2	; 0x02
    4d54:	88 23       	and	r24, r24
    4d56:	09 f0       	breq	.+2      	; 0x4d5a <CLCD_voidSendNumber+0x824>
    4d58:	9a cf       	rjmp	.-204    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5c:	88 23       	and	r24, r24
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <CLCD_voidSendNumber+0x82c>
    4d60:	96 cf       	rjmp	.-212    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d62:	8c 81       	ldd	r24, Y+4	; 0x04
    4d64:	88 23       	and	r24, r24
    4d66:	09 f0       	breq	.+2      	; 0x4d6a <CLCD_voidSendNumber+0x834>
    4d68:	92 cf       	rjmp	.-220    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6c:	88 23       	and	r24, r24
    4d6e:	09 f0       	breq	.+2      	; 0x4d72 <CLCD_voidSendNumber+0x83c>
    4d70:	8e cf       	rjmp	.-228    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d72:	8e 81       	ldd	r24, Y+6	; 0x06
    4d74:	88 23       	and	r24, r24
    4d76:	09 f0       	breq	.+2      	; 0x4d7a <CLCD_voidSendNumber+0x844>
    4d78:	8a cf       	rjmp	.-236    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d7c:	88 23       	and	r24, r24
    4d7e:	09 f0       	breq	.+2      	; 0x4d82 <CLCD_voidSendNumber+0x84c>
    4d80:	86 cf       	rjmp	.-244    	; 0x4c8e <CLCD_voidSendNumber+0x758>
    4d82:	88 85       	ldd	r24, Y+8	; 0x08
    4d84:	88 23       	and	r24, r24
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <CLCD_voidSendNumber+0x854>
    4d88:	82 cf       	rjmp	.-252    	; 0x4c8e <CLCD_voidSendNumber+0x758>
			CLCD_voidSendData((Loc_u64Reversed % 10) + 48);
			Loc_u64Reversed /= 10;
		}}
}
    4d8a:	ca 59       	subi	r28, 0x9A	; 154
    4d8c:	df 4f       	sbci	r29, 0xFF	; 255
    4d8e:	0f b6       	in	r0, 0x3f	; 63
    4d90:	f8 94       	cli
    4d92:	de bf       	out	0x3e, r29	; 62
    4d94:	0f be       	out	0x3f, r0	; 63
    4d96:	cd bf       	out	0x3d, r28	; 61
    4d98:	cf 91       	pop	r28
    4d9a:	df 91       	pop	r29
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	ff 90       	pop	r15
    4da2:	ef 90       	pop	r14
    4da4:	df 90       	pop	r13
    4da6:	cf 90       	pop	r12
    4da8:	bf 90       	pop	r11
    4daa:	af 90       	pop	r10
    4dac:	08 95       	ret

00004dae <CLCD_voidSendPostion>:
void CLCD_voidSendPostion  ( u8  Copy_u8RowNumber ,u8  Copy_u8ColumnNumber){
    4dae:	df 93       	push	r29
    4db0:	cf 93       	push	r28
    4db2:	00 d0       	rcall	.+0      	; 0x4db4 <CLCD_voidSendPostion+0x6>
    4db4:	cd b7       	in	r28, 0x3d	; 61
    4db6:	de b7       	in	r29, 0x3e	; 62
    4db8:	89 83       	std	Y+1, r24	; 0x01
    4dba:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8RowNumber == CLCD_ROW_1){
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	81 30       	cpi	r24, 0x01	; 1
    4dc0:	29 f4       	brne	.+10     	; 0x4dcc <CLCD_voidSendPostion+0x1e>
		CLCD_voidSendCommend(0x80 + ( Copy_u8ColumnNumber - 1));
    4dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc4:	81 58       	subi	r24, 0x81	; 129
    4dc6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
    4dca:	07 c0       	rjmp	.+14     	; 0x4dda <CLCD_voidSendPostion+0x2c>
	}
	else if ( Copy_u8RowNumber == CLCD_ROW_2){
    4dcc:	89 81       	ldd	r24, Y+1	; 0x01
    4dce:	82 30       	cpi	r24, 0x02	; 2
    4dd0:	21 f4       	brne	.+8      	; 0x4dda <CLCD_voidSendPostion+0x2c>
		CLCD_voidSendCommend(0x80 + 64 +( Copy_u8ColumnNumber - 1));
    4dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd4:	81 54       	subi	r24, 0x41	; 65
    4dd6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
	}
}
    4dda:	0f 90       	pop	r0
    4ddc:	0f 90       	pop	r0
    4dde:	cf 91       	pop	r28
    4de0:	df 91       	pop	r29
    4de2:	08 95       	ret

00004de4 <CLCD_voidSendExtraChar>:
//  0x11,
//  0x0A,
//  0x04
//};

void CLCD_voidSendExtraChar  ( u8  Copy_u8RowNumber ,u8  Copy_u8ColumnNumber){
    4de4:	df 93       	push	r29
    4de6:	cf 93       	push	r28
    4de8:	00 d0       	rcall	.+0      	; 0x4dea <CLCD_voidSendExtraChar+0x6>
    4dea:	0f 92       	push	r0
    4dec:	cd b7       	in	r28, 0x3d	; 61
    4dee:	de b7       	in	r29, 0x3e	; 62
    4df0:	8a 83       	std	Y+2, r24	; 0x02
    4df2:	6b 83       	std	Y+3, r22	; 0x03

// go to CGRam
CLCD_voidSendCommend(0b01000000);
    4df4:	80 e4       	ldi	r24, 0x40	; 64
    4df6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
//draw Char
for(u8 i = 0 ; i < 8 ; i ++){
    4dfa:	19 82       	std	Y+1, r1	; 0x01
    4dfc:	06 c0       	rjmp	.+12     	; 0x4e0a <CLCD_voidSendExtraChar+0x26>
	CLCD_voidSendData(i);
    4dfe:	89 81       	ldd	r24, Y+1	; 0x01
    4e00:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
void CLCD_voidSendExtraChar  ( u8  Copy_u8RowNumber ,u8  Copy_u8ColumnNumber){

// go to CGRam
CLCD_voidSendCommend(0b01000000);
//draw Char
for(u8 i = 0 ; i < 8 ; i ++){
    4e04:	89 81       	ldd	r24, Y+1	; 0x01
    4e06:	8f 5f       	subi	r24, 0xFF	; 255
    4e08:	89 83       	std	Y+1, r24	; 0x01
    4e0a:	89 81       	ldd	r24, Y+1	; 0x01
    4e0c:	88 30       	cpi	r24, 0x08	; 8
    4e0e:	b8 f3       	brcs	.-18     	; 0x4dfe <CLCD_voidSendExtraChar+0x1a>
	CLCD_voidSendData(i);
}
//back toDDram
CLCD_voidSendPostion(Copy_u8RowNumber,Copy_u8ColumnNumber);
    4e10:	8a 81       	ldd	r24, Y+2	; 0x02
    4e12:	6b 81       	ldd	r22, Y+3	; 0x03
    4e14:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
// send Char
CLCD_voidSendData(0);
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
}
    4e1e:	0f 90       	pop	r0
    4e20:	0f 90       	pop	r0
    4e22:	0f 90       	pop	r0
    4e24:	cf 91       	pop	r28
    4e26:	df 91       	pop	r29
    4e28:	08 95       	ret

00004e2a <CLCD_voidDrawExtraChar>:
void CLCD_voidDrawExtraChar  ( u8  Copy_u8RowNumber ,u8  Copy_u8ColumnNumber , u8 Copy_u8Postion){
    4e2a:	df 93       	push	r29
    4e2c:	cf 93       	push	r28
    4e2e:	00 d0       	rcall	.+0      	; 0x4e30 <CLCD_voidDrawExtraChar+0x6>
    4e30:	0f 92       	push	r0
    4e32:	cd b7       	in	r28, 0x3d	; 61
    4e34:	de b7       	in	r29, 0x3e	; 62
    4e36:	89 83       	std	Y+1, r24	; 0x01
    4e38:	6a 83       	std	Y+2, r22	; 0x02
    4e3a:	4b 83       	std	Y+3, r20	; 0x03
//back toDDram
CLCD_voidSendPostion(Copy_u8RowNumber,Copy_u8ColumnNumber);
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	6a 81       	ldd	r22, Y+2	; 0x02
    4e40:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
// send Char
CLCD_voidSendData(Copy_u8Postion);
    4e44:	8b 81       	ldd	r24, Y+3	; 0x03
    4e46:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
}
    4e4a:	0f 90       	pop	r0
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
    4e50:	cf 91       	pop	r28
    4e52:	df 91       	pop	r29
    4e54:	08 95       	ret

00004e56 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void) {
    4e56:	df 93       	push	r29
    4e58:	cf 93       	push	r28
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
    4e5e:	2e 97       	sbiw	r28, 0x0e	; 14
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	f8 94       	cli
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommend(0b00000001);
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <CLCD_voidSendCommend>
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	a0 e0       	ldi	r26, 0x00	; 0
    4e76:	b0 e4       	ldi	r27, 0x40	; 64
    4e78:	8b 87       	std	Y+11, r24	; 0x0b
    4e7a:	9c 87       	std	Y+12, r25	; 0x0c
    4e7c:	ad 87       	std	Y+13, r26	; 0x0d
    4e7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e88:	20 e0       	ldi	r18, 0x00	; 0
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	4a ef       	ldi	r20, 0xFA	; 250
    4e8e:	54 e4       	ldi	r21, 0x44	; 68
    4e90:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4e94:	dc 01       	movw	r26, r24
    4e96:	cb 01       	movw	r24, r22
    4e98:	8f 83       	std	Y+7, r24	; 0x07
    4e9a:	98 87       	std	Y+8, r25	; 0x08
    4e9c:	a9 87       	std	Y+9, r26	; 0x09
    4e9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ea2:	78 85       	ldd	r23, Y+8	; 0x08
    4ea4:	89 85       	ldd	r24, Y+9	; 0x09
    4ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	40 e8       	ldi	r20, 0x80	; 128
    4eae:	5f e3       	ldi	r21, 0x3F	; 63
    4eb0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    4eb4:	88 23       	and	r24, r24
    4eb6:	2c f4       	brge	.+10     	; 0x4ec2 <CLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	9e 83       	std	Y+6, r25	; 0x06
    4ebe:	8d 83       	std	Y+5, r24	; 0x05
    4ec0:	3f c0       	rjmp	.+126    	; 0x4f40 <CLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    4ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec4:	78 85       	ldd	r23, Y+8	; 0x08
    4ec6:	89 85       	ldd	r24, Y+9	; 0x09
    4ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eca:	20 e0       	ldi	r18, 0x00	; 0
    4ecc:	3f ef       	ldi	r19, 0xFF	; 255
    4ece:	4f e7       	ldi	r20, 0x7F	; 127
    4ed0:	57 e4       	ldi	r21, 0x47	; 71
    4ed2:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    4ed6:	18 16       	cp	r1, r24
    4ed8:	4c f5       	brge	.+82     	; 0x4f2c <CLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    4edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	40 e2       	ldi	r20, 0x20	; 32
    4ee8:	51 e4       	ldi	r21, 0x41	; 65
    4eea:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	bc 01       	movw	r22, r24
    4ef4:	cd 01       	movw	r24, r26
    4ef6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4efa:	dc 01       	movw	r26, r24
    4efc:	cb 01       	movw	r24, r22
    4efe:	9e 83       	std	Y+6, r25	; 0x06
    4f00:	8d 83       	std	Y+5, r24	; 0x05
    4f02:	0f c0       	rjmp	.+30     	; 0x4f22 <CLCD_voidClearDisplay+0xcc>
    4f04:	88 ec       	ldi	r24, 0xC8	; 200
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	9c 83       	std	Y+4, r25	; 0x04
    4f0a:	8b 83       	std	Y+3, r24	; 0x03
    4f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f10:	01 97       	sbiw	r24, 0x01	; 1
    4f12:	f1 f7       	brne	.-4      	; 0x4f10 <CLCD_voidClearDisplay+0xba>
    4f14:	9c 83       	std	Y+4, r25	; 0x04
    4f16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f18:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1c:	01 97       	sbiw	r24, 0x01	; 1
    4f1e:	9e 83       	std	Y+6, r25	; 0x06
    4f20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f22:	8d 81       	ldd	r24, Y+5	; 0x05
    4f24:	9e 81       	ldd	r25, Y+6	; 0x06
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	69 f7       	brne	.-38     	; 0x4f04 <CLCD_voidClearDisplay+0xae>
    4f2a:	14 c0       	rjmp	.+40     	; 0x4f54 <CLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f2e:	78 85       	ldd	r23, Y+8	; 0x08
    4f30:	89 85       	ldd	r24, Y+9	; 0x09
    4f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f34:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	9e 83       	std	Y+6, r25	; 0x06
    4f3e:	8d 83       	std	Y+5, r24	; 0x05
    4f40:	8d 81       	ldd	r24, Y+5	; 0x05
    4f42:	9e 81       	ldd	r25, Y+6	; 0x06
    4f44:	9a 83       	std	Y+2, r25	; 0x02
    4f46:	89 83       	std	Y+1, r24	; 0x01
    4f48:	89 81       	ldd	r24, Y+1	; 0x01
    4f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4c:	01 97       	sbiw	r24, 0x01	; 1
    4f4e:	f1 f7       	brne	.-4      	; 0x4f4c <CLCD_voidClearDisplay+0xf6>
    4f50:	9a 83       	std	Y+2, r25	; 0x02
    4f52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4f54:	2e 96       	adiw	r28, 0x0e	; 14
    4f56:	0f b6       	in	r0, 0x3f	; 63
    4f58:	f8 94       	cli
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	cd bf       	out	0x3d, r28	; 61
    4f60:	cf 91       	pop	r28
    4f62:	df 91       	pop	r29
    4f64:	08 95       	ret

00004f66 <main>:
f32 calcADDandSUB(f32 *Copy_u8ArrOperend, u8 *Copy_u8ArrOprations, u8 *Copy_u8ArrOprationsIndex);

f32 toInt(u8 Copy_u8Ch);
void clearArray(u8 *Copy_ptrArray);

int main(void) {
    4f66:	af 92       	push	r10
    4f68:	bf 92       	push	r11
    4f6a:	cf 92       	push	r12
    4f6c:	df 92       	push	r13
    4f6e:	ef 92       	push	r14
    4f70:	ff 92       	push	r15
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	df 93       	push	r29
    4f78:	cf 93       	push	r28
    4f7a:	cd b7       	in	r28, 0x3d	; 61
    4f7c:	de b7       	in	r29, 0x3e	; 62
    4f7e:	c3 58       	subi	r28, 0x83	; 131
    4f80:	d0 40       	sbci	r29, 0x00	; 0
    4f82:	0f b6       	in	r0, 0x3f	; 63
    4f84:	f8 94       	cli
    4f86:	de bf       	out	0x3e, r29	; 62
    4f88:	0f be       	out	0x3f, r0	; 63
    4f8a:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidInit();
    4f8c:	0e 94 b1 1c 	call	0x3962	; 0x3962 <CLCD_voidInit>
	KPD_voidInit();
    4f90:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <KPD_voidInit>
	u8 LOC_u8Iterator = 0;
    4f94:	1b ae       	std	Y+59, r1	; 0x3b
	u8 LOC_u8Counter = 0;
    4f96:	1a ae       	std	Y+58, r1	; 0x3a
	u8 LOC_u8ComeData = 0;
    4f98:	19 ae       	std	Y+57, r1	; 0x39
	f32 LOC_u8ArrOperands[10] 	   		   = { 0 };
    4f9a:	88 e2       	ldi	r24, 0x28	; 40
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	fc 96       	adiw	r30, 0x3c	; 60
    4fa0:	df 01       	movw	r26, r30
    4fa2:	28 2f       	mov	r18, r24
    4fa4:	1d 92       	st	X+, r1
    4fa6:	2a 95       	dec	r18
    4fa8:	e9 f7       	brne	.-6      	; 0x4fa4 <main+0x3e>
	u8 LOC_u8ArrOperandsLength[10] 		   = { 0 };
    4faa:	ce 01       	movw	r24, r28
    4fac:	8c 59       	subi	r24, 0x9C	; 156
    4fae:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb0:	2a e0       	ldi	r18, 0x0A	; 10
    4fb2:	fc 01       	movw	r30, r24
    4fb4:	df 01       	movw	r26, r30
    4fb6:	32 2f       	mov	r19, r18
    4fb8:	1d 92       	st	X+, r1
    4fba:	3a 95       	dec	r19
    4fbc:	e9 f7       	brne	.-6      	; 0x4fb8 <main+0x52>
	u8 LOC_u8ArrOperations[10] 	  		   = { 0 };
    4fbe:	ce 01       	movw	r24, r28
    4fc0:	82 59       	subi	r24, 0x92	; 146
    4fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc4:	2a e0       	ldi	r18, 0x0A	; 10
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	df 01       	movw	r26, r30
    4fca:	32 2f       	mov	r19, r18
    4fcc:	1d 92       	st	X+, r1
    4fce:	3a 95       	dec	r19
    4fd0:	e9 f7       	brne	.-6      	; 0x4fcc <main+0x66>
	u8 LOC_u8ArrOprationsIndex[10]		   = { 0 };
    4fd2:	ce 01       	movw	r24, r28
    4fd4:	88 58       	subi	r24, 0x88	; 136
    4fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd8:	2a e0       	ldi	r18, 0x0A	; 10
    4fda:	fc 01       	movw	r30, r24
    4fdc:	df 01       	movw	r26, r30
    4fde:	32 2f       	mov	r19, r18
    4fe0:	1d 92       	st	X+, r1
    4fe2:	3a 95       	dec	r19
    4fe4:	e9 f7       	brne	.-6      	; 0x4fe0 <main+0x7a>
	u8 LOC_u8ArrOprationsIndexCounter=0;
    4fe6:	18 ae       	std	Y+56, r1	; 0x38
	u8 LOC_u8OperationCounter = 0;
    4fe8:	1f aa       	std	Y+55, r1	; 0x37
	u8 LOC_u8OperandCounter = 0;
    4fea:	1e aa       	std	Y+54, r1	; 0x36
	u8 LOC_u8OperationFlag	=	0;
    4fec:	1d aa       	std	Y+53, r1	; 0x35
	u8 LOC_u8ResFlag	=	0;
    4fee:	1c aa       	std	Y+52, r1	; 0x34
	f32 LOC_f32Result 		=	0;
    4ff0:	80 e0       	ldi	r24, 0x00	; 0
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	a0 e0       	ldi	r26, 0x00	; 0
    4ff6:	b0 e0       	ldi	r27, 0x00	; 0
    4ff8:	88 ab       	std	Y+48, r24	; 0x30
    4ffa:	99 ab       	std	Y+49, r25	; 0x31
    4ffc:	aa ab       	std	Y+50, r26	; 0x32
    4ffe:	bb ab       	std	Y+51, r27	; 0x33
	u32 LOC_f32ResultFraction = 0;
    5000:	1c a6       	std	Y+44, r1	; 0x2c
    5002:	1d a6       	std	Y+45, r1	; 0x2d
    5004:	1e a6       	std	Y+46, r1	; 0x2e
    5006:	1f a6       	std	Y+47, r1	; 0x2f
	DivideByZero DivideByZeroFlag = Status_Ok;
    5008:	1b a6       	std	Y+43, r1	; 0x2b
	CLCD_voidSendPostion(CLCD_ROW_1,CLCD_Column_1);
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	61 e0       	ldi	r22, 0x01	; 1
    500e:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
	CLCD_voidSendString((u8 *) "Calculator V0.0!");
    5012:	80 e6       	ldi	r24, 0x60	; 96
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	aa ef       	ldi	r26, 0xFA	; 250
    5020:	b4 e4       	ldi	r27, 0x44	; 68
    5022:	8f a3       	std	Y+39, r24	; 0x27
    5024:	98 a7       	std	Y+40, r25	; 0x28
    5026:	a9 a7       	std	Y+41, r26	; 0x29
    5028:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    502a:	6f a1       	ldd	r22, Y+39	; 0x27
    502c:	78 a5       	ldd	r23, Y+40	; 0x28
    502e:	89 a5       	ldd	r24, Y+41	; 0x29
    5030:	9a a5       	ldd	r25, Y+42	; 0x2a
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	4a ef       	ldi	r20, 0xFA	; 250
    5038:	54 e4       	ldi	r21, 0x44	; 68
    503a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    503e:	dc 01       	movw	r26, r24
    5040:	cb 01       	movw	r24, r22
    5042:	8b a3       	std	Y+35, r24	; 0x23
    5044:	9c a3       	std	Y+36, r25	; 0x24
    5046:	ad a3       	std	Y+37, r26	; 0x25
    5048:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    504a:	6b a1       	ldd	r22, Y+35	; 0x23
    504c:	7c a1       	ldd	r23, Y+36	; 0x24
    504e:	8d a1       	ldd	r24, Y+37	; 0x25
    5050:	9e a1       	ldd	r25, Y+38	; 0x26
    5052:	20 e0       	ldi	r18, 0x00	; 0
    5054:	30 e0       	ldi	r19, 0x00	; 0
    5056:	40 e8       	ldi	r20, 0x80	; 128
    5058:	5f e3       	ldi	r21, 0x3F	; 63
    505a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    505e:	88 23       	and	r24, r24
    5060:	2c f4       	brge	.+10     	; 0x506c <main+0x106>
		__ticks = 1;
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	9a a3       	std	Y+34, r25	; 0x22
    5068:	89 a3       	std	Y+33, r24	; 0x21
    506a:	3f c0       	rjmp	.+126    	; 0x50ea <main+0x184>
	else if (__tmp > 65535)
    506c:	6b a1       	ldd	r22, Y+35	; 0x23
    506e:	7c a1       	ldd	r23, Y+36	; 0x24
    5070:	8d a1       	ldd	r24, Y+37	; 0x25
    5072:	9e a1       	ldd	r25, Y+38	; 0x26
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	3f ef       	ldi	r19, 0xFF	; 255
    5078:	4f e7       	ldi	r20, 0x7F	; 127
    507a:	57 e4       	ldi	r21, 0x47	; 71
    507c:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    5080:	18 16       	cp	r1, r24
    5082:	4c f5       	brge	.+82     	; 0x50d6 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5084:	6f a1       	ldd	r22, Y+39	; 0x27
    5086:	78 a5       	ldd	r23, Y+40	; 0x28
    5088:	89 a5       	ldd	r24, Y+41	; 0x29
    508a:	9a a5       	ldd	r25, Y+42	; 0x2a
    508c:	20 e0       	ldi	r18, 0x00	; 0
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	40 e2       	ldi	r20, 0x20	; 32
    5092:	51 e4       	ldi	r21, 0x41	; 65
    5094:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5098:	dc 01       	movw	r26, r24
    509a:	cb 01       	movw	r24, r22
    509c:	bc 01       	movw	r22, r24
    509e:	cd 01       	movw	r24, r26
    50a0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	9a a3       	std	Y+34, r25	; 0x22
    50aa:	89 a3       	std	Y+33, r24	; 0x21
    50ac:	0f c0       	rjmp	.+30     	; 0x50cc <main+0x166>
    50ae:	88 ec       	ldi	r24, 0xC8	; 200
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	98 a3       	std	Y+32, r25	; 0x20
    50b4:	8f 8f       	std	Y+31, r24	; 0x1f
    50b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50b8:	98 a1       	ldd	r25, Y+32	; 0x20
    50ba:	01 97       	sbiw	r24, 0x01	; 1
    50bc:	f1 f7       	brne	.-4      	; 0x50ba <main+0x154>
    50be:	98 a3       	std	Y+32, r25	; 0x20
    50c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c2:	89 a1       	ldd	r24, Y+33	; 0x21
    50c4:	9a a1       	ldd	r25, Y+34	; 0x22
    50c6:	01 97       	sbiw	r24, 0x01	; 1
    50c8:	9a a3       	std	Y+34, r25	; 0x22
    50ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50cc:	89 a1       	ldd	r24, Y+33	; 0x21
    50ce:	9a a1       	ldd	r25, Y+34	; 0x22
    50d0:	00 97       	sbiw	r24, 0x00	; 0
    50d2:	69 f7       	brne	.-38     	; 0x50ae <main+0x148>
    50d4:	14 c0       	rjmp	.+40     	; 0x50fe <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50d6:	6b a1       	ldd	r22, Y+35	; 0x23
    50d8:	7c a1       	ldd	r23, Y+36	; 0x24
    50da:	8d a1       	ldd	r24, Y+37	; 0x25
    50dc:	9e a1       	ldd	r25, Y+38	; 0x26
    50de:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	9a a3       	std	Y+34, r25	; 0x22
    50e8:	89 a3       	std	Y+33, r24	; 0x21
    50ea:	89 a1       	ldd	r24, Y+33	; 0x21
    50ec:	9a a1       	ldd	r25, Y+34	; 0x22
    50ee:	9e 8f       	std	Y+30, r25	; 0x1e
    50f0:	8d 8f       	std	Y+29, r24	; 0x1d
    50f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50f6:	01 97       	sbiw	r24, 0x01	; 1
    50f8:	f1 f7       	brne	.-4      	; 0x50f6 <main+0x190>
    50fa:	9e 8f       	std	Y+30, r25	; 0x1e
    50fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	CLCD_voidClearDisplay();
    50fe:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <CLCD_voidClearDisplay>
	while (1) {
		LOC_u8ComeData = KPD_u8GetPressed();
    5102:	0e 94 c2 1b 	call	0x3784	; 0x3784 <KPD_u8GetPressed>
    5106:	89 af       	std	Y+57, r24	; 0x39
		if (LOC_u8ComeData != 0) {
    5108:	89 ad       	ldd	r24, Y+57	; 0x39
    510a:	88 23       	and	r24, r24
    510c:	d1 f3       	breq	.-12     	; 0x5102 <main+0x19c>
			if(LOC_u8ResFlag == 1 ){
    510e:	8c a9       	ldd	r24, Y+52	; 0x34
    5110:	81 30       	cpi	r24, 0x01	; 1
    5112:	19 f5       	brne	.+70     	; 0x515a <main+0x1f4>
				CLCD_voidClearDisplay();
    5114:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <CLCD_voidClearDisplay>
				LOC_u8Iterator = 0;
    5118:	1b ae       	std	Y+59, r1	; 0x3b
				LOC_u8Counter = 0;
    511a:	1a ae       	std	Y+58, r1	; 0x3a
				LOC_u8OperandCounter = 0;
    511c:	1e aa       	std	Y+54, r1	; 0x36
				LOC_u8OperationCounter = 0;
    511e:	1f aa       	std	Y+55, r1	; 0x37
				LOC_u8OperationFlag	=	0;
    5120:	1d aa       	std	Y+53, r1	; 0x35
				LOC_f32Result 		=	0;
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	a0 e0       	ldi	r26, 0x00	; 0
    5128:	b0 e0       	ldi	r27, 0x00	; 0
    512a:	88 ab       	std	Y+48, r24	; 0x30
    512c:	99 ab       	std	Y+49, r25	; 0x31
    512e:	aa ab       	std	Y+50, r26	; 0x32
    5130:	bb ab       	std	Y+51, r27	; 0x33
				clearFArray(LOC_u8ArrOperands);
    5132:	ce 01       	movw	r24, r28
    5134:	cc 96       	adiw	r24, 0x3c	; 60
    5136:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <clearFArray>
				clearArray(LOC_u8ArrOperations);
    513a:	ce 01       	movw	r24, r28
    513c:	82 59       	subi	r24, 0x92	; 146
    513e:	9f 4f       	sbci	r25, 0xFF	; 255
    5140:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <clearArray>
				clearArray(LOC_u8ArrOperandsLength);
    5144:	ce 01       	movw	r24, r28
    5146:	8c 59       	subi	r24, 0x9C	; 156
    5148:	9f 4f       	sbci	r25, 0xFF	; 255
    514a:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <clearArray>
				clearArray(LOC_u8ArrOprationsIndex);
    514e:	ce 01       	movw	r24, r28
    5150:	88 58       	subi	r24, 0x88	; 136
    5152:	9f 4f       	sbci	r25, 0xFF	; 255
    5154:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <clearArray>
				LOC_u8ResFlag = 0;
    5158:	1c aa       	std	Y+52, r1	; 0x34
			}
			switch(LOC_u8ComeData){
    515a:	89 ad       	ldd	r24, Y+57	; 0x39
    515c:	a8 2f       	mov	r26, r24
    515e:	b0 e0       	ldi	r27, 0x00	; 0
    5160:	ce 57       	subi	r28, 0x7E	; 126
    5162:	df 4f       	sbci	r29, 0xFF	; 255
    5164:	b9 83       	std	Y+1, r27	; 0x01
    5166:	a8 83       	st	Y, r26
    5168:	c2 58       	subi	r28, 0x82	; 130
    516a:	d0 40       	sbci	r29, 0x00	; 0
    516c:	ce 57       	subi	r28, 0x7E	; 126
    516e:	df 4f       	sbci	r29, 0xFF	; 255
    5170:	28 81       	ld	r18, Y
    5172:	39 81       	ldd	r19, Y+1	; 0x01
    5174:	c2 58       	subi	r28, 0x82	; 130
    5176:	d0 40       	sbci	r29, 0x00	; 0
    5178:	2f 32       	cpi	r18, 0x2F	; 47
    517a:	31 05       	cpc	r19, r1
    517c:	09 f4       	brne	.+2      	; 0x5180 <main+0x21a>
    517e:	a8 c3       	rjmp	.+1872   	; 0x58d0 <main+0x96a>
    5180:	ce 57       	subi	r28, 0x7E	; 126
    5182:	df 4f       	sbci	r29, 0xFF	; 255
    5184:	88 81       	ld	r24, Y
    5186:	99 81       	ldd	r25, Y+1	; 0x01
    5188:	c2 58       	subi	r28, 0x82	; 130
    518a:	d0 40       	sbci	r29, 0x00	; 0
    518c:	80 33       	cpi	r24, 0x30	; 48
    518e:	91 05       	cpc	r25, r1
    5190:	fc f4       	brge	.+62     	; 0x51d0 <main+0x26a>
    5192:	ce 57       	subi	r28, 0x7E	; 126
    5194:	df 4f       	sbci	r29, 0xFF	; 255
    5196:	a8 81       	ld	r26, Y
    5198:	b9 81       	ldd	r27, Y+1	; 0x01
    519a:	c2 58       	subi	r28, 0x82	; 130
    519c:	d0 40       	sbci	r29, 0x00	; 0
    519e:	ab 32       	cpi	r26, 0x2B	; 43
    51a0:	b1 05       	cpc	r27, r1
    51a2:	09 f4       	brne	.+2      	; 0x51a6 <main+0x240>
    51a4:	ae c2       	rjmp	.+1372   	; 0x5702 <main+0x79c>
    51a6:	ce 57       	subi	r28, 0x7E	; 126
    51a8:	df 4f       	sbci	r29, 0xFF	; 255
    51aa:	28 81       	ld	r18, Y
    51ac:	39 81       	ldd	r19, Y+1	; 0x01
    51ae:	c2 58       	subi	r28, 0x82	; 130
    51b0:	d0 40       	sbci	r29, 0x00	; 0
    51b2:	2d 32       	cpi	r18, 0x2D	; 45
    51b4:	31 05       	cpc	r19, r1
    51b6:	09 f4       	brne	.+2      	; 0x51ba <main+0x254>
    51b8:	e7 c2       	rjmp	.+1486   	; 0x5788 <main+0x822>
    51ba:	ce 57       	subi	r28, 0x7E	; 126
    51bc:	df 4f       	sbci	r29, 0xFF	; 255
    51be:	88 81       	ld	r24, Y
    51c0:	99 81       	ldd	r25, Y+1	; 0x01
    51c2:	c2 58       	subi	r28, 0x82	; 130
    51c4:	d0 40       	sbci	r29, 0x00	; 0
    51c6:	8a 32       	cpi	r24, 0x2A	; 42
    51c8:	91 05       	cpc	r25, r1
    51ca:	09 f4       	brne	.+2      	; 0x51ce <main+0x268>
    51cc:	20 c3       	rjmp	.+1600   	; 0x580e <main+0x8a8>
    51ce:	e1 c3       	rjmp	.+1986   	; 0x5992 <main+0xa2c>
    51d0:	ce 57       	subi	r28, 0x7E	; 126
    51d2:	df 4f       	sbci	r29, 0xFF	; 255
    51d4:	a8 81       	ld	r26, Y
    51d6:	b9 81       	ldd	r27, Y+1	; 0x01
    51d8:	c2 58       	subi	r28, 0x82	; 130
    51da:	d0 40       	sbci	r29, 0x00	; 0
    51dc:	a3 34       	cpi	r26, 0x43	; 67
    51de:	b1 05       	cpc	r27, r1
    51e0:	09 f4       	brne	.+2      	; 0x51e4 <main+0x27e>
    51e2:	6b c2       	rjmp	.+1238   	; 0x56ba <main+0x754>
    51e4:	ce 57       	subi	r28, 0x7E	; 126
    51e6:	df 4f       	sbci	r29, 0xFF	; 255
    51e8:	28 81       	ld	r18, Y
    51ea:	39 81       	ldd	r19, Y+1	; 0x01
    51ec:	c2 58       	subi	r28, 0x82	; 130
    51ee:	d0 40       	sbci	r29, 0x00	; 0
    51f0:	25 34       	cpi	r18, 0x45	; 69
    51f2:	31 05       	cpc	r19, r1
    51f4:	09 f0       	breq	.+2      	; 0x51f8 <main+0x292>
    51f6:	cd c3       	rjmp	.+1946   	; 0x5992 <main+0xa2c>
			case 'E':
				LOC_u8ResFlag = 1;
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	8c ab       	std	Y+52, r24	; 0x34
				if(LOC_u8OperationFlag == 1){
    51fc:	8d a9       	ldd	r24, Y+53	; 0x35
    51fe:	81 30       	cpi	r24, 0x01	; 1
    5200:	09 f0       	breq	.+2      	; 0x5204 <main+0x29e>
    5202:	7d c0       	rjmp	.+250    	; 0x52fe <main+0x398>
					CLCD_voidSendPostion(CLCD_ROW_2 , CLCD_Column_1);
    5204:	82 e0       	ldi	r24, 0x02	; 2
    5206:	61 e0       	ldi	r22, 0x01	; 1
    5208:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
					CLCD_voidSendString((u8*) "Syntax Error");
    520c:	81 e7       	ldi	r24, 0x71	; 113
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	aa e7       	ldi	r26, 0x7A	; 122
    521a:	b4 e4       	ldi	r27, 0x44	; 68
    521c:	89 8f       	std	Y+25, r24	; 0x19
    521e:	9a 8f       	std	Y+26, r25	; 0x1a
    5220:	ab 8f       	std	Y+27, r26	; 0x1b
    5222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5224:	69 8d       	ldd	r22, Y+25	; 0x19
    5226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    522a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    522c:	20 e0       	ldi	r18, 0x00	; 0
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	4a ef       	ldi	r20, 0xFA	; 250
    5232:	54 e4       	ldi	r21, 0x44	; 68
    5234:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	8d 8b       	std	Y+21, r24	; 0x15
    523e:	9e 8b       	std	Y+22, r25	; 0x16
    5240:	af 8b       	std	Y+23, r26	; 0x17
    5242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5244:	6d 89       	ldd	r22, Y+21	; 0x15
    5246:	7e 89       	ldd	r23, Y+22	; 0x16
    5248:	8f 89       	ldd	r24, Y+23	; 0x17
    524a:	98 8d       	ldd	r25, Y+24	; 0x18
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e8       	ldi	r20, 0x80	; 128
    5252:	5f e3       	ldi	r21, 0x3F	; 63
    5254:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    5258:	88 23       	and	r24, r24
    525a:	2c f4       	brge	.+10     	; 0x5266 <main+0x300>
		__ticks = 1;
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	9c 8b       	std	Y+20, r25	; 0x14
    5262:	8b 8b       	std	Y+19, r24	; 0x13
    5264:	3f c0       	rjmp	.+126    	; 0x52e4 <main+0x37e>
	else if (__tmp > 65535)
    5266:	6d 89       	ldd	r22, Y+21	; 0x15
    5268:	7e 89       	ldd	r23, Y+22	; 0x16
    526a:	8f 89       	ldd	r24, Y+23	; 0x17
    526c:	98 8d       	ldd	r25, Y+24	; 0x18
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	3f ef       	ldi	r19, 0xFF	; 255
    5272:	4f e7       	ldi	r20, 0x7F	; 127
    5274:	57 e4       	ldi	r21, 0x47	; 71
    5276:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    527a:	18 16       	cp	r1, r24
    527c:	4c f5       	brge	.+82     	; 0x52d0 <main+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527e:	69 8d       	ldd	r22, Y+25	; 0x19
    5280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e2       	ldi	r20, 0x20	; 32
    528c:	51 e4       	ldi	r21, 0x41	; 65
    528e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	bc 01       	movw	r22, r24
    5298:	cd 01       	movw	r24, r26
    529a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    529e:	dc 01       	movw	r26, r24
    52a0:	cb 01       	movw	r24, r22
    52a2:	9c 8b       	std	Y+20, r25	; 0x14
    52a4:	8b 8b       	std	Y+19, r24	; 0x13
    52a6:	0f c0       	rjmp	.+30     	; 0x52c6 <main+0x360>
    52a8:	88 ec       	ldi	r24, 0xC8	; 200
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	9a 8b       	std	Y+18, r25	; 0x12
    52ae:	89 8b       	std	Y+17, r24	; 0x11
    52b0:	89 89       	ldd	r24, Y+17	; 0x11
    52b2:	9a 89       	ldd	r25, Y+18	; 0x12
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	f1 f7       	brne	.-4      	; 0x52b4 <main+0x34e>
    52b8:	9a 8b       	std	Y+18, r25	; 0x12
    52ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52bc:	8b 89       	ldd	r24, Y+19	; 0x13
    52be:	9c 89       	ldd	r25, Y+20	; 0x14
    52c0:	01 97       	sbiw	r24, 0x01	; 1
    52c2:	9c 8b       	std	Y+20, r25	; 0x14
    52c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c6:	8b 89       	ldd	r24, Y+19	; 0x13
    52c8:	9c 89       	ldd	r25, Y+20	; 0x14
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	69 f7       	brne	.-38     	; 0x52a8 <main+0x342>
    52ce:	14 c0       	rjmp	.+40     	; 0x52f8 <main+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d0:	6d 89       	ldd	r22, Y+21	; 0x15
    52d2:	7e 89       	ldd	r23, Y+22	; 0x16
    52d4:	8f 89       	ldd	r24, Y+23	; 0x17
    52d6:	98 8d       	ldd	r25, Y+24	; 0x18
    52d8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	9c 8b       	std	Y+20, r25	; 0x14
    52e2:	8b 8b       	std	Y+19, r24	; 0x13
    52e4:	8b 89       	ldd	r24, Y+19	; 0x13
    52e6:	9c 89       	ldd	r25, Y+20	; 0x14
    52e8:	98 8b       	std	Y+16, r25	; 0x10
    52ea:	8f 87       	std	Y+15, r24	; 0x0f
    52ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    52ee:	98 89       	ldd	r25, Y+16	; 0x10
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	f1 f7       	brne	.-4      	; 0x52f0 <main+0x38a>
    52f4:	98 8b       	std	Y+16, r25	; 0x10
    52f6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					CLCD_voidClearDisplay();
    52f8:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <CLCD_voidClearDisplay>
    52fc:	02 cf       	rjmp	.-508    	; 0x5102 <main+0x19c>
					break;
				}
				DivideByZeroFlag = calcDIVandMul(LOC_u8ArrOperands, LOC_u8ArrOperations, LOC_u8ArrOprationsIndex);
    52fe:	ce 01       	movw	r24, r28
    5300:	cc 96       	adiw	r24, 0x3c	; 60
    5302:	9e 01       	movw	r18, r28
    5304:	22 59       	subi	r18, 0x92	; 146
    5306:	3f 4f       	sbci	r19, 0xFF	; 255
    5308:	ae 01       	movw	r20, r28
    530a:	48 58       	subi	r20, 0x88	; 136
    530c:	5f 4f       	sbci	r21, 0xFF	; 255
    530e:	b9 01       	movw	r22, r18
    5310:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <calcDIVandMul>
    5314:	8b a7       	std	Y+43, r24	; 0x2b
				if (DivideByZeroFlag == Status_Not_Ok)
    5316:	8b a5       	ldd	r24, Y+43	; 0x2b
    5318:	81 30       	cpi	r24, 0x01	; 1
    531a:	09 f0       	breq	.+2      	; 0x531e <main+0x3b8>
    531c:	7d c0       	rjmp	.+250    	; 0x5418 <main+0x4b2>
				{
					CLCD_voidSendPostion(CLCD_ROW_2 , CLCD_Column_1);
    531e:	82 e0       	ldi	r24, 0x02	; 2
    5320:	61 e0       	ldi	r22, 0x01	; 1
    5322:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
					CLCD_voidSendString((u8*) "Divide By Zero");
    5326:	8e e7       	ldi	r24, 0x7E	; 126
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	aa e7       	ldi	r26, 0x7A	; 122
    5334:	b4 e4       	ldi	r27, 0x44	; 68
    5336:	8b 87       	std	Y+11, r24	; 0x0b
    5338:	9c 87       	std	Y+12, r25	; 0x0c
    533a:	ad 87       	std	Y+13, r26	; 0x0d
    533c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    533e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5340:	7c 85       	ldd	r23, Y+12	; 0x0c
    5342:	8d 85       	ldd	r24, Y+13	; 0x0d
    5344:	9e 85       	ldd	r25, Y+14	; 0x0e
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	4a ef       	ldi	r20, 0xFA	; 250
    534c:	54 e4       	ldi	r21, 0x44	; 68
    534e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	8f 83       	std	Y+7, r24	; 0x07
    5358:	98 87       	std	Y+8, r25	; 0x08
    535a:	a9 87       	std	Y+9, r26	; 0x09
    535c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    535e:	6f 81       	ldd	r22, Y+7	; 0x07
    5360:	78 85       	ldd	r23, Y+8	; 0x08
    5362:	89 85       	ldd	r24, Y+9	; 0x09
    5364:	9a 85       	ldd	r25, Y+10	; 0x0a
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 e8       	ldi	r20, 0x80	; 128
    536c:	5f e3       	ldi	r21, 0x3F	; 63
    536e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    5372:	88 23       	and	r24, r24
    5374:	2c f4       	brge	.+10     	; 0x5380 <main+0x41a>
		__ticks = 1;
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	9e 83       	std	Y+6, r25	; 0x06
    537c:	8d 83       	std	Y+5, r24	; 0x05
    537e:	3f c0       	rjmp	.+126    	; 0x53fe <main+0x498>
	else if (__tmp > 65535)
    5380:	6f 81       	ldd	r22, Y+7	; 0x07
    5382:	78 85       	ldd	r23, Y+8	; 0x08
    5384:	89 85       	ldd	r24, Y+9	; 0x09
    5386:	9a 85       	ldd	r25, Y+10	; 0x0a
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	3f ef       	ldi	r19, 0xFF	; 255
    538c:	4f e7       	ldi	r20, 0x7F	; 127
    538e:	57 e4       	ldi	r21, 0x47	; 71
    5390:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    5394:	18 16       	cp	r1, r24
    5396:	4c f5       	brge	.+82     	; 0x53ea <main+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5398:	6b 85       	ldd	r22, Y+11	; 0x0b
    539a:	7c 85       	ldd	r23, Y+12	; 0x0c
    539c:	8d 85       	ldd	r24, Y+13	; 0x0d
    539e:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	40 e2       	ldi	r20, 0x20	; 32
    53a6:	51 e4       	ldi	r21, 0x41	; 65
    53a8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	bc 01       	movw	r22, r24
    53b2:	cd 01       	movw	r24, r26
    53b4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53b8:	dc 01       	movw	r26, r24
    53ba:	cb 01       	movw	r24, r22
    53bc:	9e 83       	std	Y+6, r25	; 0x06
    53be:	8d 83       	std	Y+5, r24	; 0x05
    53c0:	0f c0       	rjmp	.+30     	; 0x53e0 <main+0x47a>
    53c2:	88 ec       	ldi	r24, 0xC8	; 200
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	9c 83       	std	Y+4, r25	; 0x04
    53c8:	8b 83       	std	Y+3, r24	; 0x03
    53ca:	8b 81       	ldd	r24, Y+3	; 0x03
    53cc:	9c 81       	ldd	r25, Y+4	; 0x04
    53ce:	01 97       	sbiw	r24, 0x01	; 1
    53d0:	f1 f7       	brne	.-4      	; 0x53ce <main+0x468>
    53d2:	9c 83       	std	Y+4, r25	; 0x04
    53d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d6:	8d 81       	ldd	r24, Y+5	; 0x05
    53d8:	9e 81       	ldd	r25, Y+6	; 0x06
    53da:	01 97       	sbiw	r24, 0x01	; 1
    53dc:	9e 83       	std	Y+6, r25	; 0x06
    53de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53e0:	8d 81       	ldd	r24, Y+5	; 0x05
    53e2:	9e 81       	ldd	r25, Y+6	; 0x06
    53e4:	00 97       	sbiw	r24, 0x00	; 0
    53e6:	69 f7       	brne	.-38     	; 0x53c2 <main+0x45c>
    53e8:	14 c0       	rjmp	.+40     	; 0x5412 <main+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ea:	6f 81       	ldd	r22, Y+7	; 0x07
    53ec:	78 85       	ldd	r23, Y+8	; 0x08
    53ee:	89 85       	ldd	r24, Y+9	; 0x09
    53f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	9e 83       	std	Y+6, r25	; 0x06
    53fc:	8d 83       	std	Y+5, r24	; 0x05
    53fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5400:	9e 81       	ldd	r25, Y+6	; 0x06
    5402:	9a 83       	std	Y+2, r25	; 0x02
    5404:	89 83       	std	Y+1, r24	; 0x01
    5406:	89 81       	ldd	r24, Y+1	; 0x01
    5408:	9a 81       	ldd	r25, Y+2	; 0x02
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	f1 f7       	brne	.-4      	; 0x540a <main+0x4a4>
    540e:	9a 83       	std	Y+2, r25	; 0x02
    5410:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					CLCD_voidClearDisplay();
    5412:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <CLCD_voidClearDisplay>
    5416:	75 ce       	rjmp	.-790    	; 0x5102 <main+0x19c>
					break;
				}
				else
				{
					LOC_f32Result = calcADDandSUB(LOC_u8ArrOperands, LOC_u8ArrOperations, LOC_u8ArrOprationsIndex);
    5418:	ce 01       	movw	r24, r28
    541a:	cc 96       	adiw	r24, 0x3c	; 60
    541c:	9e 01       	movw	r18, r28
    541e:	22 59       	subi	r18, 0x92	; 146
    5420:	3f 4f       	sbci	r19, 0xFF	; 255
    5422:	ae 01       	movw	r20, r28
    5424:	48 58       	subi	r20, 0x88	; 136
    5426:	5f 4f       	sbci	r21, 0xFF	; 255
    5428:	b9 01       	movw	r22, r18
    542a:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <calcADDandSUB>
    542e:	dc 01       	movw	r26, r24
    5430:	cb 01       	movw	r24, r22
    5432:	88 ab       	std	Y+48, r24	; 0x30
    5434:	99 ab       	std	Y+49, r25	; 0x31
    5436:	aa ab       	std	Y+50, r26	; 0x32
    5438:	bb ab       	std	Y+51, r27	; 0x33
					if(LOC_f32Result == 0){
    543a:	68 a9       	ldd	r22, Y+48	; 0x30
    543c:	79 a9       	ldd	r23, Y+49	; 0x31
    543e:	8a a9       	ldd	r24, Y+50	; 0x32
    5440:	9b a9       	ldd	r25, Y+51	; 0x33
    5442:	20 e0       	ldi	r18, 0x00	; 0
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	40 e0       	ldi	r20, 0x00	; 0
    5448:	50 e0       	ldi	r21, 0x00	; 0
    544a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__eqsf2>
    544e:	88 23       	and	r24, r24
    5450:	69 f4       	brne	.+26     	; 0x546c <main+0x506>
						CLCD_voidSendPostion(CLCD_ROW_2 , CLCD_Column_1);
    5452:	82 e0       	ldi	r24, 0x02	; 2
    5454:	61 e0       	ldi	r22, 0x01	; 1
    5456:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
						CLCD_voidSendString((u8 *)"0");
    545a:	8d e8       	ldi	r24, 0x8D	; 141
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
						CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter  );
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	6a ad       	ldd	r22, Y+58	; 0x3a
    5466:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
    546a:	4b ce       	rjmp	.-874    	; 0x5102 <main+0x19c>
					}else if ( LOC_f32Result > 0){
    546c:	68 a9       	ldd	r22, Y+48	; 0x30
    546e:	79 a9       	ldd	r23, Y+49	; 0x31
    5470:	8a a9       	ldd	r24, Y+50	; 0x32
    5472:	9b a9       	ldd	r25, Y+51	; 0x33
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	40 e0       	ldi	r20, 0x00	; 0
    547a:	50 e0       	ldi	r21, 0x00	; 0
    547c:	0e 94 01 12 	call	0x2402	; 0x2402 <__gtsf2>
    5480:	18 16       	cp	r1, r24
    5482:	0c f0       	brlt	.+2      	; 0x5486 <main+0x520>
    5484:	7e c0       	rjmp	.+252    	; 0x5582 <main+0x61c>

						CLCD_voidSendPostion(CLCD_ROW_2 , CLCD_Column_1);
    5486:	82 e0       	ldi	r24, 0x02	; 2
    5488:	61 e0       	ldi	r22, 0x01	; 1
    548a:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
						if((u32)LOC_f32Result == 0)
    548e:	68 a9       	ldd	r22, Y+48	; 0x30
    5490:	79 a9       	ldd	r23, Y+49	; 0x31
    5492:	8a a9       	ldd	r24, Y+50	; 0x32
    5494:	9b a9       	ldd	r25, Y+51	; 0x33
    5496:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    549a:	dc 01       	movw	r26, r24
    549c:	cb 01       	movw	r24, r22
    549e:	00 97       	sbiw	r24, 0x00	; 0
    54a0:	a1 05       	cpc	r26, r1
    54a2:	b1 05       	cpc	r27, r1
    54a4:	29 f4       	brne	.+10     	; 0x54b0 <main+0x54a>
							CLCD_voidSendString((u8*)"0");
    54a6:	8d e8       	ldi	r24, 0x8D	; 141
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    54ae:	18 c0       	rjmp	.+48     	; 0x54e0 <main+0x57a>
						else
							CLCD_voidSendNumber(LOC_f32Result );
    54b0:	68 a9       	ldd	r22, Y+48	; 0x30
    54b2:	79 a9       	ldd	r23, Y+49	; 0x31
    54b4:	8a a9       	ldd	r24, Y+50	; 0x32
    54b6:	9b a9       	ldd	r25, Y+51	; 0x33
    54b8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixunssfdi>
    54bc:	a2 2e       	mov	r10, r18
    54be:	b3 2e       	mov	r11, r19
    54c0:	c4 2e       	mov	r12, r20
    54c2:	d5 2e       	mov	r13, r21
    54c4:	e6 2e       	mov	r14, r22
    54c6:	f7 2e       	mov	r15, r23
    54c8:	08 2f       	mov	r16, r24
    54ca:	19 2f       	mov	r17, r25
    54cc:	2a 2d       	mov	r18, r10
    54ce:	3b 2d       	mov	r19, r11
    54d0:	4c 2d       	mov	r20, r12
    54d2:	5d 2d       	mov	r21, r13
    54d4:	6e 2d       	mov	r22, r14
    54d6:	7f 2d       	mov	r23, r15
    54d8:	80 2f       	mov	r24, r16
    54da:	91 2f       	mov	r25, r17
    54dc:	0e 94 9b 22 	call	0x4536	; 0x4536 <CLCD_voidSendNumber>
						CLCD_voidSendString((u8 *) ".");
    54e0:	8f e8       	ldi	r24, 0x8F	; 143
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
						LOC_f32ResultFraction = (u32) ( LOC_f32Result * 100  );
    54e8:	68 a9       	ldd	r22, Y+48	; 0x30
    54ea:	79 a9       	ldd	r23, Y+49	; 0x31
    54ec:	8a a9       	ldd	r24, Y+50	; 0x32
    54ee:	9b a9       	ldd	r25, Y+51	; 0x33
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	48 ec       	ldi	r20, 0xC8	; 200
    54f6:	52 e4       	ldi	r21, 0x42	; 66
    54f8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    54fc:	dc 01       	movw	r26, r24
    54fe:	cb 01       	movw	r24, r22
    5500:	bc 01       	movw	r22, r24
    5502:	cd 01       	movw	r24, r26
    5504:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5508:	dc 01       	movw	r26, r24
    550a:	cb 01       	movw	r24, r22
    550c:	8c a7       	std	Y+44, r24	; 0x2c
    550e:	9d a7       	std	Y+45, r25	; 0x2d
    5510:	ae a7       	std	Y+46, r26	; 0x2e
    5512:	bf a7       	std	Y+47, r27	; 0x2f
						LOC_f32ResultFraction = LOC_f32ResultFraction % 100;
    5514:	8c a5       	ldd	r24, Y+44	; 0x2c
    5516:	9d a5       	ldd	r25, Y+45	; 0x2d
    5518:	ae a5       	ldd	r26, Y+46	; 0x2e
    551a:	bf a5       	ldd	r27, Y+47	; 0x2f
    551c:	24 e6       	ldi	r18, 0x64	; 100
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	40 e0       	ldi	r20, 0x00	; 0
    5522:	50 e0       	ldi	r21, 0x00	; 0
    5524:	bc 01       	movw	r22, r24
    5526:	cd 01       	movw	r24, r26
    5528:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    552c:	dc 01       	movw	r26, r24
    552e:	cb 01       	movw	r24, r22
    5530:	8c a7       	std	Y+44, r24	; 0x2c
    5532:	9d a7       	std	Y+45, r25	; 0x2d
    5534:	ae a7       	std	Y+46, r26	; 0x2e
    5536:	bf a7       	std	Y+47, r27	; 0x2f
						if(LOC_f32ResultFraction == 0)
    5538:	8c a5       	ldd	r24, Y+44	; 0x2c
    553a:	9d a5       	ldd	r25, Y+45	; 0x2d
    553c:	ae a5       	ldd	r26, Y+46	; 0x2e
    553e:	bf a5       	ldd	r27, Y+47	; 0x2f
    5540:	00 97       	sbiw	r24, 0x00	; 0
    5542:	a1 05       	cpc	r26, r1
    5544:	b1 05       	cpc	r27, r1
    5546:	29 f4       	brne	.+10     	; 0x5552 <main+0x5ec>
							CLCD_voidSendString((u8*)"00");
    5548:	81 e9       	ldi	r24, 0x91	; 145
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    5550:	13 c0       	rjmp	.+38     	; 0x5578 <main+0x612>
						else
							CLCD_voidSendNumber(LOC_f32ResultFraction);
    5552:	8c a5       	ldd	r24, Y+44	; 0x2c
    5554:	9d a5       	ldd	r25, Y+45	; 0x2d
    5556:	ae a5       	ldd	r26, Y+46	; 0x2e
    5558:	bf a5       	ldd	r27, Y+47	; 0x2f
    555a:	5c 01       	movw	r10, r24
    555c:	6d 01       	movw	r12, r26
    555e:	ee 24       	eor	r14, r14
    5560:	ff 24       	eor	r15, r15
    5562:	87 01       	movw	r16, r14
    5564:	2a 2d       	mov	r18, r10
    5566:	3b 2d       	mov	r19, r11
    5568:	4c 2d       	mov	r20, r12
    556a:	5d 2d       	mov	r21, r13
    556c:	6e 2d       	mov	r22, r14
    556e:	7f 2d       	mov	r23, r15
    5570:	80 2f       	mov	r24, r16
    5572:	91 2f       	mov	r25, r17
    5574:	0e 94 9b 22 	call	0x4536	; 0x4536 <CLCD_voidSendNumber>

						CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter );
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	6a ad       	ldd	r22, Y+58	; 0x3a
    557c:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
    5580:	c0 cd       	rjmp	.-1152   	; 0x5102 <main+0x19c>
					}else if( LOC_f32Result < 0){
    5582:	68 a9       	ldd	r22, Y+48	; 0x30
    5584:	79 a9       	ldd	r23, Y+49	; 0x31
    5586:	8a a9       	ldd	r24, Y+50	; 0x32
    5588:	9b a9       	ldd	r25, Y+51	; 0x33
    558a:	20 e0       	ldi	r18, 0x00	; 0
    558c:	30 e0       	ldi	r19, 0x00	; 0
    558e:	40 e0       	ldi	r20, 0x00	; 0
    5590:	50 e0       	ldi	r21, 0x00	; 0
    5592:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__ltsf2>
    5596:	88 23       	and	r24, r24
    5598:	0c f0       	brlt	.+2      	; 0x559c <main+0x636>
    559a:	b3 cd       	rjmp	.-1178   	; 0x5102 <main+0x19c>
						LOC_f32Result = LOC_f32Result * -1;
    559c:	88 a9       	ldd	r24, Y+48	; 0x30
    559e:	99 a9       	ldd	r25, Y+49	; 0x31
    55a0:	aa a9       	ldd	r26, Y+50	; 0x32
    55a2:	bb a9       	ldd	r27, Y+51	; 0x33
    55a4:	b0 58       	subi	r27, 0x80	; 128
    55a6:	88 ab       	std	Y+48, r24	; 0x30
    55a8:	99 ab       	std	Y+49, r25	; 0x31
    55aa:	aa ab       	std	Y+50, r26	; 0x32
    55ac:	bb ab       	std	Y+51, r27	; 0x33

						CLCD_voidSendPostion(CLCD_ROW_2 , CLCD_Column_1);
    55ae:	82 e0       	ldi	r24, 0x02	; 2
    55b0:	61 e0       	ldi	r22, 0x01	; 1
    55b2:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
						CLCD_voidSendString((u8 *) "-");
    55b6:	84 e9       	ldi	r24, 0x94	; 148
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
						CLCD_voidSendPostion(CLCD_ROW_2 , CLCD_Column_2);
    55be:	82 e0       	ldi	r24, 0x02	; 2
    55c0:	62 e0       	ldi	r22, 0x02	; 2
    55c2:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>

						if((u32)LOC_f32Result == 0)
    55c6:	68 a9       	ldd	r22, Y+48	; 0x30
    55c8:	79 a9       	ldd	r23, Y+49	; 0x31
    55ca:	8a a9       	ldd	r24, Y+50	; 0x32
    55cc:	9b a9       	ldd	r25, Y+51	; 0x33
    55ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    55d2:	dc 01       	movw	r26, r24
    55d4:	cb 01       	movw	r24, r22
    55d6:	00 97       	sbiw	r24, 0x00	; 0
    55d8:	a1 05       	cpc	r26, r1
    55da:	b1 05       	cpc	r27, r1
    55dc:	29 f4       	brne	.+10     	; 0x55e8 <main+0x682>
							CLCD_voidSendString((u8*)"0");
    55de:	8d e8       	ldi	r24, 0x8D	; 141
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    55e6:	18 c0       	rjmp	.+48     	; 0x5618 <main+0x6b2>
						else
							CLCD_voidSendNumber(LOC_f32Result );
    55e8:	68 a9       	ldd	r22, Y+48	; 0x30
    55ea:	79 a9       	ldd	r23, Y+49	; 0x31
    55ec:	8a a9       	ldd	r24, Y+50	; 0x32
    55ee:	9b a9       	ldd	r25, Y+51	; 0x33
    55f0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixunssfdi>
    55f4:	a2 2e       	mov	r10, r18
    55f6:	b3 2e       	mov	r11, r19
    55f8:	c4 2e       	mov	r12, r20
    55fa:	d5 2e       	mov	r13, r21
    55fc:	e6 2e       	mov	r14, r22
    55fe:	f7 2e       	mov	r15, r23
    5600:	08 2f       	mov	r16, r24
    5602:	19 2f       	mov	r17, r25
    5604:	2a 2d       	mov	r18, r10
    5606:	3b 2d       	mov	r19, r11
    5608:	4c 2d       	mov	r20, r12
    560a:	5d 2d       	mov	r21, r13
    560c:	6e 2d       	mov	r22, r14
    560e:	7f 2d       	mov	r23, r15
    5610:	80 2f       	mov	r24, r16
    5612:	91 2f       	mov	r25, r17
    5614:	0e 94 9b 22 	call	0x4536	; 0x4536 <CLCD_voidSendNumber>
						CLCD_voidSendString((u8 *) ".");
    5618:	8f e8       	ldi	r24, 0x8F	; 143
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
						LOC_f32ResultFraction = (u32) ( LOC_f32Result * 100  );
    5620:	68 a9       	ldd	r22, Y+48	; 0x30
    5622:	79 a9       	ldd	r23, Y+49	; 0x31
    5624:	8a a9       	ldd	r24, Y+50	; 0x32
    5626:	9b a9       	ldd	r25, Y+51	; 0x33
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	48 ec       	ldi	r20, 0xC8	; 200
    562e:	52 e4       	ldi	r21, 0x42	; 66
    5630:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	bc 01       	movw	r22, r24
    563a:	cd 01       	movw	r24, r26
    563c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5640:	dc 01       	movw	r26, r24
    5642:	cb 01       	movw	r24, r22
    5644:	8c a7       	std	Y+44, r24	; 0x2c
    5646:	9d a7       	std	Y+45, r25	; 0x2d
    5648:	ae a7       	std	Y+46, r26	; 0x2e
    564a:	bf a7       	std	Y+47, r27	; 0x2f
						LOC_f32ResultFraction = LOC_f32ResultFraction % 100;
    564c:	8c a5       	ldd	r24, Y+44	; 0x2c
    564e:	9d a5       	ldd	r25, Y+45	; 0x2d
    5650:	ae a5       	ldd	r26, Y+46	; 0x2e
    5652:	bf a5       	ldd	r27, Y+47	; 0x2f
    5654:	24 e6       	ldi	r18, 0x64	; 100
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	40 e0       	ldi	r20, 0x00	; 0
    565a:	50 e0       	ldi	r21, 0x00	; 0
    565c:	bc 01       	movw	r22, r24
    565e:	cd 01       	movw	r24, r26
    5660:	0e 94 c4 30 	call	0x6188	; 0x6188 <__udivmodsi4>
    5664:	dc 01       	movw	r26, r24
    5666:	cb 01       	movw	r24, r22
    5668:	8c a7       	std	Y+44, r24	; 0x2c
    566a:	9d a7       	std	Y+45, r25	; 0x2d
    566c:	ae a7       	std	Y+46, r26	; 0x2e
    566e:	bf a7       	std	Y+47, r27	; 0x2f

						if(LOC_f32ResultFraction == 0)
    5670:	8c a5       	ldd	r24, Y+44	; 0x2c
    5672:	9d a5       	ldd	r25, Y+45	; 0x2d
    5674:	ae a5       	ldd	r26, Y+46	; 0x2e
    5676:	bf a5       	ldd	r27, Y+47	; 0x2f
    5678:	00 97       	sbiw	r24, 0x00	; 0
    567a:	a1 05       	cpc	r26, r1
    567c:	b1 05       	cpc	r27, r1
    567e:	29 f4       	brne	.+10     	; 0x568a <main+0x724>
							CLCD_voidSendString((u8*)"00");
    5680:	81 e9       	ldi	r24, 0x91	; 145
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    5688:	13 c0       	rjmp	.+38     	; 0x56b0 <main+0x74a>
						else
							CLCD_voidSendNumber(LOC_f32ResultFraction);
    568a:	8c a5       	ldd	r24, Y+44	; 0x2c
    568c:	9d a5       	ldd	r25, Y+45	; 0x2d
    568e:	ae a5       	ldd	r26, Y+46	; 0x2e
    5690:	bf a5       	ldd	r27, Y+47	; 0x2f
    5692:	5c 01       	movw	r10, r24
    5694:	6d 01       	movw	r12, r26
    5696:	ee 24       	eor	r14, r14
    5698:	ff 24       	eor	r15, r15
    569a:	87 01       	movw	r16, r14
    569c:	2a 2d       	mov	r18, r10
    569e:	3b 2d       	mov	r19, r11
    56a0:	4c 2d       	mov	r20, r12
    56a2:	5d 2d       	mov	r21, r13
    56a4:	6e 2d       	mov	r22, r14
    56a6:	7f 2d       	mov	r23, r15
    56a8:	80 2f       	mov	r24, r16
    56aa:	91 2f       	mov	r25, r17
    56ac:	0e 94 9b 22 	call	0x4536	; 0x4536 <CLCD_voidSendNumber>
						CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter );
    56b0:	81 e0       	ldi	r24, 0x01	; 1
    56b2:	6a ad       	ldd	r22, Y+58	; 0x3a
    56b4:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
    56b8:	24 cd       	rjmp	.-1464   	; 0x5102 <main+0x19c>
					}
				}
				break;
			case 'C':
				CLCD_voidClearDisplay();
    56ba:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <CLCD_voidClearDisplay>
				LOC_u8Iterator = 0;
    56be:	1b ae       	std	Y+59, r1	; 0x3b
				LOC_u8Counter = 0;
    56c0:	1a ae       	std	Y+58, r1	; 0x3a
				LOC_u8ComeData = 0;
    56c2:	19 ae       	std	Y+57, r1	; 0x39
				LOC_u8OperandCounter = 0;
    56c4:	1e aa       	std	Y+54, r1	; 0x36
				LOC_u8OperationCounter = 0;
    56c6:	1f aa       	std	Y+55, r1	; 0x37
				LOC_u8OperationFlag	=	0;
    56c8:	1d aa       	std	Y+53, r1	; 0x35
				LOC_f32Result 		=	0;
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	a0 e0       	ldi	r26, 0x00	; 0
    56d0:	b0 e0       	ldi	r27, 0x00	; 0
    56d2:	88 ab       	std	Y+48, r24	; 0x30
    56d4:	99 ab       	std	Y+49, r25	; 0x31
    56d6:	aa ab       	std	Y+50, r26	; 0x32
    56d8:	bb ab       	std	Y+51, r27	; 0x33
				clearFArray(LOC_u8ArrOperands);
    56da:	ce 01       	movw	r24, r28
    56dc:	cc 96       	adiw	r24, 0x3c	; 60
    56de:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <clearFArray>
				clearArray(LOC_u8ArrOperations);
    56e2:	ce 01       	movw	r24, r28
    56e4:	82 59       	subi	r24, 0x92	; 146
    56e6:	9f 4f       	sbci	r25, 0xFF	; 255
    56e8:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <clearArray>
				clearArray(LOC_u8ArrOperandsLength);
    56ec:	ce 01       	movw	r24, r28
    56ee:	8c 59       	subi	r24, 0x9C	; 156
    56f0:	9f 4f       	sbci	r25, 0xFF	; 255
    56f2:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <clearArray>
				clearArray(LOC_u8ArrOprationsIndex);
    56f6:	ce 01       	movw	r24, r28
    56f8:	88 58       	subi	r24, 0x88	; 136
    56fa:	9f 4f       	sbci	r25, 0xFF	; 255
    56fc:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <clearArray>
    5700:	00 cd       	rjmp	.-1536   	; 0x5102 <main+0x19c>
				break;

			case '+':
				if(LOC_u8OperationFlag != 1 && LOC_u8ArrOperandsLength[LOC_u8OperandCounter] != 0){
    5702:	8d a9       	ldd	r24, Y+53	; 0x35
    5704:	81 30       	cpi	r24, 0x01	; 1
    5706:	31 f1       	breq	.+76     	; 0x5754 <main+0x7ee>
    5708:	8e a9       	ldd	r24, Y+54	; 0x36
    570a:	28 2f       	mov	r18, r24
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	ce 01       	movw	r24, r28
    5710:	8c 59       	subi	r24, 0x9C	; 156
    5712:	9f 4f       	sbci	r25, 0xFF	; 255
    5714:	fc 01       	movw	r30, r24
    5716:	e2 0f       	add	r30, r18
    5718:	f3 1f       	adc	r31, r19
    571a:	80 81       	ld	r24, Z
    571c:	88 23       	and	r24, r24
    571e:	d1 f0       	breq	.+52     	; 0x5754 <main+0x7ee>
					LOC_u8ArrOperations[LOC_u8OperationCounter] = '+' ;
    5720:	8f a9       	ldd	r24, Y+55	; 0x37
    5722:	28 2f       	mov	r18, r24
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	ce 01       	movw	r24, r28
    5728:	82 59       	subi	r24, 0x92	; 146
    572a:	9f 4f       	sbci	r25, 0xFF	; 255
    572c:	fc 01       	movw	r30, r24
    572e:	e2 0f       	add	r30, r18
    5730:	f3 1f       	adc	r31, r19
    5732:	8b e2       	ldi	r24, 0x2B	; 43
    5734:	80 83       	st	Z, r24
					LOC_u8OperationCounter++;
    5736:	8f a9       	ldd	r24, Y+55	; 0x37
    5738:	8f 5f       	subi	r24, 0xFF	; 255
    573a:	8f ab       	std	Y+55, r24	; 0x37
					LOC_u8OperandCounter++;
    573c:	8e a9       	ldd	r24, Y+54	; 0x36
    573e:	8f 5f       	subi	r24, 0xFF	; 255
    5740:	8e ab       	std	Y+54, r24	; 0x36
					LOC_u8Counter++;
    5742:	8a ad       	ldd	r24, Y+58	; 0x3a
    5744:	8f 5f       	subi	r24, 0xFF	; 255
    5746:	8a af       	std	Y+58, r24	; 0x3a
					LOC_u8OperationFlag = 1;
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	8d ab       	std	Y+53, r24	; 0x35
					CLCD_voidSendData('+');
    574c:	8b e2       	ldi	r24, 0x2B	; 43
    574e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    5752:	d7 cc       	rjmp	.-1618   	; 0x5102 <main+0x19c>
				}
				else if (LOC_u8OperationFlag == 1 ){
    5754:	8d a9       	ldd	r24, Y+53	; 0x35
    5756:	81 30       	cpi	r24, 0x01	; 1
    5758:	09 f0       	breq	.+2      	; 0x575c <main+0x7f6>
    575a:	d3 cc       	rjmp	.-1626   	; 0x5102 <main+0x19c>
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '+' ;
    575c:	8f a9       	ldd	r24, Y+55	; 0x37
    575e:	88 2f       	mov	r24, r24
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	9c 01       	movw	r18, r24
    5764:	21 50       	subi	r18, 0x01	; 1
    5766:	30 40       	sbci	r19, 0x00	; 0
    5768:	ce 01       	movw	r24, r28
    576a:	82 59       	subi	r24, 0x92	; 146
    576c:	9f 4f       	sbci	r25, 0xFF	; 255
    576e:	fc 01       	movw	r30, r24
    5770:	e2 0f       	add	r30, r18
    5772:	f3 1f       	adc	r31, r19
    5774:	8b e2       	ldi	r24, 0x2B	; 43
    5776:	80 83       	st	Z, r24
					CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter);
    5778:	81 e0       	ldi	r24, 0x01	; 1
    577a:	6a ad       	ldd	r22, Y+58	; 0x3a
    577c:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
					CLCD_voidSendData('+');
    5780:	8b e2       	ldi	r24, 0x2B	; 43
    5782:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    5786:	bd cc       	rjmp	.-1670   	; 0x5102 <main+0x19c>

				}
				break;

			case '-':
				if(LOC_u8OperationFlag != 1 && LOC_u8ArrOperandsLength[LOC_u8OperandCounter] != 0){
    5788:	8d a9       	ldd	r24, Y+53	; 0x35
    578a:	81 30       	cpi	r24, 0x01	; 1
    578c:	31 f1       	breq	.+76     	; 0x57da <main+0x874>
    578e:	8e a9       	ldd	r24, Y+54	; 0x36
    5790:	28 2f       	mov	r18, r24
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	ce 01       	movw	r24, r28
    5796:	8c 59       	subi	r24, 0x9C	; 156
    5798:	9f 4f       	sbci	r25, 0xFF	; 255
    579a:	fc 01       	movw	r30, r24
    579c:	e2 0f       	add	r30, r18
    579e:	f3 1f       	adc	r31, r19
    57a0:	80 81       	ld	r24, Z
    57a2:	88 23       	and	r24, r24
    57a4:	d1 f0       	breq	.+52     	; 0x57da <main+0x874>
					LOC_u8ArrOperations[LOC_u8OperationCounter] = '-' ;
    57a6:	8f a9       	ldd	r24, Y+55	; 0x37
    57a8:	28 2f       	mov	r18, r24
    57aa:	30 e0       	ldi	r19, 0x00	; 0
    57ac:	ce 01       	movw	r24, r28
    57ae:	82 59       	subi	r24, 0x92	; 146
    57b0:	9f 4f       	sbci	r25, 0xFF	; 255
    57b2:	fc 01       	movw	r30, r24
    57b4:	e2 0f       	add	r30, r18
    57b6:	f3 1f       	adc	r31, r19
    57b8:	8d e2       	ldi	r24, 0x2D	; 45
    57ba:	80 83       	st	Z, r24
					LOC_u8OperationCounter++;
    57bc:	8f a9       	ldd	r24, Y+55	; 0x37
    57be:	8f 5f       	subi	r24, 0xFF	; 255
    57c0:	8f ab       	std	Y+55, r24	; 0x37
					LOC_u8OperandCounter++;
    57c2:	8e a9       	ldd	r24, Y+54	; 0x36
    57c4:	8f 5f       	subi	r24, 0xFF	; 255
    57c6:	8e ab       	std	Y+54, r24	; 0x36
					LOC_u8Counter++;
    57c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    57ca:	8f 5f       	subi	r24, 0xFF	; 255
    57cc:	8a af       	std	Y+58, r24	; 0x3a
					LOC_u8OperationFlag = 1;
    57ce:	81 e0       	ldi	r24, 0x01	; 1
    57d0:	8d ab       	std	Y+53, r24	; 0x35
					CLCD_voidSendData('-');
    57d2:	8d e2       	ldi	r24, 0x2D	; 45
    57d4:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    57d8:	94 cc       	rjmp	.-1752   	; 0x5102 <main+0x19c>
				}
				else if (LOC_u8OperationFlag == 1 ){
    57da:	8d a9       	ldd	r24, Y+53	; 0x35
    57dc:	81 30       	cpi	r24, 0x01	; 1
    57de:	09 f0       	breq	.+2      	; 0x57e2 <main+0x87c>
    57e0:	90 cc       	rjmp	.-1760   	; 0x5102 <main+0x19c>
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '-' ;
    57e2:	8f a9       	ldd	r24, Y+55	; 0x37
    57e4:	88 2f       	mov	r24, r24
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	9c 01       	movw	r18, r24
    57ea:	21 50       	subi	r18, 0x01	; 1
    57ec:	30 40       	sbci	r19, 0x00	; 0
    57ee:	ce 01       	movw	r24, r28
    57f0:	82 59       	subi	r24, 0x92	; 146
    57f2:	9f 4f       	sbci	r25, 0xFF	; 255
    57f4:	fc 01       	movw	r30, r24
    57f6:	e2 0f       	add	r30, r18
    57f8:	f3 1f       	adc	r31, r19
    57fa:	8d e2       	ldi	r24, 0x2D	; 45
    57fc:	80 83       	st	Z, r24
					CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter);
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	6a ad       	ldd	r22, Y+58	; 0x3a
    5802:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
					CLCD_voidSendData('-');
    5806:	8d e2       	ldi	r24, 0x2D	; 45
    5808:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    580c:	7a cc       	rjmp	.-1804   	; 0x5102 <main+0x19c>
				}
				break;

			case '*':
				if(LOC_u8OperationFlag != 1 && LOC_u8ArrOperandsLength[LOC_u8OperandCounter] != 0)
    580e:	8d a9       	ldd	r24, Y+53	; 0x35
    5810:	81 30       	cpi	r24, 0x01	; 1
    5812:	a1 f1       	breq	.+104    	; 0x587c <main+0x916>
    5814:	8e a9       	ldd	r24, Y+54	; 0x36
    5816:	28 2f       	mov	r18, r24
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	ce 01       	movw	r24, r28
    581c:	8c 59       	subi	r24, 0x9C	; 156
    581e:	9f 4f       	sbci	r25, 0xFF	; 255
    5820:	fc 01       	movw	r30, r24
    5822:	e2 0f       	add	r30, r18
    5824:	f3 1f       	adc	r31, r19
    5826:	80 81       	ld	r24, Z
    5828:	88 23       	and	r24, r24
    582a:	41 f1       	breq	.+80     	; 0x587c <main+0x916>
				{
					LOC_u8ArrOperations[LOC_u8OperationCounter] = '*' ;
    582c:	8f a9       	ldd	r24, Y+55	; 0x37
    582e:	28 2f       	mov	r18, r24
    5830:	30 e0       	ldi	r19, 0x00	; 0
    5832:	ce 01       	movw	r24, r28
    5834:	82 59       	subi	r24, 0x92	; 146
    5836:	9f 4f       	sbci	r25, 0xFF	; 255
    5838:	fc 01       	movw	r30, r24
    583a:	e2 0f       	add	r30, r18
    583c:	f3 1f       	adc	r31, r19
    583e:	8a e2       	ldi	r24, 0x2A	; 42
    5840:	80 83       	st	Z, r24
					LOC_u8ArrOprationsIndex[LOC_u8ArrOprationsIndexCounter] = LOC_u8OperationCounter;
    5842:	88 ad       	ldd	r24, Y+56	; 0x38
    5844:	28 2f       	mov	r18, r24
    5846:	30 e0       	ldi	r19, 0x00	; 0
    5848:	ce 01       	movw	r24, r28
    584a:	88 58       	subi	r24, 0x88	; 136
    584c:	9f 4f       	sbci	r25, 0xFF	; 255
    584e:	fc 01       	movw	r30, r24
    5850:	e2 0f       	add	r30, r18
    5852:	f3 1f       	adc	r31, r19
    5854:	8f a9       	ldd	r24, Y+55	; 0x37
    5856:	80 83       	st	Z, r24
					LOC_u8ArrOprationsIndexCounter++;
    5858:	88 ad       	ldd	r24, Y+56	; 0x38
    585a:	8f 5f       	subi	r24, 0xFF	; 255
    585c:	88 af       	std	Y+56, r24	; 0x38
					LOC_u8OperationCounter++;
    585e:	8f a9       	ldd	r24, Y+55	; 0x37
    5860:	8f 5f       	subi	r24, 0xFF	; 255
    5862:	8f ab       	std	Y+55, r24	; 0x37
					LOC_u8OperandCounter++;
    5864:	8e a9       	ldd	r24, Y+54	; 0x36
    5866:	8f 5f       	subi	r24, 0xFF	; 255
    5868:	8e ab       	std	Y+54, r24	; 0x36
					LOC_u8Counter++;
    586a:	8a ad       	ldd	r24, Y+58	; 0x3a
    586c:	8f 5f       	subi	r24, 0xFF	; 255
    586e:	8a af       	std	Y+58, r24	; 0x3a
					LOC_u8OperationFlag = 1;
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	8d ab       	std	Y+53, r24	; 0x35
					CLCD_voidSendData('*');
    5874:	8a e2       	ldi	r24, 0x2A	; 42
    5876:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    587a:	43 cc       	rjmp	.-1914   	; 0x5102 <main+0x19c>
				}
				else if (LOC_u8OperationFlag == 1 ){
    587c:	8d a9       	ldd	r24, Y+53	; 0x35
    587e:	81 30       	cpi	r24, 0x01	; 1
    5880:	09 f0       	breq	.+2      	; 0x5884 <main+0x91e>
    5882:	3f cc       	rjmp	.-1922   	; 0x5102 <main+0x19c>
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '*' ;
    5884:	8f a9       	ldd	r24, Y+55	; 0x37
    5886:	88 2f       	mov	r24, r24
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	9c 01       	movw	r18, r24
    588c:	21 50       	subi	r18, 0x01	; 1
    588e:	30 40       	sbci	r19, 0x00	; 0
    5890:	ce 01       	movw	r24, r28
    5892:	82 59       	subi	r24, 0x92	; 146
    5894:	9f 4f       	sbci	r25, 0xFF	; 255
    5896:	fc 01       	movw	r30, r24
    5898:	e2 0f       	add	r30, r18
    589a:	f3 1f       	adc	r31, r19
    589c:	8a e2       	ldi	r24, 0x2A	; 42
    589e:	80 83       	st	Z, r24
					LOC_u8ArrOprationsIndex[LOC_u8ArrOprationsIndexCounter - 1] = LOC_u8OperationCounter  - 1;
    58a0:	88 ad       	ldd	r24, Y+56	; 0x38
    58a2:	88 2f       	mov	r24, r24
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	9c 01       	movw	r18, r24
    58a8:	21 50       	subi	r18, 0x01	; 1
    58aa:	30 40       	sbci	r19, 0x00	; 0
    58ac:	8f a9       	ldd	r24, Y+55	; 0x37
    58ae:	48 2f       	mov	r20, r24
    58b0:	41 50       	subi	r20, 0x01	; 1
    58b2:	ce 01       	movw	r24, r28
    58b4:	88 58       	subi	r24, 0x88	; 136
    58b6:	9f 4f       	sbci	r25, 0xFF	; 255
    58b8:	fc 01       	movw	r30, r24
    58ba:	e2 0f       	add	r30, r18
    58bc:	f3 1f       	adc	r31, r19
    58be:	40 83       	st	Z, r20
					CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter);
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	6a ad       	ldd	r22, Y+58	; 0x3a
    58c4:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
					CLCD_voidSendData('*');
    58c8:	8a e2       	ldi	r24, 0x2A	; 42
    58ca:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    58ce:	19 cc       	rjmp	.-1998   	; 0x5102 <main+0x19c>
				}
				break;

			case '/':
				if(LOC_u8OperationFlag != 1 && LOC_u8ArrOperandsLength[LOC_u8OperandCounter] != 0)
    58d0:	8d a9       	ldd	r24, Y+53	; 0x35
    58d2:	81 30       	cpi	r24, 0x01	; 1
    58d4:	a1 f1       	breq	.+104    	; 0x593e <main+0x9d8>
    58d6:	8e a9       	ldd	r24, Y+54	; 0x36
    58d8:	28 2f       	mov	r18, r24
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	ce 01       	movw	r24, r28
    58de:	8c 59       	subi	r24, 0x9C	; 156
    58e0:	9f 4f       	sbci	r25, 0xFF	; 255
    58e2:	fc 01       	movw	r30, r24
    58e4:	e2 0f       	add	r30, r18
    58e6:	f3 1f       	adc	r31, r19
    58e8:	80 81       	ld	r24, Z
    58ea:	88 23       	and	r24, r24
    58ec:	41 f1       	breq	.+80     	; 0x593e <main+0x9d8>
				{
					LOC_u8ArrOperations[LOC_u8OperationCounter] = '/' ;
    58ee:	8f a9       	ldd	r24, Y+55	; 0x37
    58f0:	28 2f       	mov	r18, r24
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	ce 01       	movw	r24, r28
    58f6:	82 59       	subi	r24, 0x92	; 146
    58f8:	9f 4f       	sbci	r25, 0xFF	; 255
    58fa:	fc 01       	movw	r30, r24
    58fc:	e2 0f       	add	r30, r18
    58fe:	f3 1f       	adc	r31, r19
    5900:	8f e2       	ldi	r24, 0x2F	; 47
    5902:	80 83       	st	Z, r24
					LOC_u8ArrOprationsIndex[LOC_u8ArrOprationsIndexCounter] = LOC_u8OperationCounter;
    5904:	88 ad       	ldd	r24, Y+56	; 0x38
    5906:	28 2f       	mov	r18, r24
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	ce 01       	movw	r24, r28
    590c:	88 58       	subi	r24, 0x88	; 136
    590e:	9f 4f       	sbci	r25, 0xFF	; 255
    5910:	fc 01       	movw	r30, r24
    5912:	e2 0f       	add	r30, r18
    5914:	f3 1f       	adc	r31, r19
    5916:	8f a9       	ldd	r24, Y+55	; 0x37
    5918:	80 83       	st	Z, r24
					LOC_u8ArrOprationsIndexCounter++;
    591a:	88 ad       	ldd	r24, Y+56	; 0x38
    591c:	8f 5f       	subi	r24, 0xFF	; 255
    591e:	88 af       	std	Y+56, r24	; 0x38
					LOC_u8OperationCounter++;
    5920:	8f a9       	ldd	r24, Y+55	; 0x37
    5922:	8f 5f       	subi	r24, 0xFF	; 255
    5924:	8f ab       	std	Y+55, r24	; 0x37
					LOC_u8OperandCounter++;
    5926:	8e a9       	ldd	r24, Y+54	; 0x36
    5928:	8f 5f       	subi	r24, 0xFF	; 255
    592a:	8e ab       	std	Y+54, r24	; 0x36
					LOC_u8OperationFlag = 1;
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	8d ab       	std	Y+53, r24	; 0x35
					LOC_u8Counter++;
    5930:	8a ad       	ldd	r24, Y+58	; 0x3a
    5932:	8f 5f       	subi	r24, 0xFF	; 255
    5934:	8a af       	std	Y+58, r24	; 0x3a
					CLCD_voidSendData('/');
    5936:	8f e2       	ldi	r24, 0x2F	; 47
    5938:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    593c:	e2 cb       	rjmp	.-2108   	; 0x5102 <main+0x19c>
				}
				else if (LOC_u8OperationFlag == 1 ){
    593e:	8d a9       	ldd	r24, Y+53	; 0x35
    5940:	81 30       	cpi	r24, 0x01	; 1
    5942:	09 f0       	breq	.+2      	; 0x5946 <main+0x9e0>
    5944:	de cb       	rjmp	.-2116   	; 0x5102 <main+0x19c>
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '/' ;
    5946:	8f a9       	ldd	r24, Y+55	; 0x37
    5948:	88 2f       	mov	r24, r24
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	9c 01       	movw	r18, r24
    594e:	21 50       	subi	r18, 0x01	; 1
    5950:	30 40       	sbci	r19, 0x00	; 0
    5952:	ce 01       	movw	r24, r28
    5954:	82 59       	subi	r24, 0x92	; 146
    5956:	9f 4f       	sbci	r25, 0xFF	; 255
    5958:	fc 01       	movw	r30, r24
    595a:	e2 0f       	add	r30, r18
    595c:	f3 1f       	adc	r31, r19
    595e:	8f e2       	ldi	r24, 0x2F	; 47
    5960:	80 83       	st	Z, r24
					LOC_u8ArrOprationsIndex[LOC_u8ArrOprationsIndexCounter - 1] = LOC_u8OperationCounter  - 1;
    5962:	88 ad       	ldd	r24, Y+56	; 0x38
    5964:	88 2f       	mov	r24, r24
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	9c 01       	movw	r18, r24
    596a:	21 50       	subi	r18, 0x01	; 1
    596c:	30 40       	sbci	r19, 0x00	; 0
    596e:	8f a9       	ldd	r24, Y+55	; 0x37
    5970:	48 2f       	mov	r20, r24
    5972:	41 50       	subi	r20, 0x01	; 1
    5974:	ce 01       	movw	r24, r28
    5976:	88 58       	subi	r24, 0x88	; 136
    5978:	9f 4f       	sbci	r25, 0xFF	; 255
    597a:	fc 01       	movw	r30, r24
    597c:	e2 0f       	add	r30, r18
    597e:	f3 1f       	adc	r31, r19
    5980:	40 83       	st	Z, r20
					CLCD_voidSendPostion(CLCD_ROW_1 , LOC_u8Counter);
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	6a ad       	ldd	r22, Y+58	; 0x3a
    5986:	0e 94 d7 26 	call	0x4dae	; 0x4dae <CLCD_voidSendPostion>
					CLCD_voidSendData('/');
    598a:	8f e2       	ldi	r24, 0x2F	; 47
    598c:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    5990:	b8 cb       	rjmp	.-2192   	; 0x5102 <main+0x19c>
				}
				break;

			default:
				LOC_u8OperationFlag = 0;
    5992:	1d aa       	std	Y+53, r1	; 0x35
				LOC_u8Counter++;
    5994:	8a ad       	ldd	r24, Y+58	; 0x3a
    5996:	8f 5f       	subi	r24, 0xFF	; 255
    5998:	8a af       	std	Y+58, r24	; 0x3a
				if(LOC_u8ArrOperandsLength[LOC_u8OperandCounter] == 0 ){
    599a:	8e a9       	ldd	r24, Y+54	; 0x36
    599c:	28 2f       	mov	r18, r24
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	ce 01       	movw	r24, r28
    59a2:	8c 59       	subi	r24, 0x9C	; 156
    59a4:	9f 4f       	sbci	r25, 0xFF	; 255
    59a6:	fc 01       	movw	r30, r24
    59a8:	e2 0f       	add	r30, r18
    59aa:	f3 1f       	adc	r31, r19
    59ac:	80 81       	ld	r24, Z
    59ae:	88 23       	and	r24, r24
    59b0:	a9 f5       	brne	.+106    	; 0x5a1c <main+0xab6>
					if(LOC_u8ComeData == '0' && LOC_u8OperandCounter == 0 ){
    59b2:	89 ad       	ldd	r24, Y+57	; 0x39
    59b4:	80 33       	cpi	r24, 0x30	; 48
    59b6:	21 f4       	brne	.+8      	; 0x59c0 <main+0xa5a>
    59b8:	8e a9       	ldd	r24, Y+54	; 0x36
    59ba:	88 23       	and	r24, r24
    59bc:	09 f4       	brne	.+2      	; 0x59c0 <main+0xa5a>
    59be:	a1 cb       	rjmp	.-2238   	; 0x5102 <main+0x19c>
						break;
					}
					LOC_u8ArrOperands[LOC_u8OperandCounter] = toInt(LOC_u8ComeData);
    59c0:	8e a9       	ldd	r24, Y+54	; 0x36
    59c2:	08 2f       	mov	r16, r24
    59c4:	10 e0       	ldi	r17, 0x00	; 0
    59c6:	89 ad       	ldd	r24, Y+57	; 0x39
    59c8:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <toInt>
    59cc:	ab 01       	movw	r20, r22
    59ce:	bc 01       	movw	r22, r24
    59d0:	98 01       	movw	r18, r16
    59d2:	22 0f       	add	r18, r18
    59d4:	33 1f       	adc	r19, r19
    59d6:	22 0f       	add	r18, r18
    59d8:	33 1f       	adc	r19, r19
    59da:	ce 01       	movw	r24, r28
    59dc:	01 96       	adiw	r24, 0x01	; 1
    59de:	82 0f       	add	r24, r18
    59e0:	93 1f       	adc	r25, r19
    59e2:	fc 01       	movw	r30, r24
    59e4:	fb 96       	adiw	r30, 0x3b	; 59
    59e6:	40 83       	st	Z, r20
    59e8:	51 83       	std	Z+1, r21	; 0x01
    59ea:	62 83       	std	Z+2, r22	; 0x02
    59ec:	73 83       	std	Z+3, r23	; 0x03
					LOC_u8ArrOperandsLength[LOC_u8OperandCounter]++;
    59ee:	8e a9       	ldd	r24, Y+54	; 0x36
    59f0:	28 2f       	mov	r18, r24
    59f2:	30 e0       	ldi	r19, 0x00	; 0
    59f4:	ce 01       	movw	r24, r28
    59f6:	8c 59       	subi	r24, 0x9C	; 156
    59f8:	9f 4f       	sbci	r25, 0xFF	; 255
    59fa:	fc 01       	movw	r30, r24
    59fc:	e2 0f       	add	r30, r18
    59fe:	f3 1f       	adc	r31, r19
    5a00:	80 81       	ld	r24, Z
    5a02:	48 2f       	mov	r20, r24
    5a04:	4f 5f       	subi	r20, 0xFF	; 255
    5a06:	ce 01       	movw	r24, r28
    5a08:	8c 59       	subi	r24, 0x9C	; 156
    5a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0c:	fc 01       	movw	r30, r24
    5a0e:	e2 0f       	add	r30, r18
    5a10:	f3 1f       	adc	r31, r19
    5a12:	40 83       	st	Z, r20
					CLCD_voidSendData(LOC_u8ComeData);
    5a14:	89 ad       	ldd	r24, Y+57	; 0x39
    5a16:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <CLCD_voidSendData>
    5a1a:	73 cb       	rjmp	.-2330   	; 0x5102 <main+0x19c>
				}
				else{

					LOC_u8ArrOperands[LOC_u8OperandCounter] = LOC_u8ArrOperands[LOC_u8OperandCounter] * 10 + ( f32) toInt(LOC_u8ComeData);
    5a1c:	8e a9       	ldd	r24, Y+54	; 0x36
    5a1e:	c8 2e       	mov	r12, r24
    5a20:	dd 24       	eor	r13, r13
    5a22:	8e a9       	ldd	r24, Y+54	; 0x36
    5a24:	88 2f       	mov	r24, r24
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	9c 01       	movw	r18, r24
    5a2a:	22 0f       	add	r18, r18
    5a2c:	33 1f       	adc	r19, r19
    5a2e:	22 0f       	add	r18, r18
    5a30:	33 1f       	adc	r19, r19
    5a32:	ce 01       	movw	r24, r28
    5a34:	01 96       	adiw	r24, 0x01	; 1
    5a36:	82 0f       	add	r24, r18
    5a38:	93 1f       	adc	r25, r19
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	fb 96       	adiw	r30, 0x3b	; 59
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	a2 81       	ldd	r26, Z+2	; 0x02
    5a44:	b3 81       	ldd	r27, Z+3	; 0x03
    5a46:	bc 01       	movw	r22, r24
    5a48:	cd 01       	movw	r24, r26
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	40 e2       	ldi	r20, 0x20	; 32
    5a50:	51 e4       	ldi	r21, 0x41	; 65
    5a52:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	7c 01       	movw	r14, r24
    5a5c:	8d 01       	movw	r16, r26
    5a5e:	89 ad       	ldd	r24, Y+57	; 0x39
    5a60:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <toInt>
    5a64:	9b 01       	movw	r18, r22
    5a66:	ac 01       	movw	r20, r24
    5a68:	c8 01       	movw	r24, r16
    5a6a:	b7 01       	movw	r22, r14
    5a6c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__addsf3>
    5a70:	dc 01       	movw	r26, r24
    5a72:	cb 01       	movw	r24, r22
    5a74:	ac 01       	movw	r20, r24
    5a76:	bd 01       	movw	r22, r26
    5a78:	96 01       	movw	r18, r12
    5a7a:	22 0f       	add	r18, r18
    5a7c:	33 1f       	adc	r19, r19
    5a7e:	22 0f       	add	r18, r18
    5a80:	33 1f       	adc	r19, r19
    5a82:	ce 01       	movw	r24, r28
    5a84:	01 96       	adiw	r24, 0x01	; 1
    5a86:	82 0f       	add	r24, r18
    5a88:	93 1f       	adc	r25, r19
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	fb 96       	adiw	r30, 0x3b	; 59
    5a8e:	40 83       	st	Z, r20
    5a90:	51 83       	std	Z+1, r21	; 0x01
    5a92:	62 83       	std	Z+2, r22	; 0x02
    5a94:	73 83       	std	Z+3, r23	; 0x03
					LOC_u8ArrOperandsLength[LOC_u8OperandCounter]++;
    5a96:	8e a9       	ldd	r24, Y+54	; 0x36
    5a98:	28 2f       	mov	r18, r24
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	ce 01       	movw	r24, r28
    5a9e:	8c 59       	subi	r24, 0x9C	; 156
    5aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	e2 0f       	add	r30, r18
    5aa6:	f3 1f       	adc	r31, r19
    5aa8:	80 81       	ld	r24, Z
    5aaa:	48 2f       	mov	r20, r24
    5aac:	4f 5f       	subi	r20, 0xFF	; 255
    5aae:	ce 01       	movw	r24, r28
    5ab0:	8c 59       	subi	r24, 0x9C	; 156
    5ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	e2 0f       	add	r30, r18
    5ab8:	f3 1f       	adc	r31, r19
    5aba:	40 83       	st	Z, r20
					if(LOC_u8ComeData == '0' )
    5abc:	89 ad       	ldd	r24, Y+57	; 0x39
    5abe:	80 33       	cpi	r24, 0x30	; 48
    5ac0:	29 f4       	brne	.+10     	; 0x5acc <main+0xb66>
						CLCD_voidSendString((u8 *) "0");
    5ac2:	8d e8       	ldi	r24, 0x8D	; 141
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CLCD_voidSendString>
    5aca:	1b cb       	rjmp	.-2506   	; 0x5102 <main+0x19c>
					else
						CLCD_voidSendNumber(toInt(LOC_u8ComeData));
    5acc:	89 ad       	ldd	r24, Y+57	; 0x39
    5ace:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <toInt>
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	bc 01       	movw	r22, r24
    5ad8:	cd 01       	movw	r24, r26
    5ada:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixunssfdi>
    5ade:	a2 2e       	mov	r10, r18
    5ae0:	b3 2e       	mov	r11, r19
    5ae2:	c4 2e       	mov	r12, r20
    5ae4:	d5 2e       	mov	r13, r21
    5ae6:	e6 2e       	mov	r14, r22
    5ae8:	f7 2e       	mov	r15, r23
    5aea:	08 2f       	mov	r16, r24
    5aec:	19 2f       	mov	r17, r25
    5aee:	2a 2d       	mov	r18, r10
    5af0:	3b 2d       	mov	r19, r11
    5af2:	4c 2d       	mov	r20, r12
    5af4:	5d 2d       	mov	r21, r13
    5af6:	6e 2d       	mov	r22, r14
    5af8:	7f 2d       	mov	r23, r15
    5afa:	80 2f       	mov	r24, r16
    5afc:	91 2f       	mov	r25, r17
    5afe:	0e 94 9b 22 	call	0x4536	; 0x4536 <CLCD_voidSendNumber>
    5b02:	ff ca       	rjmp	.-2562   	; 0x5102 <main+0x19c>

00005b04 <toInt>:
	return 0;

}


f32 toInt(u8 Copy_u8Ch){
    5b04:	df 93       	push	r29
    5b06:	cf 93       	push	r28
    5b08:	0f 92       	push	r0
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	89 83       	std	Y+1, r24	; 0x01
	return (f32)Copy_u8Ch - '0';
    5b10:	89 81       	ldd	r24, Y+1	; 0x01
    5b12:	88 2f       	mov	r24, r24
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	a0 e0       	ldi	r26, 0x00	; 0
    5b18:	b0 e0       	ldi	r27, 0x00	; 0
    5b1a:	bc 01       	movw	r22, r24
    5b1c:	cd 01       	movw	r24, r26
    5b1e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__floatunsisf>
    5b22:	dc 01       	movw	r26, r24
    5b24:	cb 01       	movw	r24, r22
    5b26:	bc 01       	movw	r22, r24
    5b28:	cd 01       	movw	r24, r26
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	40 e4       	ldi	r20, 0x40	; 64
    5b30:	52 e4       	ldi	r21, 0x42	; 66
    5b32:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    5b36:	dc 01       	movw	r26, r24
    5b38:	cb 01       	movw	r24, r22
}
    5b3a:	bc 01       	movw	r22, r24
    5b3c:	cd 01       	movw	r24, r26
    5b3e:	0f 90       	pop	r0
    5b40:	cf 91       	pop	r28
    5b42:	df 91       	pop	r29
    5b44:	08 95       	ret

00005b46 <clearArray>:


void clearArray(u8 *Copy_ptrArray){
    5b46:	df 93       	push	r29
    5b48:	cf 93       	push	r28
    5b4a:	00 d0       	rcall	.+0      	; 0x5b4c <clearArray+0x6>
    5b4c:	0f 92       	push	r0
    5b4e:	cd b7       	in	r28, 0x3d	; 61
    5b50:	de b7       	in	r29, 0x3e	; 62
    5b52:	9b 83       	std	Y+3, r25	; 0x03
    5b54:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 LOC_u8Iterator = 0 ; LOC_u8Iterator < 10 ; LOC_u8Iterator++){
    5b56:	19 82       	std	Y+1, r1	; 0x01
    5b58:	0c c0       	rjmp	.+24     	; 0x5b72 <clearArray+0x2c>
		Copy_ptrArray[LOC_u8Iterator] = 0;
    5b5a:	89 81       	ldd	r24, Y+1	; 0x01
    5b5c:	28 2f       	mov	r18, r24
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	8a 81       	ldd	r24, Y+2	; 0x02
    5b62:	9b 81       	ldd	r25, Y+3	; 0x03
    5b64:	fc 01       	movw	r30, r24
    5b66:	e2 0f       	add	r30, r18
    5b68:	f3 1f       	adc	r31, r19
    5b6a:	10 82       	st	Z, r1
	return (f32)Copy_u8Ch - '0';
}


void clearArray(u8 *Copy_ptrArray){
	for(u8 LOC_u8Iterator = 0 ; LOC_u8Iterator < 10 ; LOC_u8Iterator++){
    5b6c:	89 81       	ldd	r24, Y+1	; 0x01
    5b6e:	8f 5f       	subi	r24, 0xFF	; 255
    5b70:	89 83       	std	Y+1, r24	; 0x01
    5b72:	89 81       	ldd	r24, Y+1	; 0x01
    5b74:	8a 30       	cpi	r24, 0x0A	; 10
    5b76:	88 f3       	brcs	.-30     	; 0x5b5a <clearArray+0x14>
		Copy_ptrArray[LOC_u8Iterator] = 0;
	}
}
    5b78:	0f 90       	pop	r0
    5b7a:	0f 90       	pop	r0
    5b7c:	0f 90       	pop	r0
    5b7e:	cf 91       	pop	r28
    5b80:	df 91       	pop	r29
    5b82:	08 95       	ret

00005b84 <clearFArray>:
void clearFArray(f32 *Copy_ptrArray){
    5b84:	df 93       	push	r29
    5b86:	cf 93       	push	r28
    5b88:	00 d0       	rcall	.+0      	; 0x5b8a <clearFArray+0x6>
    5b8a:	0f 92       	push	r0
    5b8c:	cd b7       	in	r28, 0x3d	; 61
    5b8e:	de b7       	in	r29, 0x3e	; 62
    5b90:	9b 83       	std	Y+3, r25	; 0x03
    5b92:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 LOC_u8Iterator = 0 ; LOC_u8Iterator < 10 ; LOC_u8Iterator++){
    5b94:	19 82       	std	Y+1, r1	; 0x01
    5b96:	18 c0       	rjmp	.+48     	; 0x5bc8 <clearFArray+0x44>
		Copy_ptrArray[LOC_u8Iterator] = 0;
    5b98:	89 81       	ldd	r24, Y+1	; 0x01
    5b9a:	88 2f       	mov	r24, r24
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	9c 01       	movw	r18, r24
    5ba0:	22 0f       	add	r18, r18
    5ba2:	33 1f       	adc	r19, r19
    5ba4:	22 0f       	add	r18, r18
    5ba6:	33 1f       	adc	r19, r19
    5ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    5baa:	9b 81       	ldd	r25, Y+3	; 0x03
    5bac:	fc 01       	movw	r30, r24
    5bae:	e2 0f       	add	r30, r18
    5bb0:	f3 1f       	adc	r31, r19
    5bb2:	80 e0       	ldi	r24, 0x00	; 0
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	a0 e0       	ldi	r26, 0x00	; 0
    5bb8:	b0 e0       	ldi	r27, 0x00	; 0
    5bba:	80 83       	st	Z, r24
    5bbc:	91 83       	std	Z+1, r25	; 0x01
    5bbe:	a2 83       	std	Z+2, r26	; 0x02
    5bc0:	b3 83       	std	Z+3, r27	; 0x03
	for(u8 LOC_u8Iterator = 0 ; LOC_u8Iterator < 10 ; LOC_u8Iterator++){
		Copy_ptrArray[LOC_u8Iterator] = 0;
	}
}
void clearFArray(f32 *Copy_ptrArray){
	for(u8 LOC_u8Iterator = 0 ; LOC_u8Iterator < 10 ; LOC_u8Iterator++){
    5bc2:	89 81       	ldd	r24, Y+1	; 0x01
    5bc4:	8f 5f       	subi	r24, 0xFF	; 255
    5bc6:	89 83       	std	Y+1, r24	; 0x01
    5bc8:	89 81       	ldd	r24, Y+1	; 0x01
    5bca:	8a 30       	cpi	r24, 0x0A	; 10
    5bcc:	28 f3       	brcs	.-54     	; 0x5b98 <clearFArray+0x14>
		Copy_ptrArray[LOC_u8Iterator] = 0;
	}
}
    5bce:	0f 90       	pop	r0
    5bd0:	0f 90       	pop	r0
    5bd2:	0f 90       	pop	r0
    5bd4:	cf 91       	pop	r28
    5bd6:	df 91       	pop	r29
    5bd8:	08 95       	ret

00005bda <calcDIVandMul>:
DivideByZero calcDIVandMul(f32 *Copy_u8ArrOperend, u8 *Copy_u8ArrOprations, u8 *Copy_u8ArrOprationsIndex)
{
    5bda:	ef 92       	push	r14
    5bdc:	ff 92       	push	r15
    5bde:	0f 93       	push	r16
    5be0:	1f 93       	push	r17
    5be2:	df 93       	push	r29
    5be4:	cf 93       	push	r28
    5be6:	cd b7       	in	r28, 0x3d	; 61
    5be8:	de b7       	in	r29, 0x3e	; 62
    5bea:	63 97       	sbiw	r28, 0x13	; 19
    5bec:	0f b6       	in	r0, 0x3f	; 63
    5bee:	f8 94       	cli
    5bf0:	de bf       	out	0x3e, r29	; 62
    5bf2:	0f be       	out	0x3f, r0	; 63
    5bf4:	cd bf       	out	0x3d, r28	; 61
    5bf6:	9c 87       	std	Y+12, r25	; 0x0c
    5bf8:	8b 87       	std	Y+11, r24	; 0x0b
    5bfa:	7e 87       	std	Y+14, r23	; 0x0e
    5bfc:	6d 87       	std	Y+13, r22	; 0x0d
    5bfe:	58 8b       	std	Y+16, r21	; 0x10
    5c00:	4f 87       	std	Y+15, r20	; 0x0f
	DivideByZero Loc_DivideByZero = Status_Ok;
    5c02:	1a 86       	std	Y+10, r1	; 0x0a
	f32 LOC_u8Res = 0;
    5c04:	80 e0       	ldi	r24, 0x00	; 0
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	a0 e0       	ldi	r26, 0x00	; 0
    5c0a:	b0 e0       	ldi	r27, 0x00	; 0
    5c0c:	8e 83       	std	Y+6, r24	; 0x06
    5c0e:	9f 83       	std	Y+7, r25	; 0x07
    5c10:	a8 87       	std	Y+8, r26	; 0x08
    5c12:	b9 87       	std	Y+9, r27	; 0x09
	u8 index = 0;
    5c14:	1d 82       	std	Y+5, r1	; 0x05
	u8 LOC_u8ShiftCounter = 0;
    5c16:	1c 82       	std	Y+4, r1	; 0x04
	for (u8 i = 0; i < 10; i++)
    5c18:	1b 82       	std	Y+3, r1	; 0x03
    5c1a:	9e c1       	rjmp	.+828    	; 0x5f58 <calcDIVandMul+0x37e>
	{
		index = *(Copy_u8ArrOprationsIndex + i) - LOC_u8ShiftCounter;
    5c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c1e:	28 2f       	mov	r18, r24
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c24:	98 89       	ldd	r25, Y+16	; 0x10
    5c26:	fc 01       	movw	r30, r24
    5c28:	e2 0f       	add	r30, r18
    5c2a:	f3 1f       	adc	r31, r19
    5c2c:	90 81       	ld	r25, Z
    5c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    5c30:	29 2f       	mov	r18, r25
    5c32:	28 1b       	sub	r18, r24
    5c34:	82 2f       	mov	r24, r18
    5c36:	8d 83       	std	Y+5, r24	; 0x05
		switch (*(Copy_u8ArrOprations + index))
    5c38:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3a:	28 2f       	mov	r18, r24
    5c3c:	30 e0       	ldi	r19, 0x00	; 0
    5c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c42:	fc 01       	movw	r30, r24
    5c44:	e2 0f       	add	r30, r18
    5c46:	f3 1f       	adc	r31, r19
    5c48:	80 81       	ld	r24, Z
    5c4a:	e8 2f       	mov	r30, r24
    5c4c:	f0 e0       	ldi	r31, 0x00	; 0
    5c4e:	fb 8b       	std	Y+19, r31	; 0x13
    5c50:	ea 8b       	std	Y+18, r30	; 0x12
    5c52:	2a 89       	ldd	r18, Y+18	; 0x12
    5c54:	3b 89       	ldd	r19, Y+19	; 0x13
    5c56:	2a 32       	cpi	r18, 0x2A	; 42
    5c58:	31 05       	cpc	r19, r1
    5c5a:	39 f0       	breq	.+14     	; 0x5c6a <calcDIVandMul+0x90>
    5c5c:	8a 89       	ldd	r24, Y+18	; 0x12
    5c5e:	9b 89       	ldd	r25, Y+19	; 0x13
    5c60:	8f 32       	cpi	r24, 0x2F	; 47
    5c62:	91 05       	cpc	r25, r1
    5c64:	09 f4       	brne	.+2      	; 0x5c68 <calcDIVandMul+0x8e>
    5c66:	ab c0       	rjmp	.+342    	; 0x5dbe <calcDIVandMul+0x1e4>
    5c68:	74 c1       	rjmp	.+744    	; 0x5f52 <calcDIVandMul+0x378>
		{
		case '*':
			++LOC_u8ShiftCounter;
    5c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    5c6c:	8f 5f       	subi	r24, 0xFF	; 255
    5c6e:	8c 83       	std	Y+4, r24	; 0x04
			LOC_u8Res = *(Copy_u8ArrOperend + index)  *   *(Copy_u8ArrOperend + index + 1);
    5c70:	8d 81       	ldd	r24, Y+5	; 0x05
    5c72:	88 2f       	mov	r24, r24
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	9c 01       	movw	r18, r24
    5c78:	22 0f       	add	r18, r18
    5c7a:	33 1f       	adc	r19, r19
    5c7c:	22 0f       	add	r18, r18
    5c7e:	33 1f       	adc	r19, r19
    5c80:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c82:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c84:	fc 01       	movw	r30, r24
    5c86:	e2 0f       	add	r30, r18
    5c88:	f3 1f       	adc	r31, r19
    5c8a:	e0 80       	ld	r14, Z
    5c8c:	f1 80       	ldd	r15, Z+1	; 0x01
    5c8e:	02 81       	ldd	r16, Z+2	; 0x02
    5c90:	13 81       	ldd	r17, Z+3	; 0x03
    5c92:	8d 81       	ldd	r24, Y+5	; 0x05
    5c94:	88 2f       	mov	r24, r24
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	01 96       	adiw	r24, 0x01	; 1
    5c9a:	9c 01       	movw	r18, r24
    5c9c:	22 0f       	add	r18, r18
    5c9e:	33 1f       	adc	r19, r19
    5ca0:	22 0f       	add	r18, r18
    5ca2:	33 1f       	adc	r19, r19
    5ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ca8:	fc 01       	movw	r30, r24
    5caa:	e2 0f       	add	r30, r18
    5cac:	f3 1f       	adc	r31, r19
    5cae:	20 81       	ld	r18, Z
    5cb0:	31 81       	ldd	r19, Z+1	; 0x01
    5cb2:	42 81       	ldd	r20, Z+2	; 0x02
    5cb4:	53 81       	ldd	r21, Z+3	; 0x03
    5cb6:	c8 01       	movw	r24, r16
    5cb8:	b7 01       	movw	r22, r14
    5cba:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	8e 83       	std	Y+6, r24	; 0x06
    5cc4:	9f 83       	std	Y+7, r25	; 0x07
    5cc6:	a8 87       	std	Y+8, r26	; 0x08
    5cc8:	b9 87       	std	Y+9, r27	; 0x09
			*(Copy_u8ArrOperend + index + 1) = LOC_u8Res;
    5cca:	8d 81       	ldd	r24, Y+5	; 0x05
    5ccc:	88 2f       	mov	r24, r24
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	01 96       	adiw	r24, 0x01	; 1
    5cd2:	9c 01       	movw	r18, r24
    5cd4:	22 0f       	add	r18, r18
    5cd6:	33 1f       	adc	r19, r19
    5cd8:	22 0f       	add	r18, r18
    5cda:	33 1f       	adc	r19, r19
    5cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cde:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	e2 0f       	add	r30, r18
    5ce4:	f3 1f       	adc	r31, r19
    5ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    5cea:	a8 85       	ldd	r26, Y+8	; 0x08
    5cec:	b9 85       	ldd	r27, Y+9	; 0x09
    5cee:	80 83       	st	Z, r24
    5cf0:	91 83       	std	Z+1, r25	; 0x01
    5cf2:	a2 83       	std	Z+2, r26	; 0x02
    5cf4:	b3 83       	std	Z+3, r27	; 0x03
			DIO_enumSetPinDirection(DIO_PORTA,DIO_PIN0, DIO_HIGH);
    5cf6:	80 e0       	ldi	r24, 0x00	; 0
    5cf8:	60 e0       	ldi	r22, 0x00	; 0
    5cfa:	41 e0       	ldi	r20, 0x01	; 1
    5cfc:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
			TOGGEL_BIT(PORTA_REG,DIO_PIN0);
    5d00:	ab e3       	ldi	r26, 0x3B	; 59
    5d02:	b0 e0       	ldi	r27, 0x00	; 0
    5d04:	eb e3       	ldi	r30, 0x3B	; 59
    5d06:	f0 e0       	ldi	r31, 0x00	; 0
    5d08:	90 81       	ld	r25, Z
    5d0a:	81 e0       	ldi	r24, 0x01	; 1
    5d0c:	89 27       	eor	r24, r25
    5d0e:	8c 93       	st	X, r24
			for (u8 z = 0; z < 10; z++)
    5d10:	1a 82       	std	Y+2, r1	; 0x02
    5d12:	50 c0       	rjmp	.+160    	; 0x5db4 <calcDIVandMul+0x1da>
			{
				*(Copy_u8ArrOperend + z + index) = *(Copy_u8ArrOperend + z + index + 1);
    5d14:	8a 81       	ldd	r24, Y+2	; 0x02
    5d16:	28 2f       	mov	r18, r24
    5d18:	30 e0       	ldi	r19, 0x00	; 0
    5d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d1c:	88 2f       	mov	r24, r24
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	82 0f       	add	r24, r18
    5d22:	93 1f       	adc	r25, r19
    5d24:	9c 01       	movw	r18, r24
    5d26:	22 0f       	add	r18, r18
    5d28:	33 1f       	adc	r19, r19
    5d2a:	22 0f       	add	r18, r18
    5d2c:	33 1f       	adc	r19, r19
    5d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d30:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d32:	ac 01       	movw	r20, r24
    5d34:	42 0f       	add	r20, r18
    5d36:	53 1f       	adc	r21, r19
    5d38:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3a:	28 2f       	mov	r18, r24
    5d3c:	30 e0       	ldi	r19, 0x00	; 0
    5d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d40:	88 2f       	mov	r24, r24
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	82 0f       	add	r24, r18
    5d46:	93 1f       	adc	r25, r19
    5d48:	01 96       	adiw	r24, 0x01	; 1
    5d4a:	9c 01       	movw	r18, r24
    5d4c:	22 0f       	add	r18, r18
    5d4e:	33 1f       	adc	r19, r19
    5d50:	22 0f       	add	r18, r18
    5d52:	33 1f       	adc	r19, r19
    5d54:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d56:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d58:	fc 01       	movw	r30, r24
    5d5a:	e2 0f       	add	r30, r18
    5d5c:	f3 1f       	adc	r31, r19
    5d5e:	80 81       	ld	r24, Z
    5d60:	91 81       	ldd	r25, Z+1	; 0x01
    5d62:	a2 81       	ldd	r26, Z+2	; 0x02
    5d64:	b3 81       	ldd	r27, Z+3	; 0x03
    5d66:	fa 01       	movw	r30, r20
    5d68:	80 83       	st	Z, r24
    5d6a:	91 83       	std	Z+1, r25	; 0x01
    5d6c:	a2 83       	std	Z+2, r26	; 0x02
    5d6e:	b3 83       	std	Z+3, r27	; 0x03
				*(Copy_u8ArrOprations + z + index) = *(Copy_u8ArrOprations + z + index + 1);
    5d70:	8a 81       	ldd	r24, Y+2	; 0x02
    5d72:	28 2f       	mov	r18, r24
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	8d 81       	ldd	r24, Y+5	; 0x05
    5d78:	88 2f       	mov	r24, r24
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	28 0f       	add	r18, r24
    5d7e:	39 1f       	adc	r19, r25
    5d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d84:	dc 01       	movw	r26, r24
    5d86:	a2 0f       	add	r26, r18
    5d88:	b3 1f       	adc	r27, r19
    5d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d8c:	28 2f       	mov	r18, r24
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	8d 81       	ldd	r24, Y+5	; 0x05
    5d92:	88 2f       	mov	r24, r24
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	82 0f       	add	r24, r18
    5d98:	93 1f       	adc	r25, r19
    5d9a:	9c 01       	movw	r18, r24
    5d9c:	2f 5f       	subi	r18, 0xFF	; 255
    5d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5da4:	fc 01       	movw	r30, r24
    5da6:	e2 0f       	add	r30, r18
    5da8:	f3 1f       	adc	r31, r19
    5daa:	80 81       	ld	r24, Z
    5dac:	8c 93       	st	X, r24
			++LOC_u8ShiftCounter;
			LOC_u8Res = *(Copy_u8ArrOperend + index)  *   *(Copy_u8ArrOperend + index + 1);
			*(Copy_u8ArrOperend + index + 1) = LOC_u8Res;
			DIO_enumSetPinDirection(DIO_PORTA,DIO_PIN0, DIO_HIGH);
			TOGGEL_BIT(PORTA_REG,DIO_PIN0);
			for (u8 z = 0; z < 10; z++)
    5dae:	8a 81       	ldd	r24, Y+2	; 0x02
    5db0:	8f 5f       	subi	r24, 0xFF	; 255
    5db2:	8a 83       	std	Y+2, r24	; 0x02
    5db4:	8a 81       	ldd	r24, Y+2	; 0x02
    5db6:	8a 30       	cpi	r24, 0x0A	; 10
    5db8:	08 f4       	brcc	.+2      	; 0x5dbc <calcDIVandMul+0x1e2>
    5dba:	ac cf       	rjmp	.-168    	; 0x5d14 <calcDIVandMul+0x13a>
    5dbc:	ca c0       	rjmp	.+404    	; 0x5f52 <calcDIVandMul+0x378>
				*(Copy_u8ArrOperend + z + index) = *(Copy_u8ArrOperend + z + index + 1);
				*(Copy_u8ArrOprations + z + index) = *(Copy_u8ArrOprations + z + index + 1);
			}
			break;
		case '/':
			if (*(Copy_u8ArrOperend + index + 1) == 0)
    5dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc0:	88 2f       	mov	r24, r24
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	01 96       	adiw	r24, 0x01	; 1
    5dc6:	9c 01       	movw	r18, r24
    5dc8:	22 0f       	add	r18, r18
    5dca:	33 1f       	adc	r19, r19
    5dcc:	22 0f       	add	r18, r18
    5dce:	33 1f       	adc	r19, r19
    5dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	e2 0f       	add	r30, r18
    5dd8:	f3 1f       	adc	r31, r19
    5dda:	80 81       	ld	r24, Z
    5ddc:	91 81       	ldd	r25, Z+1	; 0x01
    5dde:	a2 81       	ldd	r26, Z+2	; 0x02
    5de0:	b3 81       	ldd	r27, Z+3	; 0x03
    5de2:	bc 01       	movw	r22, r24
    5de4:	cd 01       	movw	r24, r26
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	40 e0       	ldi	r20, 0x00	; 0
    5dec:	50 e0       	ldi	r21, 0x00	; 0
    5dee:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__eqsf2>
    5df2:	88 23       	and	r24, r24
    5df4:	29 f4       	brne	.+10     	; 0x5e00 <calcDIVandMul+0x226>
			{
				Loc_DivideByZero = Status_Not_Ok;
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	8a 87       	std	Y+10, r24	; 0x0a
				return Loc_DivideByZero;
    5dfa:	fa 85       	ldd	r31, Y+10	; 0x0a
    5dfc:	f9 8b       	std	Y+17, r31	; 0x11
    5dfe:	b2 c0       	rjmp	.+356    	; 0x5f64 <calcDIVandMul+0x38a>
			}
			else
			{
				++LOC_u8ShiftCounter;
    5e00:	8c 81       	ldd	r24, Y+4	; 0x04
    5e02:	8f 5f       	subi	r24, 0xFF	; 255
    5e04:	8c 83       	std	Y+4, r24	; 0x04
				LOC_u8Res = (f32)(*(Copy_u8ArrOperend + index) / (f32) * (Copy_u8ArrOperend + index + 1));
    5e06:	8d 81       	ldd	r24, Y+5	; 0x05
    5e08:	88 2f       	mov	r24, r24
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	9c 01       	movw	r18, r24
    5e0e:	22 0f       	add	r18, r18
    5e10:	33 1f       	adc	r19, r19
    5e12:	22 0f       	add	r18, r18
    5e14:	33 1f       	adc	r19, r19
    5e16:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e18:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	e2 0f       	add	r30, r18
    5e1e:	f3 1f       	adc	r31, r19
    5e20:	e0 80       	ld	r14, Z
    5e22:	f1 80       	ldd	r15, Z+1	; 0x01
    5e24:	02 81       	ldd	r16, Z+2	; 0x02
    5e26:	13 81       	ldd	r17, Z+3	; 0x03
    5e28:	8d 81       	ldd	r24, Y+5	; 0x05
    5e2a:	88 2f       	mov	r24, r24
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	01 96       	adiw	r24, 0x01	; 1
    5e30:	9c 01       	movw	r18, r24
    5e32:	22 0f       	add	r18, r18
    5e34:	33 1f       	adc	r19, r19
    5e36:	22 0f       	add	r18, r18
    5e38:	33 1f       	adc	r19, r19
    5e3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e3e:	fc 01       	movw	r30, r24
    5e40:	e2 0f       	add	r30, r18
    5e42:	f3 1f       	adc	r31, r19
    5e44:	20 81       	ld	r18, Z
    5e46:	31 81       	ldd	r19, Z+1	; 0x01
    5e48:	42 81       	ldd	r20, Z+2	; 0x02
    5e4a:	53 81       	ldd	r21, Z+3	; 0x03
    5e4c:	c8 01       	movw	r24, r16
    5e4e:	b7 01       	movw	r22, r14
    5e50:	0e 94 25 11 	call	0x224a	; 0x224a <__divsf3>
    5e54:	dc 01       	movw	r26, r24
    5e56:	cb 01       	movw	r24, r22
    5e58:	8e 83       	std	Y+6, r24	; 0x06
    5e5a:	9f 83       	std	Y+7, r25	; 0x07
    5e5c:	a8 87       	std	Y+8, r26	; 0x08
    5e5e:	b9 87       	std	Y+9, r27	; 0x09
				*(Copy_u8ArrOperend + index + 1) = LOC_u8Res;
    5e60:	8d 81       	ldd	r24, Y+5	; 0x05
    5e62:	88 2f       	mov	r24, r24
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	01 96       	adiw	r24, 0x01	; 1
    5e68:	9c 01       	movw	r18, r24
    5e6a:	22 0f       	add	r18, r18
    5e6c:	33 1f       	adc	r19, r19
    5e6e:	22 0f       	add	r18, r18
    5e70:	33 1f       	adc	r19, r19
    5e72:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e74:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e76:	fc 01       	movw	r30, r24
    5e78:	e2 0f       	add	r30, r18
    5e7a:	f3 1f       	adc	r31, r19
    5e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    5e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    5e80:	a8 85       	ldd	r26, Y+8	; 0x08
    5e82:	b9 85       	ldd	r27, Y+9	; 0x09
    5e84:	80 83       	st	Z, r24
    5e86:	91 83       	std	Z+1, r25	; 0x01
    5e88:	a2 83       	std	Z+2, r26	; 0x02
    5e8a:	b3 83       	std	Z+3, r27	; 0x03
				DIO_enumSetPinDirection(DIO_PORTA,DIO_PIN0, DIO_HIGH);
    5e8c:	80 e0       	ldi	r24, 0x00	; 0
    5e8e:	60 e0       	ldi	r22, 0x00	; 0
    5e90:	41 e0       	ldi	r20, 0x01	; 1
    5e92:	0e 94 83 18 	call	0x3106	; 0x3106 <DIO_enumSetPinDirection>
				TOGGEL_BIT(PORTA_REG,DIO_PIN0);
    5e96:	ab e3       	ldi	r26, 0x3B	; 59
    5e98:	b0 e0       	ldi	r27, 0x00	; 0
    5e9a:	eb e3       	ldi	r30, 0x3B	; 59
    5e9c:	f0 e0       	ldi	r31, 0x00	; 0
    5e9e:	90 81       	ld	r25, Z
    5ea0:	81 e0       	ldi	r24, 0x01	; 1
    5ea2:	89 27       	eor	r24, r25
    5ea4:	8c 93       	st	X, r24
				for (u8 z = 0; z < 10; z++)
    5ea6:	19 82       	std	Y+1, r1	; 0x01
    5ea8:	50 c0       	rjmp	.+160    	; 0x5f4a <calcDIVandMul+0x370>
				{
					*(Copy_u8ArrOperend + z + index) = *(Copy_u8ArrOperend + z + index + 1);
    5eaa:	89 81       	ldd	r24, Y+1	; 0x01
    5eac:	28 2f       	mov	r18, r24
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5eb2:	88 2f       	mov	r24, r24
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	82 0f       	add	r24, r18
    5eb8:	93 1f       	adc	r25, r19
    5eba:	9c 01       	movw	r18, r24
    5ebc:	22 0f       	add	r18, r18
    5ebe:	33 1f       	adc	r19, r19
    5ec0:	22 0f       	add	r18, r18
    5ec2:	33 1f       	adc	r19, r19
    5ec4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ec6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ec8:	ac 01       	movw	r20, r24
    5eca:	42 0f       	add	r20, r18
    5ecc:	53 1f       	adc	r21, r19
    5ece:	89 81       	ldd	r24, Y+1	; 0x01
    5ed0:	28 2f       	mov	r18, r24
    5ed2:	30 e0       	ldi	r19, 0x00	; 0
    5ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ed6:	88 2f       	mov	r24, r24
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	82 0f       	add	r24, r18
    5edc:	93 1f       	adc	r25, r19
    5ede:	01 96       	adiw	r24, 0x01	; 1
    5ee0:	9c 01       	movw	r18, r24
    5ee2:	22 0f       	add	r18, r18
    5ee4:	33 1f       	adc	r19, r19
    5ee6:	22 0f       	add	r18, r18
    5ee8:	33 1f       	adc	r19, r19
    5eea:	8b 85       	ldd	r24, Y+11	; 0x0b
    5eec:	9c 85       	ldd	r25, Y+12	; 0x0c
    5eee:	fc 01       	movw	r30, r24
    5ef0:	e2 0f       	add	r30, r18
    5ef2:	f3 1f       	adc	r31, r19
    5ef4:	80 81       	ld	r24, Z
    5ef6:	91 81       	ldd	r25, Z+1	; 0x01
    5ef8:	a2 81       	ldd	r26, Z+2	; 0x02
    5efa:	b3 81       	ldd	r27, Z+3	; 0x03
    5efc:	fa 01       	movw	r30, r20
    5efe:	80 83       	st	Z, r24
    5f00:	91 83       	std	Z+1, r25	; 0x01
    5f02:	a2 83       	std	Z+2, r26	; 0x02
    5f04:	b3 83       	std	Z+3, r27	; 0x03
					*(Copy_u8ArrOprations + z + index) = *(Copy_u8ArrOprations + z + index + 1);
    5f06:	89 81       	ldd	r24, Y+1	; 0x01
    5f08:	28 2f       	mov	r18, r24
    5f0a:	30 e0       	ldi	r19, 0x00	; 0
    5f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f0e:	88 2f       	mov	r24, r24
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	28 0f       	add	r18, r24
    5f14:	39 1f       	adc	r19, r25
    5f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f1a:	dc 01       	movw	r26, r24
    5f1c:	a2 0f       	add	r26, r18
    5f1e:	b3 1f       	adc	r27, r19
    5f20:	89 81       	ldd	r24, Y+1	; 0x01
    5f22:	28 2f       	mov	r18, r24
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	8d 81       	ldd	r24, Y+5	; 0x05
    5f28:	88 2f       	mov	r24, r24
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	82 0f       	add	r24, r18
    5f2e:	93 1f       	adc	r25, r19
    5f30:	9c 01       	movw	r18, r24
    5f32:	2f 5f       	subi	r18, 0xFF	; 255
    5f34:	3f 4f       	sbci	r19, 0xFF	; 255
    5f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	e2 0f       	add	r30, r18
    5f3e:	f3 1f       	adc	r31, r19
    5f40:	80 81       	ld	r24, Z
    5f42:	8c 93       	st	X, r24
				++LOC_u8ShiftCounter;
				LOC_u8Res = (f32)(*(Copy_u8ArrOperend + index) / (f32) * (Copy_u8ArrOperend + index + 1));
				*(Copy_u8ArrOperend + index + 1) = LOC_u8Res;
				DIO_enumSetPinDirection(DIO_PORTA,DIO_PIN0, DIO_HIGH);
				TOGGEL_BIT(PORTA_REG,DIO_PIN0);
				for (u8 z = 0; z < 10; z++)
    5f44:	89 81       	ldd	r24, Y+1	; 0x01
    5f46:	8f 5f       	subi	r24, 0xFF	; 255
    5f48:	89 83       	std	Y+1, r24	; 0x01
    5f4a:	89 81       	ldd	r24, Y+1	; 0x01
    5f4c:	8a 30       	cpi	r24, 0x0A	; 10
    5f4e:	08 f4       	brcc	.+2      	; 0x5f52 <calcDIVandMul+0x378>
    5f50:	ac cf       	rjmp	.-168    	; 0x5eaa <calcDIVandMul+0x2d0>
{
	DivideByZero Loc_DivideByZero = Status_Ok;
	f32 LOC_u8Res = 0;
	u8 index = 0;
	u8 LOC_u8ShiftCounter = 0;
	for (u8 i = 0; i < 10; i++)
    5f52:	8b 81       	ldd	r24, Y+3	; 0x03
    5f54:	8f 5f       	subi	r24, 0xFF	; 255
    5f56:	8b 83       	std	Y+3, r24	; 0x03
    5f58:	8b 81       	ldd	r24, Y+3	; 0x03
    5f5a:	8a 30       	cpi	r24, 0x0A	; 10
    5f5c:	08 f4       	brcc	.+2      	; 0x5f60 <calcDIVandMul+0x386>
    5f5e:	5e ce       	rjmp	.-836    	; 0x5c1c <calcDIVandMul+0x42>
				}
				break;
			}
		}
	}
	return Loc_DivideByZero;
    5f60:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f62:	f9 8b       	std	Y+17, r31	; 0x11
    5f64:	89 89       	ldd	r24, Y+17	; 0x11
}
    5f66:	63 96       	adiw	r28, 0x13	; 19
    5f68:	0f b6       	in	r0, 0x3f	; 63
    5f6a:	f8 94       	cli
    5f6c:	de bf       	out	0x3e, r29	; 62
    5f6e:	0f be       	out	0x3f, r0	; 63
    5f70:	cd bf       	out	0x3d, r28	; 61
    5f72:	cf 91       	pop	r28
    5f74:	df 91       	pop	r29
    5f76:	1f 91       	pop	r17
    5f78:	0f 91       	pop	r16
    5f7a:	ff 90       	pop	r15
    5f7c:	ef 90       	pop	r14
    5f7e:	08 95       	ret

00005f80 <calcADDandSUB>:
f32 calcADDandSUB(f32 *Copy_u8ArrOperend, u8 *Copy_u8ArrOprations, u8 *Copy_u8ArrOprationsIndex)
{
    5f80:	ef 92       	push	r14
    5f82:	ff 92       	push	r15
    5f84:	0f 93       	push	r16
    5f86:	1f 93       	push	r17
    5f88:	df 93       	push	r29
    5f8a:	cf 93       	push	r28
    5f8c:	cd b7       	in	r28, 0x3d	; 61
    5f8e:	de b7       	in	r29, 0x3e	; 62
    5f90:	2d 97       	sbiw	r28, 0x0d	; 13
    5f92:	0f b6       	in	r0, 0x3f	; 63
    5f94:	f8 94       	cli
    5f96:	de bf       	out	0x3e, r29	; 62
    5f98:	0f be       	out	0x3f, r0	; 63
    5f9a:	cd bf       	out	0x3d, r28	; 61
    5f9c:	9f 83       	std	Y+7, r25	; 0x07
    5f9e:	8e 83       	std	Y+6, r24	; 0x06
    5fa0:	79 87       	std	Y+9, r23	; 0x09
    5fa2:	68 87       	std	Y+8, r22	; 0x08
    5fa4:	5b 87       	std	Y+11, r21	; 0x0b
    5fa6:	4a 87       	std	Y+10, r20	; 0x0a
	f32 LOC_u8Res = *(Copy_u8ArrOperend);
    5fa8:	ee 81       	ldd	r30, Y+6	; 0x06
    5faa:	ff 81       	ldd	r31, Y+7	; 0x07
    5fac:	80 81       	ld	r24, Z
    5fae:	91 81       	ldd	r25, Z+1	; 0x01
    5fb0:	a2 81       	ldd	r26, Z+2	; 0x02
    5fb2:	b3 81       	ldd	r27, Z+3	; 0x03
    5fb4:	8a 83       	std	Y+2, r24	; 0x02
    5fb6:	9b 83       	std	Y+3, r25	; 0x03
    5fb8:	ac 83       	std	Y+4, r26	; 0x04
    5fba:	bd 83       	std	Y+5, r27	; 0x05
	u8 i;
	for (i = 0; i < 10; i++)
    5fbc:	19 82       	std	Y+1, r1	; 0x01
    5fbe:	cd c0       	rjmp	.+410    	; 0x615a <calcADDandSUB+0x1da>
	{
		switch (*(Copy_u8ArrOprations + i))
    5fc0:	89 81       	ldd	r24, Y+1	; 0x01
    5fc2:	28 2f       	mov	r18, r24
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	88 85       	ldd	r24, Y+8	; 0x08
    5fc8:	99 85       	ldd	r25, Y+9	; 0x09
    5fca:	fc 01       	movw	r30, r24
    5fcc:	e2 0f       	add	r30, r18
    5fce:	f3 1f       	adc	r31, r19
    5fd0:	80 81       	ld	r24, Z
    5fd2:	28 2f       	mov	r18, r24
    5fd4:	30 e0       	ldi	r19, 0x00	; 0
    5fd6:	3d 87       	std	Y+13, r19	; 0x0d
    5fd8:	2c 87       	std	Y+12, r18	; 0x0c
    5fda:	8c 85       	ldd	r24, Y+12	; 0x0c
    5fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    5fde:	8b 32       	cpi	r24, 0x2B	; 43
    5fe0:	91 05       	cpc	r25, r1
    5fe2:	39 f0       	breq	.+14     	; 0x5ff2 <calcADDandSUB+0x72>
    5fe4:	2c 85       	ldd	r18, Y+12	; 0x0c
    5fe6:	3d 85       	ldd	r19, Y+13	; 0x0d
    5fe8:	2d 32       	cpi	r18, 0x2D	; 45
    5fea:	31 05       	cpc	r19, r1
    5fec:	09 f4       	brne	.+2      	; 0x5ff0 <calcADDandSUB+0x70>
    5fee:	5a c0       	rjmp	.+180    	; 0x60a4 <calcADDandSUB+0x124>
    5ff0:	b1 c0       	rjmp	.+354    	; 0x6154 <calcADDandSUB+0x1d4>
		{
		case '+':
			LOC_u8Res = *(Copy_u8ArrOperend + i) +( * (Copy_u8ArrOperend + i + 1));
    5ff2:	89 81       	ldd	r24, Y+1	; 0x01
    5ff4:	88 2f       	mov	r24, r24
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	9c 01       	movw	r18, r24
    5ffa:	22 0f       	add	r18, r18
    5ffc:	33 1f       	adc	r19, r19
    5ffe:	22 0f       	add	r18, r18
    6000:	33 1f       	adc	r19, r19
    6002:	8e 81       	ldd	r24, Y+6	; 0x06
    6004:	9f 81       	ldd	r25, Y+7	; 0x07
    6006:	fc 01       	movw	r30, r24
    6008:	e2 0f       	add	r30, r18
    600a:	f3 1f       	adc	r31, r19
    600c:	e0 80       	ld	r14, Z
    600e:	f1 80       	ldd	r15, Z+1	; 0x01
    6010:	02 81       	ldd	r16, Z+2	; 0x02
    6012:	13 81       	ldd	r17, Z+3	; 0x03
    6014:	89 81       	ldd	r24, Y+1	; 0x01
    6016:	88 2f       	mov	r24, r24
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	01 96       	adiw	r24, 0x01	; 1
    601c:	9c 01       	movw	r18, r24
    601e:	22 0f       	add	r18, r18
    6020:	33 1f       	adc	r19, r19
    6022:	22 0f       	add	r18, r18
    6024:	33 1f       	adc	r19, r19
    6026:	8e 81       	ldd	r24, Y+6	; 0x06
    6028:	9f 81       	ldd	r25, Y+7	; 0x07
    602a:	fc 01       	movw	r30, r24
    602c:	e2 0f       	add	r30, r18
    602e:	f3 1f       	adc	r31, r19
    6030:	20 81       	ld	r18, Z
    6032:	31 81       	ldd	r19, Z+1	; 0x01
    6034:	42 81       	ldd	r20, Z+2	; 0x02
    6036:	53 81       	ldd	r21, Z+3	; 0x03
    6038:	c8 01       	movw	r24, r16
    603a:	b7 01       	movw	r22, r14
    603c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__addsf3>
    6040:	dc 01       	movw	r26, r24
    6042:	cb 01       	movw	r24, r22
    6044:	8a 83       	std	Y+2, r24	; 0x02
    6046:	9b 83       	std	Y+3, r25	; 0x03
    6048:	ac 83       	std	Y+4, r26	; 0x04
    604a:	bd 83       	std	Y+5, r27	; 0x05
			*(Copy_u8ArrOperend + i) = 0;
    604c:	89 81       	ldd	r24, Y+1	; 0x01
    604e:	88 2f       	mov	r24, r24
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	9c 01       	movw	r18, r24
    6054:	22 0f       	add	r18, r18
    6056:	33 1f       	adc	r19, r19
    6058:	22 0f       	add	r18, r18
    605a:	33 1f       	adc	r19, r19
    605c:	8e 81       	ldd	r24, Y+6	; 0x06
    605e:	9f 81       	ldd	r25, Y+7	; 0x07
    6060:	fc 01       	movw	r30, r24
    6062:	e2 0f       	add	r30, r18
    6064:	f3 1f       	adc	r31, r19
    6066:	80 e0       	ldi	r24, 0x00	; 0
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	a0 e0       	ldi	r26, 0x00	; 0
    606c:	b0 e0       	ldi	r27, 0x00	; 0
    606e:	80 83       	st	Z, r24
    6070:	91 83       	std	Z+1, r25	; 0x01
    6072:	a2 83       	std	Z+2, r26	; 0x02
    6074:	b3 83       	std	Z+3, r27	; 0x03
			*(Copy_u8ArrOperend + i + 1) = LOC_u8Res;
    6076:	89 81       	ldd	r24, Y+1	; 0x01
    6078:	88 2f       	mov	r24, r24
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	01 96       	adiw	r24, 0x01	; 1
    607e:	9c 01       	movw	r18, r24
    6080:	22 0f       	add	r18, r18
    6082:	33 1f       	adc	r19, r19
    6084:	22 0f       	add	r18, r18
    6086:	33 1f       	adc	r19, r19
    6088:	8e 81       	ldd	r24, Y+6	; 0x06
    608a:	9f 81       	ldd	r25, Y+7	; 0x07
    608c:	fc 01       	movw	r30, r24
    608e:	e2 0f       	add	r30, r18
    6090:	f3 1f       	adc	r31, r19
    6092:	8a 81       	ldd	r24, Y+2	; 0x02
    6094:	9b 81       	ldd	r25, Y+3	; 0x03
    6096:	ac 81       	ldd	r26, Y+4	; 0x04
    6098:	bd 81       	ldd	r27, Y+5	; 0x05
    609a:	80 83       	st	Z, r24
    609c:	91 83       	std	Z+1, r25	; 0x01
    609e:	a2 83       	std	Z+2, r26	; 0x02
    60a0:	b3 83       	std	Z+3, r27	; 0x03
    60a2:	58 c0       	rjmp	.+176    	; 0x6154 <calcADDandSUB+0x1d4>
			break;
		case '-':
			LOC_u8Res = *(Copy_u8ArrOperend + i) - ( * (Copy_u8ArrOperend + i + 1));
    60a4:	89 81       	ldd	r24, Y+1	; 0x01
    60a6:	88 2f       	mov	r24, r24
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	9c 01       	movw	r18, r24
    60ac:	22 0f       	add	r18, r18
    60ae:	33 1f       	adc	r19, r19
    60b0:	22 0f       	add	r18, r18
    60b2:	33 1f       	adc	r19, r19
    60b4:	8e 81       	ldd	r24, Y+6	; 0x06
    60b6:	9f 81       	ldd	r25, Y+7	; 0x07
    60b8:	fc 01       	movw	r30, r24
    60ba:	e2 0f       	add	r30, r18
    60bc:	f3 1f       	adc	r31, r19
    60be:	e0 80       	ld	r14, Z
    60c0:	f1 80       	ldd	r15, Z+1	; 0x01
    60c2:	02 81       	ldd	r16, Z+2	; 0x02
    60c4:	13 81       	ldd	r17, Z+3	; 0x03
    60c6:	89 81       	ldd	r24, Y+1	; 0x01
    60c8:	88 2f       	mov	r24, r24
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	01 96       	adiw	r24, 0x01	; 1
    60ce:	9c 01       	movw	r18, r24
    60d0:	22 0f       	add	r18, r18
    60d2:	33 1f       	adc	r19, r19
    60d4:	22 0f       	add	r18, r18
    60d6:	33 1f       	adc	r19, r19
    60d8:	8e 81       	ldd	r24, Y+6	; 0x06
    60da:	9f 81       	ldd	r25, Y+7	; 0x07
    60dc:	fc 01       	movw	r30, r24
    60de:	e2 0f       	add	r30, r18
    60e0:	f3 1f       	adc	r31, r19
    60e2:	20 81       	ld	r18, Z
    60e4:	31 81       	ldd	r19, Z+1	; 0x01
    60e6:	42 81       	ldd	r20, Z+2	; 0x02
    60e8:	53 81       	ldd	r21, Z+3	; 0x03
    60ea:	c8 01       	movw	r24, r16
    60ec:	b7 01       	movw	r22, r14
    60ee:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    60f2:	dc 01       	movw	r26, r24
    60f4:	cb 01       	movw	r24, r22
    60f6:	8a 83       	std	Y+2, r24	; 0x02
    60f8:	9b 83       	std	Y+3, r25	; 0x03
    60fa:	ac 83       	std	Y+4, r26	; 0x04
    60fc:	bd 83       	std	Y+5, r27	; 0x05
			*(Copy_u8ArrOperend + i) = 0;
    60fe:	89 81       	ldd	r24, Y+1	; 0x01
    6100:	88 2f       	mov	r24, r24
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	9c 01       	movw	r18, r24
    6106:	22 0f       	add	r18, r18
    6108:	33 1f       	adc	r19, r19
    610a:	22 0f       	add	r18, r18
    610c:	33 1f       	adc	r19, r19
    610e:	8e 81       	ldd	r24, Y+6	; 0x06
    6110:	9f 81       	ldd	r25, Y+7	; 0x07
    6112:	fc 01       	movw	r30, r24
    6114:	e2 0f       	add	r30, r18
    6116:	f3 1f       	adc	r31, r19
    6118:	80 e0       	ldi	r24, 0x00	; 0
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	a0 e0       	ldi	r26, 0x00	; 0
    611e:	b0 e0       	ldi	r27, 0x00	; 0
    6120:	80 83       	st	Z, r24
    6122:	91 83       	std	Z+1, r25	; 0x01
    6124:	a2 83       	std	Z+2, r26	; 0x02
    6126:	b3 83       	std	Z+3, r27	; 0x03
			*(Copy_u8ArrOperend + i + 1) = LOC_u8Res;
    6128:	89 81       	ldd	r24, Y+1	; 0x01
    612a:	88 2f       	mov	r24, r24
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	01 96       	adiw	r24, 0x01	; 1
    6130:	9c 01       	movw	r18, r24
    6132:	22 0f       	add	r18, r18
    6134:	33 1f       	adc	r19, r19
    6136:	22 0f       	add	r18, r18
    6138:	33 1f       	adc	r19, r19
    613a:	8e 81       	ldd	r24, Y+6	; 0x06
    613c:	9f 81       	ldd	r25, Y+7	; 0x07
    613e:	fc 01       	movw	r30, r24
    6140:	e2 0f       	add	r30, r18
    6142:	f3 1f       	adc	r31, r19
    6144:	8a 81       	ldd	r24, Y+2	; 0x02
    6146:	9b 81       	ldd	r25, Y+3	; 0x03
    6148:	ac 81       	ldd	r26, Y+4	; 0x04
    614a:	bd 81       	ldd	r27, Y+5	; 0x05
    614c:	80 83       	st	Z, r24
    614e:	91 83       	std	Z+1, r25	; 0x01
    6150:	a2 83       	std	Z+2, r26	; 0x02
    6152:	b3 83       	std	Z+3, r27	; 0x03
}
f32 calcADDandSUB(f32 *Copy_u8ArrOperend, u8 *Copy_u8ArrOprations, u8 *Copy_u8ArrOprationsIndex)
{
	f32 LOC_u8Res = *(Copy_u8ArrOperend);
	u8 i;
	for (i = 0; i < 10; i++)
    6154:	89 81       	ldd	r24, Y+1	; 0x01
    6156:	8f 5f       	subi	r24, 0xFF	; 255
    6158:	89 83       	std	Y+1, r24	; 0x01
    615a:	89 81       	ldd	r24, Y+1	; 0x01
    615c:	8a 30       	cpi	r24, 0x0A	; 10
    615e:	08 f4       	brcc	.+2      	; 0x6162 <calcADDandSUB+0x1e2>
    6160:	2f cf       	rjmp	.-418    	; 0x5fc0 <calcADDandSUB+0x40>
			*(Copy_u8ArrOperend + i) = 0;
			*(Copy_u8ArrOperend + i + 1) = LOC_u8Res;
			break;
		}
	}
	return LOC_u8Res;
    6162:	8a 81       	ldd	r24, Y+2	; 0x02
    6164:	9b 81       	ldd	r25, Y+3	; 0x03
    6166:	ac 81       	ldd	r26, Y+4	; 0x04
    6168:	bd 81       	ldd	r27, Y+5	; 0x05
}
    616a:	bc 01       	movw	r22, r24
    616c:	cd 01       	movw	r24, r26
    616e:	2d 96       	adiw	r28, 0x0d	; 13
    6170:	0f b6       	in	r0, 0x3f	; 63
    6172:	f8 94       	cli
    6174:	de bf       	out	0x3e, r29	; 62
    6176:	0f be       	out	0x3f, r0	; 63
    6178:	cd bf       	out	0x3d, r28	; 61
    617a:	cf 91       	pop	r28
    617c:	df 91       	pop	r29
    617e:	1f 91       	pop	r17
    6180:	0f 91       	pop	r16
    6182:	ff 90       	pop	r15
    6184:	ef 90       	pop	r14
    6186:	08 95       	ret

00006188 <__udivmodsi4>:
    6188:	a1 e2       	ldi	r26, 0x21	; 33
    618a:	1a 2e       	mov	r1, r26
    618c:	aa 1b       	sub	r26, r26
    618e:	bb 1b       	sub	r27, r27
    6190:	fd 01       	movw	r30, r26
    6192:	0d c0       	rjmp	.+26     	; 0x61ae <__udivmodsi4_ep>

00006194 <__udivmodsi4_loop>:
    6194:	aa 1f       	adc	r26, r26
    6196:	bb 1f       	adc	r27, r27
    6198:	ee 1f       	adc	r30, r30
    619a:	ff 1f       	adc	r31, r31
    619c:	a2 17       	cp	r26, r18
    619e:	b3 07       	cpc	r27, r19
    61a0:	e4 07       	cpc	r30, r20
    61a2:	f5 07       	cpc	r31, r21
    61a4:	20 f0       	brcs	.+8      	; 0x61ae <__udivmodsi4_ep>
    61a6:	a2 1b       	sub	r26, r18
    61a8:	b3 0b       	sbc	r27, r19
    61aa:	e4 0b       	sbc	r30, r20
    61ac:	f5 0b       	sbc	r31, r21

000061ae <__udivmodsi4_ep>:
    61ae:	66 1f       	adc	r22, r22
    61b0:	77 1f       	adc	r23, r23
    61b2:	88 1f       	adc	r24, r24
    61b4:	99 1f       	adc	r25, r25
    61b6:	1a 94       	dec	r1
    61b8:	69 f7       	brne	.-38     	; 0x6194 <__udivmodsi4_loop>
    61ba:	60 95       	com	r22
    61bc:	70 95       	com	r23
    61be:	80 95       	com	r24
    61c0:	90 95       	com	r25
    61c2:	9b 01       	movw	r18, r22
    61c4:	ac 01       	movw	r20, r24
    61c6:	bd 01       	movw	r22, r26
    61c8:	cf 01       	movw	r24, r30
    61ca:	08 95       	ret

000061cc <__mulsi3>:
    61cc:	62 9f       	mul	r22, r18
    61ce:	d0 01       	movw	r26, r0
    61d0:	73 9f       	mul	r23, r19
    61d2:	f0 01       	movw	r30, r0
    61d4:	82 9f       	mul	r24, r18
    61d6:	e0 0d       	add	r30, r0
    61d8:	f1 1d       	adc	r31, r1
    61da:	64 9f       	mul	r22, r20
    61dc:	e0 0d       	add	r30, r0
    61de:	f1 1d       	adc	r31, r1
    61e0:	92 9f       	mul	r25, r18
    61e2:	f0 0d       	add	r31, r0
    61e4:	83 9f       	mul	r24, r19
    61e6:	f0 0d       	add	r31, r0
    61e8:	74 9f       	mul	r23, r20
    61ea:	f0 0d       	add	r31, r0
    61ec:	65 9f       	mul	r22, r21
    61ee:	f0 0d       	add	r31, r0
    61f0:	99 27       	eor	r25, r25
    61f2:	72 9f       	mul	r23, r18
    61f4:	b0 0d       	add	r27, r0
    61f6:	e1 1d       	adc	r30, r1
    61f8:	f9 1f       	adc	r31, r25
    61fa:	63 9f       	mul	r22, r19
    61fc:	b0 0d       	add	r27, r0
    61fe:	e1 1d       	adc	r30, r1
    6200:	f9 1f       	adc	r31, r25
    6202:	bd 01       	movw	r22, r26
    6204:	cf 01       	movw	r24, r30
    6206:	11 24       	eor	r1, r1
    6208:	08 95       	ret

0000620a <__prologue_saves__>:
    620a:	2f 92       	push	r2
    620c:	3f 92       	push	r3
    620e:	4f 92       	push	r4
    6210:	5f 92       	push	r5
    6212:	6f 92       	push	r6
    6214:	7f 92       	push	r7
    6216:	8f 92       	push	r8
    6218:	9f 92       	push	r9
    621a:	af 92       	push	r10
    621c:	bf 92       	push	r11
    621e:	cf 92       	push	r12
    6220:	df 92       	push	r13
    6222:	ef 92       	push	r14
    6224:	ff 92       	push	r15
    6226:	0f 93       	push	r16
    6228:	1f 93       	push	r17
    622a:	cf 93       	push	r28
    622c:	df 93       	push	r29
    622e:	cd b7       	in	r28, 0x3d	; 61
    6230:	de b7       	in	r29, 0x3e	; 62
    6232:	ca 1b       	sub	r28, r26
    6234:	db 0b       	sbc	r29, r27
    6236:	0f b6       	in	r0, 0x3f	; 63
    6238:	f8 94       	cli
    623a:	de bf       	out	0x3e, r29	; 62
    623c:	0f be       	out	0x3f, r0	; 63
    623e:	cd bf       	out	0x3d, r28	; 61
    6240:	09 94       	ijmp

00006242 <__epilogue_restores__>:
    6242:	2a 88       	ldd	r2, Y+18	; 0x12
    6244:	39 88       	ldd	r3, Y+17	; 0x11
    6246:	48 88       	ldd	r4, Y+16	; 0x10
    6248:	5f 84       	ldd	r5, Y+15	; 0x0f
    624a:	6e 84       	ldd	r6, Y+14	; 0x0e
    624c:	7d 84       	ldd	r7, Y+13	; 0x0d
    624e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6250:	9b 84       	ldd	r9, Y+11	; 0x0b
    6252:	aa 84       	ldd	r10, Y+10	; 0x0a
    6254:	b9 84       	ldd	r11, Y+9	; 0x09
    6256:	c8 84       	ldd	r12, Y+8	; 0x08
    6258:	df 80       	ldd	r13, Y+7	; 0x07
    625a:	ee 80       	ldd	r14, Y+6	; 0x06
    625c:	fd 80       	ldd	r15, Y+5	; 0x05
    625e:	0c 81       	ldd	r16, Y+4	; 0x04
    6260:	1b 81       	ldd	r17, Y+3	; 0x03
    6262:	aa 81       	ldd	r26, Y+2	; 0x02
    6264:	b9 81       	ldd	r27, Y+1	; 0x01
    6266:	ce 0f       	add	r28, r30
    6268:	d1 1d       	adc	r29, r1
    626a:	0f b6       	in	r0, 0x3f	; 63
    626c:	f8 94       	cli
    626e:	de bf       	out	0x3e, r29	; 62
    6270:	0f be       	out	0x3f, r0	; 63
    6272:	cd bf       	out	0x3d, r28	; 61
    6274:	ed 01       	movw	r28, r26
    6276:	08 95       	ret

00006278 <_exit>:
    6278:	f8 94       	cli

0000627a <__stop_program>:
    627a:	ff cf       	rjmp	.-2      	; 0x627a <__stop_program>
