/*
 * main.c
 *
 */

#include "Services/BIT_MATHS.h"
#include "Services/STD_TYPES.h"
#include "util/delay.h"
#include "MCAL/1-DIO/DIO_interface.h"
#include "HAL/4-LCD/CLCD_interface.h"
#include "HAL/5-KEYPAD/KPD_interface.h"

typedef enum
{

    Status_Ok,
    Status_Not_Ok

} DivideByZero;
DivideByZero calcDIVandMul(f32 *Copy_u8ArrOperend, u8 *LOC_u8ArrOprations, u8 *LOC_u8ArrOprationsIndex);
f32 calcADDandSUB(f32 *Copy_u8ArrOperend, u8 *Copy_u8ArrOprations, u8 *Copy_u8ArrOprationsIndex);
u8 toInt(u8 Copy_u8Ch);
void clearArray(u8 *Copy_ptrArray);

int main(void) {
	CLCD_voidInit();
	Keypad_voidInit();
	u8 LOC_u8Iterator = 0;
	u8 LOC_u8Counter = 0;
	u8 LOC_u8ComeData = 0;
	u8 LOC_u8ArrOperations[10] 	  		   = { 0 };
	u8 LOC_u8ArrOperands[10] 	   		   = { 0 };
	u8 LOC_u8ArrOperandsLength[10] 		   = { 0 };
	u8 LOC_u8ArrOprationsIndex[10] = {0};
	u8 LOC_u8OperationCounter = 0;
	u8 LOC_u8OperationFlag	=	0;
	u8 LOC_u8DivideByZeroFlag	= 0 ;
	s32 LOC_s32Result 		=	0;
	CLCD_voidSendPostion(CLCD_ROW_1,CLCD_Column_1);
	CLCD_voidSendString((u8 *) "Calculator V0.0!");
	_delay_ms(2000);
	CLCD_voidClearDisplay();
	while (1) {
		LOC_u8ComeData = Keypad_u8GetPressed();
		if (LOC_u8ComeData != 0) {
			switch(LOC_u8ComeData){
			case 'E':
				break;
							case 'C':
				CLCD_voidClearDisplay();
				LOC_u8Iterator = 0;
				LOC_u8Counter = 0;
				LOC_u8ComeData = 0;
				clearArray(LOC_u8ArrOperations);
				clearArray(LOC_u8ArrOperands);
				clearArray(LOC_u8ArrOperandsLength);
				LOC_u8OperationCounter = 0;
				LOC_u8OperationFlag	=	0;
				LOC_u8DivideByZeroFlag	= 0;
				LOC_s32Result 		=	0;
				break;

			case '+':
				if(LOC_u8OperationFlag != 1){
				LOC_u8ArrOperations[LOC_u8OperationCounter] = '+' ;
				LOC_u8OperationCounter++;
				LOC_u8Counter++;
				LOC_u8OperationFlag = 1;
				CLCD_voidSendData('+');
				}
				else{
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '+' ;
					CLCD_voidSetPosition(CLCD_ROW_1 , LOC_u8Counter);
					CLCD_voidSendData('+');

				}
				break;

			case '-':
				if(LOC_u8OperationFlag != 1){
				LOC_u8ArrOperations[LOC_u8OperationCounter] = '-' ;
				LOC_u8OperationCounter++;
				LOC_u8OperationFlag = 1;
				LOC_u8Counter++;
				CLCD_voidSendData('-');
				}
				else{
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '-' ;
					CLCD_voidSetPosition(CLCD_ROW_1 , LOC_u8Counter);
					CLCD_voidSendData('-');
				}
				break;

			case '*':
				if(LOC_u8OperationFlag != 1){
				LOC_u8ArrOperations[LOC_u8OperationCounter] = '*' ;
				LOC_u8OperationCounter++;
				LOC_u8OperationFlag = 1;
				LOC_u8Counter++;
				CLCD_voidSendData('*');

				}
				else{
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '*' ;
					CLCD_voidSetPosition(CLCD_ROW_1 , LOC_u8Counter);
					CLCD_voidSendData('*');
				}
				break;

			case '/':
				if(LOC_u8OperationFlag != 1){
				LOC_u8ArrOperations[LOC_u8OperationCounter] = '/' ;
				LOC_u8OperationCounter++;
				LOC_u8OperationFlag = 1;
				LOC_u8Counter++;
				CLCD_voidSendData('/');
				}
				else{
					LOC_u8ArrOperations[LOC_u8OperationCounter - 1] = '/' ;
					CLCD_voidSetPosition(CLCD_ROW_1 , LOC_u8Counter);
					CLCD_voidSendData('/');
				}
				break;

			default:
				LOC_u8OperationFlag = 0;
				LOC_u8Counter++;
				CLCD_voidSendData(LOC_u8ComeData);
				if(LOC_u8ArrOperandsLength[LOC_u8OperationCounter] == 0){
					LOC_u8ArrOperands[LOC_u8OperationCounter] = toInt(LOC_u8ComeData);
					LOC_u8ArrOperandsLength[LOC_u8OperationCounter]++;
				}
				else{
					LOC_u8ArrOperands[LOC_u8OperationCounter] = LOC_u8ArrOperands[LOC_u8OperationCounter] * 10 +  toInt(LOC_u8ComeData);
					LOC_u8ArrOperandsLength[LOC_u8OperationCounter]++;
				}
				break;

			}
		}
	}
	return 0;

}


u8 toInt(u8 Copy_u8Ch){
	return Copy_u8Ch - '0';
}


void clearArray(u8 *Copy_ptrArray){
	for(u8 LOC_u8Iterator = 0 ; LOC_u8Iterator < 10 ; LOC_u8Iterator++){
		Copy_ptrArray[LOC_u8Iterator] = 0;
	}
}
